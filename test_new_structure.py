#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import sys
import traceback

def test_new_structure():
    print('üîÑ –¢–ï–°–¢ –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´')
    print('=' * 60)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        exec(open('1.py').read(), globals())
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = load_excel_data()
        if df is not None:
            print(f'‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} —Ç–æ–≤–∞—Ä–æ–≤')
            print(f'üìä –°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
            print('\nüìã –ü–ï–†–í–´–ï 3 –¢–û–í–ê–†–ê:')
            for i in range(min(3, len(df))):
                row = df.iloc[i]
                brand = row.get('–ë—Ä–µ–Ω–¥', 'N/A')
                aroma = row.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
                quality = row.get('–ö–∞—á–µ—Å—Ç–≤–æ', 'N/A')
                factory = row.get('–§–∞–±—Ä–∏–∫–∞', 'N/A')
                price_50 = row.get('50 GR', 'N/A')
                price_500 = row.get('500 GR', 'N/A')
                
                print(f'  {i+1}. {brand} - {aroma}')
                print(f'     ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {quality} (—É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!)')
                print(f'     üè≠ –§–∞–±—Ä–∏–∫–∞: {factory}')
                print(f'     üí∞ –¶–µ–Ω—ã: 50 GR = {price_50}‚ÇΩ/–º–ª, 500 GR = {price_500}‚ÇΩ/–º–ª')
                print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–û–ü-5 –∞—Ä–æ–º–∞—Ç–æ–≤
            print('üî• –¢–û–ü-5 –ü–û–ü–£–õ–Ø–†–ù–´–• –ê–†–û–ú–ê–¢–û–í:')
            top_products = get_top_products(sort_by='TOP LAST', limit=5)
            
            for i, product in enumerate(top_products, 1):
                brand = product.get('–ë—Ä–µ–Ω–¥', 'N/A')
                aroma = product.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
                quality = product.get('–ö–∞—á–µ—Å—Ç–≤–æ', 'N/A')
                popularity = product.get('TOP LAST', 0)
                
                print(f'{i}. {brand} - {aroma}')
                print(f'   ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {quality}')
                print(f'   üìà –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {popularity*100:.2f}%')
                print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –¥–ª—è 300 –º–ª
            if top_products:
                product = top_products[0]
                brand = product.get('–ë—Ä–µ–Ω–¥', 'N/A')
                aroma = product.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
                
                print(f'üí∞ –†–ê–°–ß–ï–¢ –î–õ–Ø {brand} - {aroma} (300 –º–ª):')
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                print('üìä –í—Å–µ —Ü–µ–Ω—ã:')
                for col in ['30 GR', '50 GR', '500 GR', '1 KG']:
                    price = product.get(col, 'N/A')
                    print(f'  {col}: {price}‚ÇΩ/–º–ª')
                    
                price_info = calculate_price(product, 300)
                if price_info:
                    print(f'\nüßÆ –†–∞—Å—á–µ—Ç –¥–ª—è 300 –º–ª:')
                    print(f'  üì¶ –û–±—ä–µ–º: {price_info["volume_ml"]} –º–ª')
                    print(f'  üéØ Tier: {price_info["tier"]}')
                    print(f'  üíµ –¶–µ–Ω–∞ –∑–∞ –º–ª: {price_info["price_per_ml"]}‚ÇΩ')
                    print(f'  üí∞ –ò—Ç–æ–≥–æ: {price_info["total_price"]}‚ÇΩ')
                else:
                    print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É')
                    
        else:
            print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
            
        print('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}')
        traceback.print_exc()

if __name__ == "__main__":
    test_new_structure() 