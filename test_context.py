#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_context_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        from context import add_user_message, add_assistant_message, get_user_context, clear_user_context
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        test_user_id = 999999
        
        print(f"üìù –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        add_user_message(test_user_id, "–ü—Ä–∏–≤–µ—Ç!")
        add_assistant_message(test_user_id, "–ü—Ä–∏–≤–µ—Ç! üêÜ –ö–∞–∫ –¥–µ–ª–∞?")
        add_user_message(test_user_id, "–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!")
        add_assistant_message(test_user_id, "–û—Ç–ª–∏—á–Ω–æ! ‚ú® –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        add_user_message(test_user_id, "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –¥—É—Ö–∏")
        add_assistant_message(test_user_id, "–ö–æ–Ω–µ—á–Ω–æ! üé≠ –£ –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –∞—Ä–æ–º–∞—Ç–æ–≤!")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = get_user_context(test_user_id)
        print(f"\nüìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
        for i, msg in enumerate(context, 1):
            print(f"  {i}. {msg['role']}: {msg['content'][:50]}...")
        
        print(f"\n‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {len(context)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        clear_user_context(test_user_id)
        print("üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω")
        
        print("\nüéâ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

async def test_main_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ–∞–π–ª–æ–º"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ–∞–π–ª–æ–º...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
        import importlib.util
        spec = importlib.util.spec_from_file_location("main_module", "1.py")
        main_module = importlib.util.module_from_spec(spec)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CONTEXT_ENABLED —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if hasattr(main_module, 'CONTEXT_ENABLED'):
            print(f"‚úÖ CONTEXT_ENABLED = {main_module.CONTEXT_ENABLED}")
        else:
            print("‚ùå CONTEXT_ENABLED –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    context_test = asyncio.run(test_context_system())
    integration_test = asyncio.run(test_main_integration())
    
    if context_test and integration_test:
        print("\nüéä –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        sys.exit(1) 