#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ AI-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets –∏ DeepSeek
"""

import pandas as pd
import requests
import io
import urllib3
import asyncio
import sys

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def get_quality_name(quality_code):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è DeepSeek"""
    quality_map = {
        6: 'TOP',
        5: 'Q1', 
        4: 'Q2'
    }
    return quality_map.get(quality_code, f'{quality_code}')

def get_quality_description(quality_code):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    quality_desc_map = {
        6: 'TOP (–≤—ã—Å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)',
        5: 'Q1 (–æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)', 
        4: 'Q2 (—Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)'
    }
    return quality_desc_map.get(quality_code, f'–ö–∞—á–µ—Å—Ç–≤–æ {quality_code}')

def test_google_sheets_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
    print("üîÑ –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...")
    
    try:
        GOOGLE_SHEETS_URL = "https://docs.google.com/spreadsheets/d/1rvb3QdanuukCyXnoQZZxz7HF6aJXm2de/export?format=xlsx&gid=1870986273"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ requests –±–µ–∑ SSL –ø—Ä–æ–≤–µ—Ä–∫–∏
        session = requests.Session()
        session.verify = False
        
        response = session.get(GOOGLE_SHEETS_URL, timeout=30)
        response.raise_for_status()
        
        # –ß–∏—Ç–∞–µ–º Excel –∏–∑ –ø–∞–º—è—Ç–∏
        df = pd.read_excel(io.BytesIO(response.content), header=2, skiprows=[3])
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = df.dropna(how='all')
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é –±—Ä–µ–Ω–¥–∞ –∏ –∞—Ä–æ–º–∞—Ç–∞ (—Å—Ç–æ–ª–±—Ü—ã 5 –∏ 6)
        if len(df.columns) > 6:
            df = df[df.iloc[:, 5].notna() & df.iloc[:, 6].notna()]
        else:
            raise Exception("Invalid data structure")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
        if len(df.columns) >= 15:
            column_mapping = {
                df.columns[5]: '–ë—Ä–µ–Ω–¥',      # –°—Ç–æ–ª–±–µ—Ü 5
                df.columns[6]: '–ê—Ä–æ–º–∞—Ç',     # –°—Ç–æ–ª–±–µ—Ü 6
                df.columns[7]: '–ü–æ–ª',        # –°—Ç–æ–ª–±–µ—Ü 7
                df.columns[8]: '–§–∞–±—Ä–∏–∫–∞',    # –°—Ç–æ–ª–±–µ—Ü 8
                df.columns[9]: '–ö–∞—á–µ—Å—Ç–≤–æ',   # –°—Ç–æ–ª–±–µ—Ü 9
                df.columns[11]: '30 GR',     # –°—Ç–æ–ª–±–µ—Ü 11
                df.columns[12]: '50 GR',     # –°—Ç–æ–ª–±–µ—Ü 12
                df.columns[13]: '500 GR',    # –°—Ç–æ–ª–±–µ—Ü 13
                df.columns[14]: '1 KG',      # –°—Ç–æ–ª–±–µ—Ü 14
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã TOP LAST –∏ TOP ALL
            if len(df.columns) > 23:
                column_mapping[df.columns[23]] = 'TOP LAST'
            if len(df.columns) > 24:
                column_mapping[df.columns[24]] = 'TOP ALL'
            
            df = df.rename(columns=column_mapping)
        else:
            raise Exception("Invalid column structure")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        price_columns = ['30 GR', '50 GR', '500 GR', '1 KG']
        for col in price_columns:
            if col in df.columns:
                df[col] = df[col].astype(str).str.replace('‚ÇΩ', '').str.replace(' ', '').str.replace('nan', '')
                df[col] = pd.to_numeric(df[col], errors='coerce')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        if 'TOP LAST' in df.columns:
            df['TOP LAST'] = pd.to_numeric(df['TOP LAST'], errors='coerce')
        
        if 'TOP ALL' in df.columns:
            df['TOP ALL'] = pd.to_numeric(df['TOP ALL'], errors='coerce')
        
        # –û—á–∏—â–∞–µ–º –æ—Ç —Å—Ç—Ä–æ–∫ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
        df = df[df['–ë—Ä–µ–Ω–¥'].notna() & df['–ê—Ä–æ–º–∞—Ç'].notna()]
        
        print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"  üìä –°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
        print("\n  üìã –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:")
        for i in range(min(3, len(df))):
            row = df.iloc[i]
            brand = row.get('–ë—Ä–µ–Ω–¥', 'N/A')
            aroma = row.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
            factory = row.get('–§–∞–±—Ä–∏–∫–∞', 'N/A')
            quality = get_quality_name(row.get('–ö–∞—á–µ—Å—Ç–≤–æ', 0))
            price_50 = row.get('50 GR', 'N/A')
            
            print(f"    {i+1}. {brand} - {aroma}")
            print(f"       üè≠ –§–∞–±—Ä–∏–∫–∞: {factory}, ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {quality}")
            print(f"       üí∞ 50 GR: {price_50}‚ÇΩ")
        
        return df
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_product_search(df):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤...")
    
    if df is None:
        print("  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    try:
        # –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
        def search_products(query, limit=10):
            if df is None or df.empty:
                return []
            
            query_lower = query.lower()
            mask = (
                df['–ë—Ä–µ–Ω–¥'].str.lower().str.contains(query_lower, na=False) |
                df['–ê—Ä–æ–º–∞—Ç'].str.lower().str.contains(query_lower, na=False)
            )
            
            results = df[mask].head(limit)
            return results.to_dict('records')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        test_queries = ['AJMAL', 'BVLGARI', 'KILIAN']
        
        for query in test_queries:
            results = search_products(query, limit=3)
            print(f"  üîç –ü–æ–∏—Å–∫ '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ç–æ–≤–∞—Ä–æ–≤")
            
            for i, product in enumerate(results[:2]):
                brand = product.get('–ë—Ä–µ–Ω–¥', 'N/A')
                aroma = product.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
                quality = get_quality_name(product.get('–ö–∞—á–µ—Å—Ç–≤–æ', 0))
                print(f"    - {brand} - {aroma} (–∫–∞—á–µ—Å—Ç–≤–æ: {quality})")
        
        print("  ‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return False

def test_price_calculation(df):
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω"""
    print("\nüí∞ –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç —Ü–µ–Ω...")
    
    if df is None:
        print("  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    try:
        def calculate_price(product, volume_ml):
            """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞"""
            if volume_ml <= 49:
                base_price = product.get('30 GR')
                tier = '30-49 –º–ª'
            elif volume_ml <= 499:
                base_price = product.get('50 GR')
                tier = '50-499 –º–ª'
            elif volume_ml <= 999:
                base_price = product.get('500 GR')
                tier = '500-999 –º–ª'
            else:
                base_price = product.get('1 KG')
                tier = '1000+ –º–ª'
            
            if pd.isna(base_price) or base_price is None:
                return None
            
            total_price = float(base_price) * volume_ml
            
            return {
                'volume_ml': volume_ml,
                'price_per_ml': float(base_price),
                'total_price': total_price,
                'tier': tier
            }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω
        if len(df) > 0:
            product = df.iloc[0].to_dict()
            brand = product.get('–ë—Ä–µ–Ω–¥', 'N/A')
            aroma = product.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
            
            print(f"  üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ç–æ–≤–∞—Ä–æ–º: {brand} - {aroma}")
            
            test_volumes = [30, 100, 500, 1500]
            for volume in test_volumes:
                price_info = calculate_price(product, volume)
                if price_info:
                    print(f"    üì¶ {volume} –º–ª: {price_info['total_price']:.2f}‚ÇΩ "
                          f"({price_info['price_per_ml']:.2f}‚ÇΩ/–º–ª, tier: {price_info['tier']})")
                else:
                    print(f"    üì¶ {volume} –º–ª: –¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        print("  ‚úÖ –†–∞—Å—á–µ—Ç —Ü–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω: {e}")
        return False

def test_deepseek_context(df):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è DeepSeek"""
    print("\nü§ñ –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è DeepSeek...")
    
    if df is None:
        print("  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    try:
        def get_excel_context_for_deepseek(query=""):
            context = "\n=== –ë–ê–ó–ê –î–ê–ù–ù–´–• –ê–†–û–ú–ê–¢–û–í ===\n"
            context += f"üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(df)}\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            if query.strip():
                query_lower = query.lower()
                mask = (
                    df['–ë—Ä–µ–Ω–¥'].str.lower().str.contains(query_lower, na=False) |
                    df['–ê—Ä–æ–º–∞—Ç'].str.lower().str.contains(query_lower, na=False)
                )
                
                products = df[mask].head(5).to_dict('records')
                if products:
                    context += f"\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –ê–†–û–ú–ê–¢–´ –ü–û –ó–ê–ü–†–û–°–£ '{query}':\n"
                    for product in products:
                        brand = product.get('–ë—Ä–µ–Ω–¥', 'N/A')
                        aroma = product.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
                        factory = product.get('–§–∞–±—Ä–∏–∫–∞', 'N/A')
                        quality = get_quality_name(product.get('–ö–∞—á–µ—Å—Ç–≤–æ', 0))
                        
                        context += f"üè∑Ô∏è {brand} - {aroma}\n"
                        context += f"üè≠ –§–∞–±—Ä–∏–∫–∞: {factory}\n"
                        context += f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {quality}\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã
                        prices = []
                        price_columns = {'30 GR': '30-49–º–ª', '50 GR': '50-499–º–ª', '500 GR': '500-999–º–ª', '1 KG': '1000+–º–ª'}
                        for col, desc in price_columns.items():
                            price = product.get(col)
                            if pd.notna(price) and price > 0:
                                prices.append(f"{desc}: {price}‚ÇΩ/–º–ª")
                        
                        if prices:
                            context += f"üí∞ –¶–µ–Ω—ã: {', '.join(prices)}\n"
                        context += "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã
            if 'TOP LAST' in df.columns:
                top_products = df.nlargest(5, 'TOP LAST').to_dict('records')
                if top_products:
                    context += "\nüî• –¢–û–ü-5 –ü–û–ü–£–õ–Ø–†–ù–´–• –ê–†–û–ú–ê–¢–û–í (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤):\n"
                    for i, product in enumerate(top_products, 1):
                        brand = product.get('–ë—Ä–µ–Ω–¥', 'N/A')
                        aroma = product.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
                        factory = product.get('–§–∞–±—Ä–∏–∫–∞', 'N/A')
                        quality = get_quality_name(product.get('–ö–∞—á–µ—Å—Ç–≤–æ', 0))
                        popularity = product.get('TOP LAST', 0)
                        
                        context += f"{i}. üè∑Ô∏è {brand} - {aroma}\n"
                        context += f"üè≠ –§–∞–±—Ä–∏–∫–∞: {factory}\n"
                        context += f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {quality}\n"
                        if pd.notna(popularity) and popularity > 0:
                            context += f"üìà –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {popularity*100:.2f}%\n"
                        context += "\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–±—Ä–∏–∫–∞—Ö –∏ –∫–∞—á–µ—Å—Ç–≤–µ
            context += "\nüè≠ –î–û–°–¢–£–ü–ù–´–ï –§–ê–ë–†–ò–ö–ò: EPS, LUZI, SELUZ, UNKNOWN, MANE\n"
            context += "‚≠ê –ö–ê–ß–ï–°–¢–í–ê: TOP > Q1 > Q2\n"
            context += "\nüí∞ –¶–ï–ù–û–í–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò:\n"
            context += "‚Ä¢ 30-49 –º–ª: —Ü–µ–Ω–∞ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ '30 GR'\n"
            context += "‚Ä¢ 50-499 –º–ª: —Ü–µ–Ω–∞ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ '50 GR'\n"
            context += "‚Ä¢ 500-999 –º–ª: —Ü–µ–Ω–∞ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ '500 GR'\n"
            context += "‚Ä¢ 1000+ –º–ª: —Ü–µ–Ω–∞ –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ '1 KG'\n"
            
            return context
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        test_queries = ['', 'AJMAL', 'BVLGARI']
        
        for query in test_queries:
            context = get_excel_context_for_deepseek(query)
            print(f"  üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query or '–æ–±—â–∏–π'}':")
            print(f"    üìè –î–ª–∏–Ω–∞: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
            preview = context[:200] + "..." if len(context) > 200 else context
            print(f"    üìÑ –ü—Ä–µ–≤—å—é: {preview}")
            print()
        
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        return False

def test_quality_mapping():
    """–¢–µ—Å—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    print("\n‚≠ê –¢–µ—Å—Ç 5: –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞...")
    
    try:
        test_cases = [
            (4, 'Q2', 'Q2 (—Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)'),
            (5, 'Q1', 'Q1 (–æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)'),
            (6, 'TOP', 'TOP (–≤—ã—Å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)'),
            (7, '7', '–ö–∞—á–µ—Å—Ç–≤–æ 7'),
        ]
        
        for quality_code, expected_short, expected_full in test_cases:
            short_name = get_quality_name(quality_code)
            full_name = get_quality_description(quality_code)
            
            if short_name == expected_short and full_name == expected_full:
                print(f"  ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ {quality_code}: {short_name} / {full_name}")
            else:
                print(f"  ‚ùå –ö–∞—á–µ—Å—Ç–≤–æ {quality_code}: –æ–∂–∏–¥–∞–ª–∏ {expected_short}/{expected_full}, –ø–æ–ª—É—á–∏–ª–∏ {short_name}/{full_name}")
                return False
        
        print("  ‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        return False

async def test_deepseek_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å DeepSeek (—Å–∏–º—É–ª—è—Ü–∏—è)"""
    print("\nüß† –¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DeepSeek (—Å–∏–º—É–ª—è—Ü–∏—è)...")
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        def analyze_query_for_excel_data(question):
            question_lower = question.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
            excel_keywords = [
                '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–ø—Ä–∞–π—Å',
                '—Ñ–∞–±—Ä–∏–∫–∞', '–∫–∞—á–µ—Å—Ç–≤–æ', '–ø–æ–ø—É–ª—è—Ä–Ω—ã–π', '—Ç–æ–ø',
                '–±—Ä–µ–Ω–¥', '–∞—Ä–æ–º–∞—Ç', '–¥—É—Ö–∏', '–ø–∞—Ä—Ñ—é–º'
            ]
            
            needs_excel = any(keyword in question_lower for keyword in excel_keywords)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
            search_terms = []
            brands = ['ajmal', 'bvlgari', 'kilian', 'afnan', 'creed']
            for brand in brands:
                if brand in question_lower:
                    search_terms.append(brand)
            
            return {
                'needs_excel_data': needs_excel,
                'search_terms': search_terms,
                'question_type': 'price_inquiry' if any(w in question_lower for w in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ']) else 'general'
            }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        test_questions = [
            "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∞—Ä–æ–º–∞—Ç AJMAL?",
            "–ö–∞–∫–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ TOP",
            "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
            "–ö–∞–∫–æ–π –∞—Ä–æ–º–∞—Ç BVLGARI —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π?"
        ]
        
        for question in test_questions:
            analysis = analyze_query_for_excel_data(question)
            print(f"  üîç –í–æ–ø—Ä–æ—Å: '{question}'")
            print(f"    üìä –ù—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ Excel: {analysis['needs_excel_data']}")
            print(f"    üîé –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {analysis['search_terms']}")
            print(f"    üìù –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: {analysis['question_type']}")
            print()
        
        print("  ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üêª –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ü–†–û–ï–ö–¢–ê AI-–ú–ï–î–í–ï–ñ–û–ù–û–ö üêª")
    print("=" * 50)
    
    results = []
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = test_google_sheets_loading()
    results.append(df is not None)
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
    results.append(test_product_search(df))
    
    # –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç —Ü–µ–Ω
    results.append(test_price_calculation(df))
    
    # –¢–µ—Å—Ç 4: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è DeepSeek
    results.append(test_deepseek_context(df))
    
    # –¢–µ—Å—Ç 5: –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞
    results.append(test_quality_mapping())
    
    # –¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DeepSeek
    results.append(asyncio.run(test_deepseek_integration()))
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    test_names = [
        "–ó–∞–≥—Ä—É–∑–∫–∞ Google Sheets",
        "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤", 
        "–†–∞—Å—á–µ—Ç —Ü–µ–Ω",
        "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è DeepSeek",
        "–ú–∞–ø–ø–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞",
        "–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤"
    ]
    
    passed = sum(results)
    total = len(results)
    
    for i, (name, result) in enumerate(zip(test_names, results), 1):
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{i}. {name}: {status}")
    
    print(f"\nüéØ –ò–¢–û–ì: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüîß –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:")
        print("  ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets")
        print("  ‚úÖ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –±—Ä–µ–Ω–¥—É –∏ –∞—Ä–æ–º–∞—Ç—É")
        print("  ‚úÖ –†–∞—Å—á–µ—Ç —Ü–µ–Ω –ø–æ –æ–±—ä–µ–º–∞–º")
        print("  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è DeepSeek")
        print("  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ (TOP, Q1, Q2)")
        print("  ‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("\nüöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    return passed == total

if __name__ == "__main__":
    main() 