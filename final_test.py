#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –≤ GitHub
"""

import asyncio
import traceback

def test_all_functions():
    print('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –§–£–ù–ö–¶–ò–ô')
    print('=' * 70)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        exec(open('1.py').read(), globals())
        
        # 1. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        print('1Ô∏è‚É£ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• –ò–ó GOOGLE SHEETS')
        print('-' * 50)
        
        df = load_excel_data()
        if df is not None:
            print(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(df)}')
            print(f'üìä –°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
            quality_values = df['–ö–∞—á–µ—Å—Ç–≤–æ'].unique()[:10]
            print(f'‚≠ê –ü—Ä–∏–º–µ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞: {list(quality_values)}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã
            price_example = df.iloc[0]
            print(f'üí∞ –ü—Ä–∏–º–µ—Ä —Ü–µ–Ω —Ç–æ–≤–∞—Ä–∞ "{price_example.get("–ë—Ä–µ–Ω–¥")} - {price_example.get("–ê—Ä–æ–º–∞—Ç")}":')
            for col in ['30 GR', '50 GR', '500 GR', '1 KG']:
                price = price_example.get(col, 'N/A')
                print(f'    {col}: {price}‚ÇΩ/–º–ª')
        else:
            print('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
            return False
        
        # 2. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        print('\n2Ô∏è‚É£ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –¢–û–í–ê–†–û–í')
        print('-' * 50)
        
        search_results = search_products('AJMAL', limit=3)
        print(f'üîç –ü–æ–∏—Å–∫ "AJMAL": –Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ç–æ–≤–∞—Ä–æ–≤')
        for i, product in enumerate(search_results, 1):
            brand = product.get('–ë—Ä–µ–Ω–¥', 'N/A')
            aroma = product.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
            quality = product.get('–ö–∞—á–µ—Å—Ç–≤–æ', 'N/A')
            print(f'  {i}. {brand} - {aroma} (–∫–∞—á–µ—Å—Ç–≤–æ: {quality})')
        
        # 3. –¢–µ—Å—Ç –¢–û–ü –∞—Ä–æ–º–∞—Ç–æ–≤
        print('\n3Ô∏è‚É£ –¢–ï–°–¢ –¢–û–ü –ê–†–û–ú–ê–¢–û–í')
        print('-' * 50)
        
        top_products = get_top_products(sort_by='TOP LAST', limit=3)
        print(f'üî• –¢–û–ü-3 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞—Ä–æ–º–∞—Ç–∞:')
        for i, product in enumerate(top_products, 1):
            brand = product.get('–ë—Ä–µ–Ω–¥', 'N/A')
            aroma = product.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
            quality = product.get('–ö–∞—á–µ—Å—Ç–≤–æ', 'N/A')
            popularity = product.get('TOP LAST', 0)
            print(f'  {i}. {brand} - {aroma}')
            print(f'     ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {quality}')
            print(f'     üìà –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {popularity*100:.2f}%')
        
        # 4. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –†–∞—Å—á–µ—Ç —Ü–µ–Ω –¥–ª—è 300 –º–ª
        print('\n4Ô∏è‚É£ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –†–ê–°–ß–ï–¢ –¶–ï–ù –î–õ–Ø 300 –ú–õ')
        print('-' * 50)
        
        if top_products:
            test_product = top_products[0]
            brand = test_product.get('–ë—Ä–µ–Ω–¥', 'N/A')
            aroma = test_product.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
            
            print(f'üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {brand} - {aroma}')
            print('üìä –í—Å–µ —Ü–µ–Ω—ã —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:')
            for col in ['30 GR', '50 GR', '500 GR', '1 KG']:
                price = test_product.get(col, 'N/A')
                print(f'    {col}: {price}‚ÇΩ/–º–ª')
            
            # –†–∞—Å—á–µ—Ç –¥–ª—è 300 –º–ª
            price_info = calculate_price(test_product, 300)
            if price_info:
                print(f'\nüí∞ –†–ê–°–ß–ï–¢ –î–õ–Ø 300 –ú–õ:')
                print(f'    üì¶ –û–±—ä–µ–º: {price_info["volume_ml"]} –º–ª')
                print(f'    üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π tier: {price_info["tier"]}')
                print(f'    üíµ –¶–µ–Ω–∞ –∑–∞ –º–ª: {price_info["price_per_ml"]}‚ÇΩ')
                print(f'    üßÆ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {price_info["total_price"]}‚ÇΩ')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
                expected_price_per_ml = test_product.get('50 GR', 0)
                if price_info["price_per_ml"] == expected_price_per_ml:
                    print('    ‚úÖ –¶–ï–ù–ê –ü–†–ê–í–ò–õ–¨–ù–ê–Ø (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 50 GR –¥–ª—è 300 –º–ª)')
                else:
                    print(f'    ‚ùå –û–®–ò–ë–ö–ê: –æ–∂–∏–¥–∞–ª–∞—Å—å —Ü–µ–Ω–∞ {expected_price_per_ml}‚ÇΩ/–º–ª –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ 50 GR')
                    return False
            else:
                print('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É')
                return False
        
        # 5. –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤
        print('\n5Ô∏è‚É£ –¢–ï–°–¢ –†–ê–ó–õ–ò–ß–ù–´–• –û–ë–™–ï–ú–û–í')
        print('-' * 50)
        
        test_volumes = [30, 100, 300, 600, 1200]
        for volume in test_volumes:
            price_info = calculate_price(test_product, volume)
            if price_info:
                print(f'üì¶ {volume} –º–ª ‚Üí tier: {price_info["tier"]}, —Ü–µ–Ω–∞: {price_info["price_per_ml"]}‚ÇΩ/–º–ª, –∏—Ç–æ–≥–æ: {price_info["total_price"]}‚ÇΩ')
            else:
                print(f'‚ùå {volume} –º–ª ‚Üí –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å')
        
        # 6. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è DeepSeek
        print('\n6Ô∏è‚É£ –¢–ï–°–¢ –ö–û–ù–¢–ï–ö–°–¢–ê –î–õ–Ø DEEPSEEK')
        print('-' * 50)
        
        context = get_excel_context_for_deepseek('AJMAL')
        print(f'üìù –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤')
        print(f'üìÑ –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:')
        print(f'    {context[:300]}...')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
        if 'TOP' in context or 'Q1' in context or 'Q2' in context:
            print('‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (TOP/Q1/Q2)')
        else:
            print('‚ùå –û–®–ò–ë–ö–ê: –ö–∞—á–µ—Å—Ç–≤–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return False
        
        # 7. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        print('\n7Ô∏è‚É£ –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –ó–ê–ü–†–û–°–û–í')
        print('-' * 50)
        
        test_queries = [
            "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç AJMAL AMBER WOOD 300 –º–ª?",
            "–ü–æ–∫–∞–∂–∏ —Ç–æ–ø –∞—Ä–æ–º–∞—Ç—ã",
            "–ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞?"
        ]
        
        for query in test_queries:
            needs_excel, search_query = analyze_query_for_excel_data(query)
            print(f'‚ùì "{query}"')
            print(f'    üìä –ù—É–∂–µ–Ω Excel: {needs_excel}')
            print(f'    üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "{search_query}"')
        
        print('\n' + '=' * 70)
        print('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!')
        print('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç')
        print('‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (TOP/Q1/Q2)')
        print('‚úÖ –†–∞—Å—á–µ—Ç —Ü–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (300 –º–ª ‚Üí 50 GR tier)')
        print('‚úÖ –ü–æ–∏—Å–∫ –∏ –¢–û–ü –∞—Ä–æ–º–∞—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç')
        print('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è DeepSeek —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ')
        print('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç')
        print('\nüöÄ –ì–û–¢–û–í–û –ö –ó–ê–ì–†–£–ó–ö–ï –í GITHUB!')
        
        return True
        
    except Exception as e:
        print(f'\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}')
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_all_functions()
    if not success:
        print('\nüõë –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ù–ï –ó–ê–ì–†–£–ñ–ê–ô–¢–ï –í GITHUB!')
        exit(1)
    else:
        print('\n‚ú® –í–°–ï –û–¢–õ–ò–ß–ù–û! –ú–û–ñ–ù–û –ó–ê–ì–†–£–ñ–ê–¢–¨ –í GITHUB!') 