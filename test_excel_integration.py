#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Excel –¥–∞–Ω–Ω—ã—Ö —Å AI –º–µ–¥–≤–µ–∂–æ–Ω–∫–æ–º
"""

import pandas as pd
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel
def load_excel_demo():
    """–î–µ–º–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel...")
    
    df = pd.read_excel('1.xlsx', header=2, skiprows=[3])
    df = df.dropna(how='all')
    df = df[~df['–ë—Ä–µ–Ω–¥'].astype(str).str.contains('Column', na=False)]
    df = df[df['–ë—Ä–µ–Ω–¥'].notna()]
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    numeric_columns = ['30 GR', '50 GR', '500 GR', '1 KG', '5 KG', '10 KG', 'TOP LAST', 'TOP ALL']
    for col in numeric_columns:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Ç–æ–≤–∞—Ä–æ–≤")
    return df

def search_products_demo(df, query):
    """–î–µ–º–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    print(f"\nüîç –ò—â—É —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
    
    query_lower = query.lower()
    mask = (
        df['–ë—Ä–µ–Ω–¥'].astype(str).str.lower().str.contains(query_lower, na=False) |
        df['–ê—Ä–æ–º–∞—Ç'].astype(str).str.lower().str.contains(query_lower, na=False)
    )
    
    results = df[mask].head(5)
    print(f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    for i, (idx, row) in enumerate(results.iterrows()):
        print(f"  {i+1}. {row['–ë—Ä–µ–Ω–¥']} - {row['–ê—Ä–æ–º–∞—Ç']}")
        print(f"     üè≠ –§–∞–±—Ä–∏–∫–∞: {row['–§–∞–±—Ä–∏–∫–∞']}, ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {row['–ö–∞—á–µ—Å—Ç–≤–æ']}")
        print(f"     üí∞ –¶–µ–Ω—ã: 50–º–ª={row.get('50 GR', 'N/A')}‚ÇΩ/–º–ª, 500–º–ª={row.get('500 GR', 'N/A')}‚ÇΩ/–º–ª")
        print()
    
    return results

def calculate_price_demo(product, volume):
    """–î–µ–º–æ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã"""
    print(f"\nüí∞ –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –¥–ª—è {volume}–º–ª:")
    
    if 30 <= volume < 50:
        price_per_ml = product.get('30 GR', 0)
        category = "30-49 –º–ª"
    elif 50 <= volume < 500:
        price_per_ml = product.get('50 GR', 0)
        category = "50-499 –º–ª"
    elif 500 <= volume < 1000:
        price_per_ml = product.get('500 GR', 0)
        category = "500-999 –º–ª"
    elif volume >= 1000:
        price_per_ml = product.get('1 KG', 0)
        category = "1000+ –º–ª"
    else:
        price_per_ml = product.get('30 GR', 0)
        category = "–¥–æ 30 –º–ª"
    
    if price_per_ml and not pd.isna(price_per_ml):
        total_price = float(price_per_ml) * volume
        print(f"  üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        print(f"  üíµ –¶–µ–Ω–∞ –∑–∞ –º–ª: {price_per_ml}‚ÇΩ")
        print(f"  üõí –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price:,.0f}‚ÇΩ")
        return total_price
    else:
        print("  ‚ùå –¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return None

def create_ai_context_demo(df, query):
    """–î–µ–º–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI"""
    print(f"\nü§ñ –°–æ–∑–¥–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI –º–µ–¥–≤–µ–∂–æ–Ω–∫–∞...")
    
    # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    query_lower = query.lower()
    mask = (
        df['–ë—Ä–µ–Ω–¥'].astype(str).str.lower().str.contains(query_lower, na=False) |
        df['–ê—Ä–æ–º–∞—Ç'].astype(str).str.lower().str.contains(query_lower, na=False)
    )
    
    products = df[mask].head(3)
    
    context = "=== –ê–ö–¢–£–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó –ü–†–ê–ô–°-–õ–ò–°–¢–ê ===\n\n"
    
    if len(products) > 0:
        context += f"üîç –ù–ê–ô–î–ï–ù–ù–´–ï –ê–†–û–ú–ê–¢–´ –ü–û –ó–ê–ü–†–û–°–£ '{query}':\n"
        for _, product in products.iterrows():
            context += f"üè∑Ô∏è {product['–ë—Ä–µ–Ω–¥']} - {product['–ê—Ä–æ–º–∞—Ç']}\n"
            context += f"üè≠ –§–∞–±—Ä–∏–∫–∞: {product['–§–∞–±—Ä–∏–∫–∞']}\n"
            context += f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {product['–ö–∞—á–µ—Å—Ç–≤–æ']}\n"
            
            prices = []
            for col, range_text in [('30 GR', '30-49–º–ª'), ('50 GR', '50-499–º–ª'), 
                                   ('500 GR', '500-999–º–ª'), ('1 KG', '1000+–º–ª')]:
                price = product.get(col)
                if price and not pd.isna(price):
                    prices.append(f"{range_text}: {price}‚ÇΩ/–º–ª")
            
            if prices:
                context += f"üí∞ –¶–µ–Ω—ã: {', '.join(prices)}\n"
            
            # –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
            top_last = product.get('TOP LAST')
            if top_last and not pd.isna(top_last):
                context += f"üìà –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (6 –º–µ—Å): {float(top_last)*100:.2f}%\n"
            
            context += "\n"
    
    # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã
    if 'TOP LAST' in df.columns and df['TOP LAST'].notna().sum() > 0:
        top_products = df.nlargest(3, 'TOP LAST')
        context += "üî• –¢–û–ü-3 –ü–û–ü–£–õ–Ø–†–ù–´–• –ê–†–û–ú–ê–¢–û–í:\n"
        for i, (_, product) in enumerate(top_products.iterrows(), 1):
            popularity = product.get('TOP LAST', 0)
            if pd.notna(popularity):
                context += f"{i}. {product['–ë—Ä–µ–Ω–¥']} - {product['–ê—Ä–æ–º–∞—Ç']} "
                context += f"({float(popularity)*100:.2f}% –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏)\n"
            else:
                context += f"{i}. {product['–ë—Ä–µ–Ω–¥']} - {product['–ê—Ä–æ–º–∞—Ç']}\n"
    else:
        context += "üî• –¢–û–ü –ê–†–û–ú–ê–¢–û–í: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
    
    context += "\nüè≠ –§–ê–ë–†–ò–ö–ò: EPS, LUZI, SELUZ, UNKNOWN, MANE\n"
    context += "‚≠ê –ö–ê–ß–ï–°–¢–í–ê: 6 (TOP) > 5 (Q1) > 4 (Q2)\n"
    
    print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω")
    return context

def main():
    """–ì–ª–∞–≤–Ω–∞—è –¥–µ–º–æ —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üêª –î–ï–ú–û: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø EXCEL –î–ê–ù–ù–´–• –° AI –ú–ï–î–í–ï–ñ–û–ù–ö–û–ú")
    print("=" * 60)
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_excel_demo()
    
    # 2. –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
    search_query = "AJMAL"
    results = search_products_demo(df, search_query)
    
    # 3. –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
    if len(results) > 0:
        product = results.iloc[0]
        calculate_price_demo(product, 60)  # 60 –º–ª
        calculate_price_demo(product, 300)  # 300 –º–ª
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI
    ai_context = create_ai_context_demo(df, search_query)
    
    # 5. –î–µ–º–æ –æ—Ç–≤–µ—Ç–∞ –º–µ–¥–≤–µ–∂–æ–Ω–∫–∞
    print(f"\nüêª –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ AI –º–µ–¥–≤–µ–∂–æ–Ω–∫–∞:")
    print("-" * 50)
    print(f"–ü—Ä–∏–≤–µ—Ç! –ù–∞—à–µ–ª –¥–ª—è —Ç–µ–±—è –∞—Ä–æ–º–∞—Ç—ã {search_query}! üåü")
    print()
    
    if len(results) > 0:
        product = results.iloc[0]
        print(f"üè∑Ô∏è {product['–ë—Ä–µ–Ω–¥']} - {product['–ê—Ä–æ–º–∞—Ç']}")
        print(f"üè≠ –§–∞–±—Ä–∏–∫–∞ {product['–§–∞–±—Ä–∏–∫–∞']}, –∫–∞—á–µ—Å—Ç–≤–æ {product['–ö–∞—á–µ—Å—Ç–≤–æ']}")
        
        if product.get('50 GR') and not pd.isna(product.get('50 GR')):
            price_50ml = float(product['50 GR']) * 50
            price_100ml = float(product['50 GR']) * 100
            print(f"üí∞ –¶–µ–Ω—ã: 50–º–ª = {price_50ml:,.0f}‚ÇΩ, 100–º–ª = {price_100ml:,.0f}‚ÇΩ")
        
        print()
        print("<a href='https://www.bahur.store/'>üõí –ó–∞–∫–∞–∑–∞—Ç—å</a>")
    
    print("-" * 50)
    print()
    print("=" * 60)
    print("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("üöÄ –ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫ —Ç–µ–ø–µ—Ä—å –∑–Ω–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –º–æ–∂–µ—Ç:")
    print("   ‚Ä¢ –ò—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
    print("   ‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –ª—é–±–æ–≥–æ –æ–±—ä–µ–º–∞")
    print("   ‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã")
    print("   ‚Ä¢ –£—á–∏—Ç—ã–≤–∞—Ç—å —Ñ–∞–±—Ä–∏–∫–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ")
    print("   ‚Ä¢ –î–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("=" * 60)

if __name__ == "__main__":
    main() 