import pandas as pd
import requests
import io
import urllib3

# –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# URL Google Sheets
GOOGLE_SHEETS_URL = "https://docs.google.com/spreadsheets/d/1J70LlZwh6g7JOryDG2br-weQrYfv6zTc/export?format=xlsx"

def check_links_in_excel():
    try:
        print("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        session = requests.Session()
        session.verify = False
        response = session.get(GOOGLE_SHEETS_URL, timeout=30)
        response.raise_for_status()
        
        # –ß–∏—Ç–∞–µ–º Excel
        df = pd.read_excel(io.BytesIO(response.content), header=2, skiprows=[3])
        
        print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        print(f"üìä –í—Å–µ–≥–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        print(f"\nüìã –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤:")
        for i, col in enumerate(df.columns):
            print(f"{i}: {col}")
        
        # –ò—â–µ–º —Å—Ç–æ–ª–±–µ—Ü "–°—Å—ã–ª–∫–∞"
        link_column = None
        for i, col in enumerate(df.columns):
            if '—Å—Å—ã–ª–∫–∞' in str(col).lower():
                link_column = i
                print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü '–°—Å—ã–ª–∫–∞': {col} (–∏–Ω–¥–µ–∫—Å {i})")
                break
        
        if link_column is None:
            print("\n‚ùå –°—Ç–æ–ª–±–µ—Ü '–°—Å—ã–ª–∫–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –ø–µ—Ä–≤—ã—Ö 20 —Å—Ç—Ä–æ–∫–∞—Ö
        print(f"\nüîó –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –ø–µ—Ä–≤—ã—Ö 20 —Å—Ç—Ä–æ–∫–∞—Ö:")
        valid_links = 0
        total_checked = 0
        
        for idx, row in df.head(20).iterrows():
            brand = row.get('–ë—Ä–µ–Ω–¥', 'N/A')
            aroma = row.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
            link = row.iloc[link_column] if link_column < len(row) else None
            
            total_checked += 1
            
            if pd.notna(link) and str(link).strip() and str(link).strip().startswith('http'):
                print(f"‚úÖ {brand} - {aroma}: {link}")
                valid_links += 1
            elif pd.notna(link) and str(link).strip():
                print(f"‚ö†Ô∏è  {brand} - {aroma}: {link} (–Ω–µ http)")
            else:
                print(f"‚ùå {brand} - {aroma}: —Å—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Ç—Ä–æ–∫: {total_checked}")
        print(f"–í–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {valid_links}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö: {(valid_links/total_checked)*100:.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã
        print(f"\nüîç –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã:")
        search_aromas = ['Escada Moon Sparkle', 'Escada Joyful', 'Tom Ford', 'Nasomatto']
        
        for search_aroma in search_aromas:
            for idx, row in df.iterrows():
                brand = row.get('–ë—Ä–µ–Ω–¥', '')
                aroma = row.get('–ê—Ä–æ–º–∞—Ç', '')
                link = row.iloc[link_column] if link_column < len(row) else None
                
                if search_aroma.lower() in f"{brand} {aroma}".lower():
                    print(f"üéØ –ù–∞–π–¥–µ–Ω: {brand} - {aroma}")
                    if pd.notna(link) and str(link).strip() and str(link).strip().startswith('http'):
                        print(f"   ‚úÖ –°—Å—ã–ª–∫–∞: {link}")
                    else:
                        print(f"   ‚ùå –°—Å—ã–ª–∫–∞: {link}")
                    break
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    check_links_in_excel() 