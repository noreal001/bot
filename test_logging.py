#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è DeepSeek
"""

import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
def load_main_functions():
    import os
    import sys
    
    # –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
    with open('1.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    global_env = {
        '__name__': '__main__',
        'logger': logger,
        'excel_data': None
    }
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
    exec(content, global_env)
    
    return global_env

async def test_deepseek_logging():
    """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ DeepSeek"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    
    try:
        env = load_main_functions()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        analyze_query = env['analyze_query_for_excel_data']
        get_context = env['get_excel_context_for_deepseek']
        load_excel = env['load_excel_data']
        
        print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ Excel
        print("\nüìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ Excel...")
        excel_data = load_excel()
        env['excel_data'] = excel_data
        
        if excel_data is not None:
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(excel_data)} —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Excel")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_questions = [
            "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç AJMAL AMBER WOOD?",
            "–ü–æ–∫–∞–∂–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã BVLGARI", 
            "–ö–∞–∫–∏–µ –µ—Å—Ç—å –∞—Ä–æ–º–∞—Ç—ã –æ—Ç —Ñ–∞–±—Ä–∏–∫–∏ EPS?",
            "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–∞—á–µ—Å—Ç–≤–æ TOP"
        ]
        
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        for i, question in enumerate(test_questions, 1):
            print(f"\nüîç –¢–ï–°–¢ {i}: '{question}'")
            print("-" * 50)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            needs_excel, search_query = analyze_query(question)
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã Excel –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if needs_excel:
                context = get_context(search_query)
                print(f"üìÑ –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                print("‚ÑπÔ∏è Excel –¥–∞–Ω–Ω—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
            
            print("-" * 50)
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("üéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ª–æ–≥–∞—Ö Render")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_deepseek_logging()) 