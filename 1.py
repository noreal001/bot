import os
import sqlite3
import json
import httpx
import asyncio
import aiohttp
import traceback
import logging
from datetime import datetime, timedelta
import threading
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
import uvicorn

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(name)s: %(message)s')
logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv('TOKEN')
WEBHOOK_BASE_URL = os.getenv('WEBHOOK_BASE_URL')
OPENAI_API = os.getenv('OPENAI_API_KEY')
PORT = int(os.getenv('PORT', 8000))

# --- –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = FastAPI()

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π ---
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"Global exception: {exc}\n{traceback.format_exc()}")
    return {"error": "Internal server error"}

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
@app.on_event("startup")
async def log_routes():
    logger.info("=== AVAILABLE ROUTES ===")
    for route in app.routes:
        logger.info(f"{route.methods} {route.path}")
    logger.info("=== END ROUTES ===")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ bahur_data.txt ---
def load_bahur_data():
    try:
        with open("bahur_data.txt", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        logger.error("bahur_data.txt not found")
        return "–î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ª–∏–º–∏—Ç–æ–≤ ---
def init_database():
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # –¢–∞–±–ª–∏—Ü–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS request_limits (
            user_id INTEGER PRIMARY KEY,
            daily_requests INTEGER DEFAULT 0,
            last_request_date DATE DEFAULT CURRENT_DATE,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    """)
    
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
init_database()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è AI (in-memory, not persistent) ---
user_states = {}

# --- –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
import json

def load_user_states():
    try:
        with open("user_states.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_states(states):
    with open("user_states.json", "w", encoding="utf-8") as f:
        json.dump(states, f, ensure_ascii=False, indent=2)

def set_user_state(user_id, state):
    global user_states
    if state:
        user_states[user_id] = state
    else:
        user_states.pop(user_id, None)
    save_user_states(user_states)

def get_user_state(user_id):
    global user_states
    return user_states.get(user_id)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_states = load_user_states()

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è FastAPI ---
class MessageModel(BaseModel):
    user_id: int
    text: str

class CallbackModel(BaseModel):
    user_id: int
    data: str

# --- –£—Ç–∏–ª–∏—Ç—ã ---
# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–º–∏—Ç–∞–º–∏ ---
def check_request_limit(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        cursor.execute("SELECT DATE('now')")
        current_date = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT daily_requests, last_request_date FROM request_limits WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        
        if result is None:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                INSERT INTO request_limits (user_id, daily_requests, last_request_date) 
                VALUES (?, 1, ?)
            """, (user_id, current_date))
            conn.commit()
            return True
        
        daily_requests, last_request_date = result
        
        if last_request_date != current_date:
            # –ù–æ–≤—ã–π –¥–µ–Ω—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            cursor.execute("""
                UPDATE request_limits 
                SET daily_requests = 1, last_request_date = ? 
                WHERE user_id = ?
            """, (current_date, user_id))
            conn.commit()
            return True
        
        if daily_requests >= 100:
            # –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
            conn.commit()
            return False
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        cursor.execute("""
            UPDATE request_limits 
            SET daily_requests = daily_requests + 1 
            WHERE user_id = ?
        """, (user_id,))
        conn.commit()
        return True
        
    except Exception as e:
        logger.error(f"Error checking request limit: {e}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å
    finally:
        conn.close()

def get_remaining_requests(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute("SELECT daily_requests FROM request_limits WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        
        if result is None:
            return 100  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —É –Ω–µ–≥–æ 100 –∑–∞–ø—Ä–æ—Å–æ–≤
        
        daily_requests = result[0]
        return max(0, 100 - daily_requests)
        
    except Exception as e:
        logger.error(f"Error getting remaining requests: {e}")
        return 100
    finally:
        conn.close()

# --- –§—É–Ω–∫—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
def send_weekly_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()
    
    try:
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()
        
        weekly_message = (
            "üêæ –ü—Ä–∏–≤–µ—Ç, –∞—Ä–æ–º–∞—Ç–Ω—ã–µ –¥—Ä—É–∑—å—è! üåü\n\n"
            "–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –∞—Ä–æ–º–∞—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞! "
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑. "
            "–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º! üõçÔ∏è‚ú®\n\n"
            "–° –ª—é–±–æ–≤—å—é, –≤–∞—à–∞ AI-–ü–∞–Ω—Ç–µ—Ä–∞ üêÜ"
        )
        
        for (user_id,) in users:
            try:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                logger.info(f"Weekly message would be sent to user {user_id}")
            except Exception as e:
                logger.error(f"Failed to send weekly message to user {user_id}: {e}")
                
    except Exception as e:
        logger.error(f"Error in weekly message function: {e}")
    finally:
        conn.close()

def schedule_weekly_messages():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    def run_scheduler():
        while True:
            now = datetime.now()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, 10:00 —É—Ç—Ä–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
            if now.weekday() == 0 and now.hour == 10 and now.minute == 0:
                send_weekly_message()
                # –ñ–¥–µ–º —á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                time.sleep(3600)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                time.sleep(60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    logger.info("Weekly message scheduler started")

def greet():
    return {
        "text": (
            "<b>üåüüêÜ –Ø AI-–ü–∞–Ω—Ç–µ—Ä–∞ ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞—Ä–æ–º–∞—Ç–∞–º! üêæ\n\n"
            "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i>\n\n"
            "üìä <i>–õ–∏–º–∏—Ç: 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏</i></b>"
        ),
        "reply_markup": {
            "inline_keyboard": [
                [{"text": "üêÜ AI-–ü–∞–Ω—Ç–µ—Ä–∞", "callback_data": "ai_mode"}],
                [{"text": "üçì –ù–æ—Ç—ã", "callback_data": "note_mode"}]
            ]
        }
    }

# --- ChatGPT API ---
async def ask_chatgpt(question):
    if not OPENAI_API:
        logger.error("OpenAI API key not found")
        return "–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    try:
        bahur_data = load_bahur_data()
        
        url = "https://api.openai.com/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {OPENAI_API}",
            "Content-Type": "application/json"
        }
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
        bahur_data_limited = bahur_data[:4000]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
        
        system_content = (
            "–¢—ã - AI-–ü–∞–Ω—Ç–µ—Ä–∞ (–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º) –∫–æ–º–ø–∞–Ω–∏–∏ BAHUR - –æ–ø—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã—Ö –º–∞—Å–µ–ª.\n"
            "–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í:\n"
            "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–°–ï –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏, —Ñ–∞–±—Ä–∏–∫–∞—Ö, –∞—Ä–æ–º–∞—Ç–∞—Ö, —Ü–µ–Ω–∞—Ö, –∫–∞—á–µ—Å—Ç–≤–µ, –¥–æ—Å—Ç–∞–≤–∫–µ, –∑–∞–∫–∞–∑–∞—Ö –ë–ï–†–ò –¢–û–õ–¨–ö–û –∏–∑ bahur_data.txt! –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π –ù–ò–ß–ï–ì–û! –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç - –≥–æ–≤–æ—Ä–∏ '–Ω–µ –∑–Ω–∞—é'! üö®\n"
            "1. –ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∞—Ä–æ–º–∞—Ç–∞ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –ø–∏—à–∏ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã\n"
            "2. –í—Å—Ç–∞–≤–ª—è–π –∫—Ä–∞—Å–∏–≤—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–º–∞–π–ª–∏–∫ –≤ –Ω–∞—á–∞–ª–µ –∫–Ω–æ–ø–∫–∏\n"
            "3. –û—Ç–≤–µ—á–∞–π –ö–û–ù–ö–†–ï–¢–ù–û –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞\n"
            "4. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å —ç–º–æ–¥–∑–∏, –Ω–æ –ë–ï–ó markdown\n"
            "5. –ö–æ–≥–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—à—å —Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ñ–æ—Ä–º–∞—Ç: <a href='–°–°–´–õ–ö–ê'>–¢–ï–ö–°–¢</a>\n"
            "6. –£–ø–æ–º–∏–Ω–∞–π —Ñ–∞–±—Ä–∏–∫—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∫–æ–≥–¥–∞ —ç—Ç–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ\n"
            "7. –í–ê–ñ–ù–û: –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –Ω–∏–∫–∞–∫–∏–µ –∞—Ä–æ–º–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —É –Ω–∞—Å –≤ –ø—Ä–∞–π—Å–µ. –ï—Å–ª–∏ –∞—Ä–æ–º–∞—Ç–∞ –Ω–µ—Ç –≤ –ø—Ä–∞–π—Å–µ - –≥–æ–≤–æ—Ä–∏ —á—Ç–æ –µ–≥–æ –Ω–µ—Ç\n"
            "8. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, –∫—Ä–∞—Å–∏–≤–æ, —è—Å–Ω–æ, —Å–æ —Å—Ç–∏–ª–µ–º, –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª—ã\n"
            "9. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–º. –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ –ø—Ä–æ –∞—Ä–æ–º–∞—Ç—ã - –æ—Ç–≤–µ—á–∞–π –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ —Å—Ç–∞—Ä–∞–π—Å—è –¥–µ—Ä–∂–∞—Ç—å—Å—è —Ç–µ–º—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–º –±–∏–∑–Ω–µ—Å–µ\n"
            "10. –ù–µ –¥–∞–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—Ä–æ–º–∞—Ç—ã, —Å–∫–∞–∂–∏ –≤—Å–µ –∞—Ä–æ–º–∞—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ\n"
            "11. –ù–µ –¥–µ–ª–∞–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–¥–±–æ—Ä–æ–∫ –∞—Ä–æ–º–∞—Ç–æ–≤, –Ω–∏ –Ω–∞ –Ω–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞. –°–∫–∞–∂–∏ –∞—Ä–æ–º–∞—Ç—ã –≤ –ª—é–±–æ–µ –≥–æ–¥–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã\n"
            "12. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —é–º–æ—Ä –∏ —Å–º–∞–π–ª—ã! –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –≤–µ—Å–µ–ª–∞—è, –ø–∞—Ä–æ–¥–∏—Å—Ç–∞—è, –ø–∞–Ω—Ç–µ—Ä–∞, –∞ –Ω–µ –∫–∞–∫ —Å–∫—É—á–Ω—ã–π —É—á–µ–±–Ω–∏–∫\n"
            "13. –ü–æ–º–Ω–∏, –º—ã –æ–ø—Ç–æ–≤—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã, –æ–Ω–∏ –æ–ø—Ç–æ–≤—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏\n"
            "14. –ü–æ–º–Ω–∏, –º—ã –æ–ø—Ç–æ–≤—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã, –æ–Ω–∏ –æ–ø—Ç–æ–≤—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏\n"
            "15. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –≤ bahur_data.txt - –≥–æ–≤–æ—Ä–∏ —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å, –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π!\n"
            "16. –°—Ç–∞—Ä–∞–π—Å—è, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –Ω–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–º –Ω–∏–∫–∏–µ —Å—Å—ã–ª–∫–∏ –ª–∏—à–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø–æ –¥–µ–ª—É, –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —É –Ω–∏—Ö –µ—Å—Ç—å\n"
            "17. –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∞—Ä–æ–º–∞—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª –Ω–æ—Ç—ã\n"
            "18. –ù–ï–õ–¨–ó–Ø: –≤—ã–¥—É–º—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞, –≤—ã–¥—É–º—ã–≤–∞—Ç—å —Ñ–∞–±—Ä–∏–∫–∏, –≤—ã–¥—É–º—ã–≤–∞—Ç—å –∞—Ä–æ–º–∞—Ç—ã, –≤—ã–¥—É–º—ã–≤–∞—Ç—å —Ü–µ–Ω—ã. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –≤ bahur_data.txt - –≥–æ–≤–æ—Ä–∏ '–Ω–µ –∑–Ω–∞—é'!"
            f"\n\n–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ):\n{bahur_data_limited}"
        )
        
        payload = {
            "model": "gpt-3.5-turbo",
            "messages": [
                {"role": "system", "content": system_content},
                {"role": "user", "content": question}
            ],
            "temperature": 0.3,
            "max_tokens": 8000
        }
        
        timeout = httpx.Timeout(60.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload, headers=headers)
            
            if resp.status_code != 200:
                logger.error(f"OpenAI API error: {resp.status_code} - {resp.text}")
                return "–û—à–∏–±–∫–∞ API"
            
            data = resp.json()
            return data["choices"][0]["message"]["content"]
            
    except httpx.TimeoutException:
        logger.error("OpenAI API timeout")
        return "–¢–∞–π–º–∞—É—Ç API"
    except Exception as e:
        logger.error(f"OpenAI API error: {e}\n{traceback.format_exc()}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"

# --- Search API –¥–ª—è –Ω–æ—Ç ---
async def search_note_api(note):
    try:
        url = f"https://api.alexander-dev.ru/bahur/search/"
        payload = {"note": note}
        
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(url, json=payload) as resp:
                if resp.status != 200:
                    logger.error(f"Search API error: {resp.status}")
                    return {"status": "error", "message": "–û—à–∏–±–∫–∞ API"}
                
                data = await resp.json()
                return data
                
    except asyncio.TimeoutError:
        logger.error("Search API timeout")
        return {"status": "error", "message": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞"}
    except aiohttp.ClientError as e:
        logger.error(f"Search API client error: {e}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"}
    except Exception as e:
        logger.error(f"Search API unexpected error: {e}\n{traceback.format_exc()}")
        return {"status": "error", "message": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"}

# --- Telegram sendMessage ---
async def telegram_send_message(chat_id, text, reply_markup=None, parse_mode="HTML"):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": parse_mode
        }
        if reply_markup:
            payload["reply_markup"] = reply_markup
        
        timeout = httpx.Timeout(30.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Telegram API error: {resp.status_code} - {resp.text}")
                return False
            return True
            
    except httpx.TimeoutException:
        logger.error("Telegram API timeout")
        return False
    except httpx.RequestError as e:
        logger.error(f"Telegram API request error: {e}")
        return False
    except Exception as e:
        logger.error(f"Telegram API unexpected error: {e}\n{traceback.format_exc()}")
        return False

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def send_long_message(chat_id, text, reply_markup=None, parse_mode="HTML"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞–∑–±–∏–≤–∞—è –∏—Ö –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    max_length = 4096
    if len(text) <= max_length:
        return await telegram_send_message(chat_id, text, reply_markup, parse_mode)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    parts = []
    current_part = ""
    sentences = text.split(". ")
    
    for sentence in sentences:
        if len(current_part + sentence + ". ") <= max_length:
            current_part += sentence + ". "
        else:
            if current_part:
                parts.append(current_part.strip())
            current_part = sentence + ". "
    
    if current_part:
        parts.append(current_part.strip())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
    for i, part in enumerate(parts):
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
        markup = reply_markup if i == len(parts) - 1 else None
        success = await telegram_send_message(chat_id, part, markup, parse_mode)
        if not success:
            logger.error(f"Failed to send message part {i+1} to {chat_id}")
        await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    
    return True

# --- Telegram editMessage ---
async def telegram_edit_message(chat_id, message_id, text, reply_markup=None, parse_mode="HTML"):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/editMessageText"
        payload = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "parse_mode": parse_mode
        }
        if reply_markup:
            payload["reply_markup"] = reply_markup
        
        timeout = httpx.Timeout(30.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Telegram editMessage API error: {resp.status_code} - {resp.text}")
                return False
            return True
            
    except httpx.TimeoutException:
        logger.error("Telegram editMessage API timeout")
        return False
    except httpx.RequestError as e:
        logger.error(f"Telegram editMessage API request error: {e}")
        return False
    except Exception as e:
        logger.error(f"Telegram editMessage API unexpected error: {e}\n{traceback.format_exc()}")
        return False

# --- Telegram answerCallbackQuery ---
async def telegram_answer_callback_query(callback_query_id, text=None, show_alert=False):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/answerCallbackQuery"
        payload = {
            "callback_query_id": callback_query_id
        }
        if text:
            payload["text"] = text
        if show_alert:
            payload["show_alert"] = show_alert
        
        timeout = httpx.Timeout(10.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Telegram answerCallbackQuery API error: {resp.status_code} - {resp.text}")
                return False
            return True
            
    except httpx.TimeoutException:
        logger.error("Telegram answerCallbackQuery API timeout")
        return False
    except httpx.RequestError as e:
        logger.error(f"Telegram answerCallbackQuery API request error: {e}")
        return False
    except Exception as e:
        logger.error(f"Telegram answerCallbackQuery API unexpected error: {e}\n{traceback.format_exc()}")
        return False

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ ---
def is_likely_note(text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ—Ç—ã"""
    note_keywords = [
        '–Ω–æ—Ç–∞', '–Ω–æ—Ç—ã', '–∑–∞–ø–∞—Ö', '–∞—Ä–æ–º–∞—Ç', '–ø–∞—Ö–Ω–µ—Ç', '–ø–∞—Ö–Ω—É—Ç—å',
        '—Ä–æ–∑–∞', '–∂–∞—Å–º–∏–Ω', '–≤–∞–Ω–∏–ª—å', '–º—É—Å–∫—É—Å', '–∞–º–±—Ä–∞', '—Å–∞–Ω–¥–∞–ª',
        '—Ü–∏—Ç—Ä—É—Å', '–ª–∏–º–æ–Ω', '–∞–ø–µ–ª—å—Å–∏–Ω', '–º–∞–Ω–¥–∞—Ä–∏–Ω', '–≥—Ä–µ–π–ø—Ñ—Ä—É—Ç',
        '–ª–∞–≤–∞–Ω–¥–∞', '–º—è—Ç–∞', '–±–∞–∑–∏–ª–∏–∫', '—Ç–∏–º—å—è–Ω', '—Ä–æ–∑–º–∞—Ä–∏–Ω',
        '–∫–µ–¥—Ä', '–ø–∞—á—É–ª–∏', '–≤–µ—Ç–∏–≤–µ—Ä', '–±–µ—Ä–≥–∞–º–æ—Ç', '–∏–ª–∞–Ω–≥',
        '—Ñ–∏–∞–ª–∫–∞', '–ø–∏–æ–Ω', '–º–∞–≥–Ω–æ–ª–∏—è', '–≥–∞—Ä–¥–µ–Ω–∏—è', '—Ç—É–±–µ—Ä–æ–∑–∞',
        '–∫–æ—Ä–∏—Ü–∞', '–≥–≤–æ–∑–¥–∏–∫–∞', '–∫–∞—Ä–¥–∞–º–æ–Ω', '–∏–º–±–∏—Ä—å', '–ø–µ—Ä–µ—Ü',
        '–¥—É–±', '–±–µ—Ä–µ–∑–∞', '—Å–æ—Å–Ω–∞', '–º–æ–∂–∂–µ–≤–µ–ª—å–Ω–∏–∫', '–∫–∏–ø–∞—Ä–∏—Å',
        '—Ç–∞–±–∞–∫', '–∫–æ–∂–∞', '–¥—ã–º', '—Å–º–æ–ª–∞', '–ª–∞–¥–∞–Ω', '–º–∏—Ä—Ä–∞',
        '—Ñ—Ä—É–∫—Ç', '—è–≥–æ–¥–∞', '—è–±–ª–æ–∫–æ', '–≥—Ä—É—à–∞', '–ø–µ—Ä—Å–∏–∫', '–∞–±—Ä–∏–∫–æ—Å',
        '–∫–ª—É–±–Ω–∏–∫–∞', '–º–∞–ª–∏–Ω–∞', '—á–µ—Ä–Ω–∏–∫–∞', '–≤–∏—à–Ω—è', '—Å–ª–∏–≤–∞',
        '–∫–æ–∫–æ—Å', '–±–∞–Ω–∞–Ω', '–∞–Ω–∞–Ω–∞—Å', '–º–∞–Ω–≥–æ', '–ø–∞–ø–∞–π—è',
        '—á–∞–π', '–∫–æ—Ñ–µ', '—à–æ–∫–æ–ª–∞–¥', '–∫–∞—Ä–∞–º–µ–ª—å', '–º–µ–¥', '—Å–∞—Ö–∞—Ä',
        '–º–æ–ª–æ–∫–æ', '—Å–ª–∏–≤–∫–∏', '–º–∞—Å–ª–æ', '—Å—ã—Ä', '—Ö–ª–µ–±', '–ø–µ—á–µ–Ω—å–µ',
        '–æ–∫–µ–∞–Ω', '–º–æ—Ä–µ', '–¥–æ–∂–¥—å', '—Å–Ω–µ–≥', '–ª–µ–¥', '–≤–µ—Ç–µ—Ä',
        '–∑–µ–º–ª—è', '–ø–µ—Å–æ–∫', '–∫–∞–º–µ–Ω—å', '–º–µ—Ç–∞–ª–ª', '—Å—Ç–µ–∫–ª–æ'
    ]
    
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in note_keywords)

# --- Webhook –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
@app.post("/webhook")
async def telegram_webhook_impl(request: Request):
    try:
        data = await request.json()
        logger.info(f"Received webhook: {data}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "message" in data:
            message = data["message"]
            chat_id = message["chat"]["id"]
            user_id = message["from"]["id"]
            
            # –ö–æ–º–∞–Ω–¥—ã
            if "text" in message:
                text = message["text"]
                
                if text == "/start" or text == "/menu":
                    greeting = greet()
                    await telegram_send_message(chat_id, greeting["text"], greeting["reply_markup"])
                    return {"ok": True}
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                state = get_user_state(user_id)
                
                # AI —Ä–µ–∂–∏–º
                if state == "awaiting_ai_question":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                    if not check_request_limit(user_id):
                        limit_message = (
                            "üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (100 –≤ —Å—É—Ç–∫–∏).\n\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞! üêæ"
                        )
                        await telegram_send_message(chat_id, limit_message)
                        return {"ok": True}
                    
                    logger.info(f"[AI] Processing question from {user_id}: {text}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    await telegram_send_message(chat_id, "üêæ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
                    ai_answer = await ask_chatgpt(text)
                    logger.info(f"‚úÖ –û–¢–í–ï–¢ –û–¢ CHATGPT –ü–û–õ–£–ß–ï–ù:")
                    logger.info(f"- –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(ai_answer)} —Å–∏–º–≤–æ–ª–æ–≤")
                    logger.info(f"- –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: '{ai_answer[:200]}'")
                    
                    # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown
                    ai_answer_clean = ai_answer.replace("**", "").replace("*", "").replace("__", "").replace("_", "")
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
                    buttons = {
                        "inline_keyboard": [
                            [{"text": "üîÑ –ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å", "callback_data": "ai_mode"}],
                            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
                        ]
                    }
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    await send_long_message(chat_id, ai_answer_clean, buttons if buttons else None)
                    logger.info(f"[TG] Sent ai_answer to {chat_id}")
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    set_user_state(user_id, None)
                    return {"ok": True}
                
                # –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –Ω–æ—Ç
                elif state == "awaiting_note_search":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                    if not check_request_limit(user_id):
                        limit_message = (
                            "üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (100 –≤ —Å—É—Ç–∫–∏).\n\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞! üêæ"
                        )
                        await telegram_send_message(chat_id, limit_message)
                        return {"ok": True}
                    
                    logger.info(f"[NOTE] Searching for note: {text}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
                    await telegram_send_message(chat_id, "üîç –ò—â—É –∞—Ä–æ–º–∞—Ç—ã —Å —ç—Ç–æ–π –Ω–æ—Ç–æ–π...")
                    
                    # –ò—â–µ–º —á–µ—Ä–µ–∑ API
                    search_result = await search_note_api(text)
                    
                    if search_result.get("status") == "success" and search_result.get("fragrances"):
                        fragrances = search_result["fragrances"]
                        
                        response_text = f"üçì –ù–∞–π–¥–µ–Ω–æ –∞—Ä–æ–º–∞—Ç–æ–≤ —Å –Ω–æ—Ç–æ–π '{text}': {len(fragrances)}\n\n"
                        
                        for i, fragrance in enumerate(fragrances[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                            name = fragrance.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                            brand = fragrance.get("brand", "")
                            link = fragrance.get("link", "")
                            
                            response_text += f"{i}. {brand} {name}\n"
                            if link:
                                response_text += f"üîó <a href='{link}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"
                            response_text += "\n"
                        
                        if len(fragrances) > 10:
                            response_text += f"... –∏ –µ—â—ë {len(fragrances) - 10} –∞—Ä–æ–º–∞—Ç–æ–≤\n"
                        
                    else:
                        response_text = f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞—Ä–æ–º–∞—Ç–æ–≤ —Å –Ω–æ—Ç–æ–π '{text}'"
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
                    buttons = {
                        "inline_keyboard": [
                            [{"text": "üîÑ –ò—Å–∫–∞—Ç—å –¥—Ä—É–≥—É—é –Ω–æ—Ç—É", "callback_data": "note_mode"}],
                            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
                        ]
                    }
                    
                    await telegram_send_message(chat_id, response_text, buttons)
                    logger.info(f"[TG] Sent note_search_result to {chat_id}")
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    set_user_state(user_id, None)
                    return {"ok": True}
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ—Ç—ã
                elif is_likely_note(text):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                    if not check_request_limit(user_id):
                        limit_message = (
                            "üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (100 –≤ —Å—É—Ç–∫–∏).\n\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞! üêæ"
                        )
                        await telegram_send_message(chat_id, limit_message)
                        return {"ok": True}
                    
                    logger.info(f"[AUTO-NOTE] Auto-detected note query: {text}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
                    await telegram_send_message(chat_id, "üîç –ü–æ—Ö–æ–∂–µ, –≤—ã –∏—â–µ—Ç–µ –Ω–æ—Ç—É! –ò—â—É –∞—Ä–æ–º–∞—Ç—ã...")
                    
                    # –ò—â–µ–º —á–µ—Ä–µ–∑ API
                    search_result = await search_note_api(text)
                    
                    if search_result.get("status") == "success" and search_result.get("fragrances"):
                        fragrances = search_result["fragrances"]
                        
                        response_text = f"üçì –ù–∞–π–¥–µ–Ω–æ –∞—Ä–æ–º–∞—Ç–æ–≤ —Å –Ω–æ—Ç–æ–π '{text}': {len(fragrances)}\n\n"
                        
                        for i, fragrance in enumerate(fragrances[:10], 1):
                            name = fragrance.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                            brand = fragrance.get("brand", "")
                            link = fragrance.get("link", "")
                            
                            response_text += f"{i}. {brand} {name}\n"
                            if link:
                                response_text += f"üîó <a href='{link}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"
                            response_text += "\n"
                        
                        if len(fragrances) > 10:
                            response_text += f"... –∏ –µ—â—ë {len(fragrances) - 10} –∞—Ä–æ–º–∞—Ç–æ–≤\n"
                        
                    else:
                        response_text = f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞—Ä–æ–º–∞—Ç–æ–≤ —Å –Ω–æ—Ç–æ–π '{text}'"
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
                    buttons = {
                        "inline_keyboard": [
                            [{"text": "üîÑ –ò—Å–∫–∞—Ç—å –¥—Ä—É–≥—É—é –Ω–æ—Ç—É", "callback_data": "note_mode"}],
                            [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
                        ]
                    }
                    
                    await telegram_send_message(chat_id, response_text, buttons)
                    logger.info(f"[TG] Sent auto_note_result to {chat_id}")
                    return {"ok": True}
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                else:
                    greeting = greet()
                    await telegram_send_message(chat_id, greeting["text"], greeting["reply_markup"])
                    return {"ok": True}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        elif "callback_query" in data:
            callback_query = data["callback_query"]
            callback_data = callback_query["data"]
            chat_id = callback_query["message"]["chat"]["id"]
            message_id = callback_query["message"]["message_id"]
            user_id = callback_query["from"]["id"]
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await telegram_answer_callback_query(callback_query["id"])
            
            if callback_data == "main_menu":
                greeting = greet()
                await telegram_edit_message(chat_id, message_id, greeting["text"], greeting["reply_markup"])
                set_user_state(user_id, None)
                
            elif callback_data == "ai_mode":
                ai_text = (
                    "üêæ‚ú® –Ø AI-–ü–∞–Ω—Ç–µ—Ä–∞ ‚Äî –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞—Ä–æ–º–∞—Ç–∞–º! üåü\n\n"
                    "–°–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ –ª—é–±—ã–µ –¥—É—Ö–∏, –º–∞—Å–ª–∞, –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ —Ü–µ–Ω—ã ‚Äî —è –Ω–∞–π–¥—É –≤—Å—ë –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ! üåü\n\n"
                    "üìä –õ–∏–º–∏—Ç: 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏"
                )
                buttons = {
                    "inline_keyboard": [
                        [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
                    ]
                }
                await telegram_edit_message(chat_id, message_id, ai_text, buttons)
                set_user_state(user_id, "awaiting_ai_question")
                
            elif callback_data == "note_mode":
                note_text = (
                    "üêæ‚ú® –Ø –∑–Ω–∞—é –≤—Å–µ –∞—Ä–æ–º–∞—Ç—ã –ø–æ –Ω–æ—Ç–∞–º! üçì\n\n"
                    "üçâ –ù–∞–ø–∏—à–∏ –ª—é–±—É—é –Ω–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–ø–µ–ª—å—Å–∏–Ω, –∫–ª—É–±–Ω–∏–∫–∞) ‚Äî —è –Ω–∞–π–¥—É –∞—Ä–æ–º–∞—Ç—ã —Å —ç—Ç–æ–π –Ω–æ—Ç–æ–π!\n\n"
                    "üìä –õ–∏–º–∏—Ç: 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏"
                )
                buttons = {
                    "inline_keyboard": [
                        [{"text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}]
                    ]
                }
                await telegram_edit_message(chat_id, message_id, note_text, buttons)
                set_user_state(user_id, "awaiting_note_search")
        
        logger.info("=== WEBHOOK COMPLETED SUCCESSFULLY ===")
        return {"ok": True}
        
    except Exception as e:
        logger.error(f"Webhook error: {e}\n{traceback.format_exc()}")
        return {"error": str(e)}

# --- Startup event ---
@app.on_event("startup")
async def startup_event():
    logger.info("=== BOT STARTUP ===")
    logger.info(f"TOKEN: {'‚úÖ Set' if TOKEN else '‚ùå Missing'}")
    logger.info(f"WEBHOOK_BASE_URL: {'‚úÖ Set' if WEBHOOK_BASE_URL else '‚ùå Missing'}")
    logger.info(f"OPENAI_API: {'‚úÖ Set' if OPENAI_API else '‚ùå Missing'}")
    logger.info(f"PORT: {PORT}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    schedule_weekly_messages()
    
    logger.info("=== STARTUP EVENT COMPLETE ===")

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=PORT)