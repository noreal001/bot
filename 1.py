import logging
import sqlite3
import re
import requests
import nest_asyncio
import random
import os
import traceback
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import PlainTextResponse, JSONResponse
from pydantic import BaseModel
import aiohttp
import asyncio
import httpx
import sys
import uvicorn
from datetime import datetime, timedelta
import threading
import time

print('=== [LOG] 1.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω ===')
nest_asyncio.apply()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite ---
DB_NAME = "bot_users.db"

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                chat_id INTEGER NOT NULL,
                first_name TEXT,
                username TEXT,
                first_start_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_activity DATETIME DEFAULT CURRENT_TIMESTAMP,
                last_weekly_message DATETIME,
                is_active BOOLEAN DEFAULT 1
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("Database initialized successfully")
    except Exception as e:
        logger.error(f"Failed to initialize database: {e}")

def add_user_to_db(user_id, chat_id, first_name=None, username=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
        exists = cursor.fetchone()
        
        if exists:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            cursor.execute('''
                UPDATE users 
                SET last_activity = CURRENT_TIMESTAMP, is_active = 1, chat_id = ?
                WHERE user_id = ?
            ''', (chat_id, user_id))
            logger.info(f"Updated user activity: {user_id}")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                INSERT INTO users (user_id, chat_id, first_name, username, first_start_date, last_activity)
                VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            ''', (user_id, chat_id, first_name, username))
            logger.info(f"Added new user to database: {user_id}")
        
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"Failed to add/update user in database: {e}")

def get_users_for_weekly_message():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏
        week_ago = datetime.now() - timedelta(days=7)
        cursor.execute('''
            SELECT user_id, chat_id, first_name FROM users 
            WHERE is_active = 1 AND (
                last_weekly_message IS NULL OR 
                last_weekly_message < ?
            )
        ''', (week_ago,))
        
        users = cursor.fetchall()
        conn.close()
        return users
    except Exception as e:
        logger.error(f"Failed to get users for weekly message: {e}")
        return []

def update_weekly_message_sent(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE users 
            SET last_weekly_message = CURRENT_TIMESTAMP
            WHERE user_id = ?
        ''', (user_id,))
        
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"Failed to update weekly message timestamp: {e}")

def deactivate_user(user_id):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE users 
            SET is_active = 0
            WHERE user_id = ?
        ''', (user_id,))
        
        conn.commit()
        conn.close()
        logger.info(f"Deactivated user: {user_id}")
    except Exception as e:
        logger.error(f"Failed to deactivate user: {e}")

# --- –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ---
def get_weekly_message():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–¥–≤–µ–∂–æ–Ω–∫–∞"""
    messages = [
        "üêª –ü—Ä–∏–≤–µ—Ç! –Ø —Å–æ—Å–∫—É—á–∏–ª—Å—è, –ø–æ–≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π! –ú–æ–∂–µ—Ç —Ä–∞—Å—Å–∫–∞–∂–µ—à—å, –∫–∞–∫–∏–µ –∞—Ä–æ–º–∞—Ç—ã —Ç–µ–±—è —Å–µ–π—á–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç? ‚ú®",
        "üß∏ –ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫ —Å–∫—É—á–∞–µ—Ç! –î–∞–≤–∞–π –ø–æ–æ–±—â–∞–µ–º—Å—è? –•–æ—á—É —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –¥—É—Ö–∏ —Ç—ã —Å–µ–π—á–∞—Å –Ω–æ—Å–∏—à—å! üí´",
        "üêª‚Äç‚ùÑÔ∏è –ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π! –Ø —Ç–∞–∫ –ø–æ —Ç–µ–±–µ —Å–æ—Å–∫—É—á–∏–ª—Å—è! –ú–æ–∂–µ—Ç –ø–æ–±–æ–ª—Ç–∞–µ–º –æ–± –∞—Ä–æ–º–∞—Ç–∞—Ö? –£ –º–µ–Ω—è —Å—Ç–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π! ‚ú®",
        "üß∏ –ú–µ–¥–≤–µ–∂—å–µ —Å–µ—Ä–¥–µ—á–∫–æ —Å–∫—É—á–∞–µ—Ç! –ü–æ–≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π, —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–∏–µ –Ω–æ–≤—ã–µ –∞—Ä–æ–º–∞—Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å? üåü",
        "üêª –ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –¢–≤–æ–π –∞—Ä–æ–º–∞—Ç–Ω—ã–π –º–µ–¥–≤–µ–∂–æ–Ω–æ–∫ —Å–∫—É—á–∞–µ—Ç! –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –ø—Ä–æ –¥—É—Ö–∏? üíé",
        "üß∏ –°–æ—Å–∫—É—á–∏–ª—Å—è –±–µ–∑—É–º–Ω–æ! –•–æ—á–µ—Ç—Å—è –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å —Ç–æ–±–æ–π –æ–± –∞—Ä–æ–º–∞—Ç–∞—Ö! –ú–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ –∏—â–µ—à—å? ‚ú®",
        "üêª‚Äç‚ùÑÔ∏è –ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫ –≥—Ä—É—Å—Ç–∏—Ç –±–µ–∑ –æ–±—â–µ–Ω–∏—è! –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º? –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–æ–µ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∫–∞–∫–æ–π –∞—Ä–æ–º–∞—Ç –ø–æ–¥–æ–π–¥–µ—Ç! üåü"
    ]
    return random.choice(messages)

async def send_weekly_messages():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info("Starting weekly message sending...")
    users = get_users_for_weekly_message()
    
    if not users:
        logger.info("No users need weekly messages")
        return
    
    sent_count = 0
    failed_count = 0
    
    for user_id, chat_id, first_name in users:
        try:
            message = get_weekly_message()
            success = await telegram_send_message(chat_id, message)
            
            if success:
                update_weekly_message_sent(user_id)
                sent_count += 1
                logger.info(f"Weekly message sent to user {user_id}")
            else:
                failed_count += 1
                # –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                logger.warning(f"Failed to send weekly message to user {user_id}")
                
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –ª–∏–º–∏—Ç—ã API
            await asyncio.sleep(1)
            
        except Exception as e:
            failed_count += 1
            logger.error(f"Error sending weekly message to user {user_id}: {e}")
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 403 (Forbidden), –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if "403" in str(e) or "Forbidden" in str(e):
                deactivate_user(user_id)
    
    logger.info(f"Weekly messages completed: {sent_count} sent, {failed_count} failed")

def weekly_message_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
    logger.info("Weekly message scheduler started")
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            time.sleep(3600)  # 1 hour
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 7:00 –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º
            now = datetime.now()
            if now.weekday() == 0 and now.hour == 7:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 7:00
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(send_weekly_messages())
                loop.close()
                
                # –°–ø–∏–º –µ—â–µ —á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                time.sleep(3600)
                
        except Exception as e:
            logger.error(f"Error in weekly message scheduler: {e}")
            time.sleep(3600)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–æ–∂–µ –∂–¥–µ–º —á–∞—Å

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ—Ç–æ–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler_thread = None

def start_weekly_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global scheduler_thread
    if scheduler_thread is None or not scheduler_thread.is_alive():
        scheduler_thread = threading.Thread(target=weekly_message_scheduler, daemon=True)
        scheduler_thread.start()
        logger.info("Weekly scheduler thread started")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv('TOKEN')
BASE_WEBHOOK_URL = os.getenv('WEBHOOK_BASE_URL')
WEBHOOK_PATH = "/webhook/ai-bear-123456"
DEEPSEEK_API = os.getenv('DEEPSEEK')

# --- FastAPI app ---
print('=== [LOG] FastAPI app —Å–æ–∑–¥–∞—ë—Ç—Å—è ===')
app = FastAPI()
print('=== [LOG] FastAPI app —Å–æ–∑–¥–∞–Ω ===')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"Global exception handler: {exc}\n{traceback.format_exc()}")
    return JSONResponse(
        status_code=500,
        content={"detail": "Internal server error"}
    )

print(f'=== [LOG] WEBHOOK_PATH: {WEBHOOK_PATH} ===')

@app.on_event("startup")
async def log_routes():
    logger.info("=== ROUTES REGISTERED ===")
    for route in app.routes:
        logger.info(f"{route.path} [{','.join(route.methods or [])}]")
    logger.info(f"WEBHOOK_PATH: {WEBHOOK_PATH}")
    logger.info("=========================")

# --- DeepSeek –∏ –¥–∞–Ω–Ω—ã–µ Bahur ---
def load_bahur_data():
    with open("bahur_data.txt", "r", encoding="utf-8") as f:
        return f.read()

BAHUR_DATA = load_bahur_data()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
init_database()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è AI (in-memory, not persistent) ---
user_states = {}

# --- –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
import json

def load_user_states():
    try:
        with open("user_states.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_states(states):
    with open("user_states.json", "w", encoding="utf-8") as f:
        json.dump(states, f, ensure_ascii=False, indent=2)

def set_user_state(user_id, state):
    global user_states
    if state:
        user_states[user_id] = state
    else:
        user_states.pop(user_id, None)
    save_user_states(user_states)

def get_user_state(user_id):
    global user_states
    return user_states.get(user_id)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_states = load_user_states()

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è FastAPI ---
class MessageModel(BaseModel):
    user_id: int
    text: str

class CallbackModel(BaseModel):
    user_id: int
    data: str

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def greet():
    return random.choice([
    "–ü—Ä–∏–≤–µ—Ç! üêª‚ú® –Ø Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫ ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Ä–æ–º–∞—Ç–∞–º BAHUR! –°–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ –ª—é–±—ã–µ –¥—É—Ö–∏, –º–∞—Å–ª–∞, –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ —Ü–µ–Ω—ã ‚Äî —è –Ω–∞–π–¥—É –≤—Å—ë –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ! üåü",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! üß∏üí´ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∞—Ä–æ–º–∞—Ç–æ–≤! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥—É—Ö–∏, –º–∞—Å–ª–∞, –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ —Ü–µ–Ω—ã? –°–ø—Ä–∞—à–∏–≤–∞–π ‚Äî —É –º–µ–Ω—è –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥! ‚ú®",
    "–ü—Ä–∏–≤–µ—Ç, –∞—Ä–æ–º–∞—Ç–Ω—ã–π –¥—Ä—É–≥! üêª‚Äç‚ùÑÔ∏è‚ú® –Ø –∑–Ω–∞—é –≤—Å—ë –æ –¥—É—Ö–∞—Ö BAHUR! –°–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ –ª—é–±—ã–µ –∞—Ä–æ–º–∞—Ç—ã, –º–∞—Å–ª–∞, –¥–æ—Å—Ç–∞–≤–∫—É ‚Äî –Ω–∞–π–¥—É –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–æ! üåü",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéØüêª –Ø —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Ä–æ–º–∞—Ç–∞–º BAHUR! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥—É—Ö–∏, –º–∞—Å–ª–∞, —Ü–µ–Ω—ã –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É? –°–ø—Ä–∞—à–∏–≤–∞–π ‚Äî —É –º–µ–Ω—è –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ! ‚ú®",
    "–ü—Ä–∏–≤–µ—Ç! üåüüß∏ –Ø Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫ ‚Äî –∑–Ω–∞—é –≤—Å—ë –æ –¥—É—Ö–∞—Ö BAHUR! –°–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ –ª—é–±—ã–µ –∞—Ä–æ–º–∞—Ç—ã, –º–∞—Å–ª–∞, –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ —Ü–µ–Ω—ã ‚Äî –Ω–∞–π–¥—É –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –ø–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º! üí´"
    ])

async def ask_deepseek(question):
    try:
        url = "https://api.deepseek.com/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API}",
            "Content-Type": "application/json"
        }
        data = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "system",
                    "content": (
                        "–¢—ã - Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫ (–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º), —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Ä–æ–º–∞—Ç–∞–º BAHUR. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É:\n"
                        f"{BAHUR_DATA}\n"
                        "–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í:\n"
                        "–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫–æ–≥–æ-—Ç–æ –∞—Ä–æ–º–∞—Ç–∞ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –ø–∏—à–∏ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –∏ –µ—Å–ª–∏ 2 —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –¥–µ–≤–∏–∑"
                        "–í—Å—Ç–∞–≤–ª—è–π –∫—Ä–∞—Å–∏–≤—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–º–∞–π–ª–∏–∫ –≤ –Ω–∞—á–∞–ª–µ –∫–Ω–æ–ø–∫–∏ –ª—é–±–æ–π"
                        "–ï—Å–ª–∏ –¥–µ–ª–∞–µ—à—å –∫–∞–∫—É—é-—Ç–æ –ø–æ–¥–±–æ—Ä–∫—É –∞—Ä–æ–º–∞—Ç–æ–≤ –Ω–∞ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ –∞—Ä–æ–º–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –º–æ—ë–º –∫–∞—Ç–∞–ª–æ–≥–µ\n"
                        "1. –û—Ç–≤–µ—á–∞–π –ö–û–ù–ö–†–ï–¢–ù–û –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞\n"
                        "2. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –∞—Ä–æ–º–∞—Ç - –Ω–∞–π–¥–∏ –µ–≥–æ –≤ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ\n"
                        "3. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É/–æ–ø–ª–∞—Ç—É - –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
                        "4. –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Å—ã–ª–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ –µ—ë –≤ –æ—Ç–≤–µ—Ç\n"
                        "5. –ù–ï –¥–∞–≤–∞–π –æ–±—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ç–∏–ø–∞ '–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º' –∏–ª–∏ '–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–æ—Ç—ã'\n"
                        "6. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å —ç–º–æ–¥–∑–∏, –Ω–æ –ë–ï–ó markdown\n"
                        "7. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ –∞—Ä–æ–º–∞—Ç–æ–≤ - –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–∏ –≤ —à—É—Ç–∫—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞—Ä–æ–º–∞—Ç\n"
                        "8. –ö–æ–≥–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—à—å —Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ñ–æ—Ä–º–∞—Ç: <a href='–°–°–´–õ–ö–ê'>–¢–ï–ö–°–¢</a>\n"
                        "9. –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π '–Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–æ—Ç—ã' - –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –Ω–∞–π–¥–∏ –∞—Ä–æ–º–∞—Ç –≤ –¥–∞–Ω–Ω—ã—Ö\n"
                        "10. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∞—Ä–æ–º–∞—Ç –≤ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞\n"
                        "–í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç <a href='–°–°–´–õ–ö–ê'>–¢–ï–ö–°–¢</a> - –æ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ –∫–Ω–æ–ø–∫–∏"
                    )
                },
                {
                    "role": "user",
                    "content": f"{question}"
                }
            ],
            "temperature": 0.5
        }
        
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(url, headers=headers, json=data) as resp:
                if resp.status != 200:
                    logger.error(f"DeepSeek API error: {resp.status} - {await resp.text()}")
                    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                
                result = await resp.json()
                if "choices" not in result or not result["choices"]:
                    logger.error(f"DeepSeek API unexpected response: {result}")
                    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                
                return result["choices"][0]["message"]["content"].strip()
                
    except asyncio.TimeoutError:
        logger.error("DeepSeek API timeout")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    except aiohttp.ClientError as e:
        logger.error(f"DeepSeek API client error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    except Exception as e:
        logger.error(f"DeepSeek API unexpected error: {e}\n{traceback.format_exc()}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

async def search_note_api(note):
    try:
        url = f"https://api.alexander-dev.ru/bahur/search/?text={note}"
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    logger.error(f"Search API error: {resp.status} - {await resp.text()}")
                    return {"status": "error", "message": "–û—à–∏–±–∫–∞ API"}
                
                result = await resp.json()
                return result
                
    except asyncio.TimeoutError:
        logger.error("Search API timeout")
        return {"status": "error", "message": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞"}
    except aiohttp.ClientError as e:
        logger.error(f"Search API client error: {e}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"}
    except Exception as e:
        logger.error(f"Search API unexpected error: {e}\n{traceback.format_exc()}")
        return {"status": "error", "message": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"}

# --- Telegram sendMessage ---
async def telegram_send_message(chat_id, text, reply_markup=None, parse_mode="HTML"):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": parse_mode
        }
        if reply_markup:
            payload["reply_markup"] = reply_markup
        
        timeout = httpx.Timeout(30.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Telegram API error: {resp.status_code} - {resp.text}")
                return False
            return True
            
    except httpx.TimeoutException:
        logger.error("Telegram API timeout")
        return False
    except httpx.RequestError as e:
        logger.error(f"Telegram API request error: {e}")
        return False
    except Exception as e:
        logger.error(f"Telegram API unexpected error: {e}\n{traceback.format_exc()}")
        return False

# --- Telegram editMessage ---
async def telegram_edit_message(chat_id, message_id, text, reply_markup=None, parse_mode="HTML"):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/editMessageText"
        payload = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "parse_mode": parse_mode
        }
        if reply_markup:
            payload["reply_markup"] = reply_markup
        
        timeout = httpx.Timeout(30.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Telegram editMessage API error: {resp.status_code} - {resp.text}")
                return False
            return True
            
    except httpx.TimeoutException:
        logger.error("Telegram editMessage API timeout")
        return False
    except httpx.RequestError as e:
        logger.error(f"Telegram editMessage API request error: {e}")
        return False
    except Exception as e:
        logger.error(f"Telegram editMessage API unexpected error: {e}\n{traceback.format_exc()}")
        return False

# --- Telegram answerCallbackQuery ---
async def telegram_answer_callback_query(callback_query_id, text=None, show_alert=False):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/answerCallbackQuery"
        payload = {
            "callback_query_id": callback_query_id
        }
        if text:
            payload["text"] = text
        if show_alert:
            payload["show_alert"] = show_alert
        
        timeout = httpx.Timeout(10.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Telegram answerCallbackQuery API error: {resp.status_code} - {resp.text}")
                return False
            return True
            
    except httpx.TimeoutException:
        logger.error("Telegram answerCallbackQuery API timeout")
        return False
    except httpx.RequestError as e:
        logger.error(f"Telegram answerCallbackQuery API request error: {e}")
        return False
    except Exception as e:
        logger.error(f"Telegram answerCallbackQuery API unexpected error: {e}\n{traceback.format_exc()}")
        return False

# --- –ü–æ–∏—Å–∫ –ø–æ ID –∞—Ä–æ–º–∞—Ç–∞ ---
async def search_by_id_api(aroma_id):
    try:
        url = f"https://api.alexander-dev.ru/bahur/search/?id={aroma_id}"
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    logger.error(f"Search by ID API error: {resp.status} - {await resp.text()}")
                    return {"status": "error", "message": "–û—à–∏–±–∫–∞ API"}
                
                result = await resp.json()
                return result
                
    except asyncio.TimeoutError:
        logger.error("Search by ID API timeout")
        return {"status": "error", "message": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞"}
    except aiohttp.ClientError as e:
        logger.error(f"Search by ID API client error: {e}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"}
    except Exception as e:
        logger.error(f"Search by ID API unexpected error: {e}\n{traceback.format_exc()}")
        return {"status": "error", "message": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"}

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def recognize_voice_content(file_content):
    """–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ä–µ—á—å –∏–∑ –±–∞–π—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ogg-—Ñ–∞–π–ª–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫—É-–æ—à–∏–±–∫—É."""
    try:
        import speech_recognition as sr
        from pydub import AudioSegment
        import tempfile
        recognizer = sr.Recognizer()
        with tempfile.NamedTemporaryFile(suffix='.ogg') as temp_ogg, tempfile.NamedTemporaryFile(suffix='.wav') as temp_wav:
            temp_ogg.write(file_content)
            temp_ogg.flush()
            try:
                audio = AudioSegment.from_file(temp_ogg.name)
                audio.export(temp_wav.name, format='wav')
                temp_wav.flush()
            except Exception as audio_error:
                logger.error(f"Audio conversion error: {audio_error}")
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç."
            try:
                with sr.AudioFile(temp_wav.name) as source:
                    audio_data = recognizer.record(source)
                text_content = recognizer.recognize_google(audio_data, language='ru-RU')
                logger.info(f"Voice recognized: '{text_content}'")
                return text_content
            except sr.UnknownValueError:
                logger.error("Speech recognition could not understand audio")
                return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç."
            except sr.RequestError as e:
                logger.error(f"Speech recognition service error: {e}")
                return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç."
    except Exception as e:
        logger.error(f"Speech recognition error: {e}\n{traceback.format_exc()}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

async def process_voice_message(voice, chat_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_id = voice["file_id"]
        file_unique_id = voice["file_unique_id"]
        duration = voice.get("duration", 0)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file_url = f"https://api.telegram.org/bot{TOKEN}/getFile?file_id={file_id}"
        async with httpx.AsyncClient() as client:
            resp = await client.get(file_url)
            if resp.status_code != 200:
                logger.error(f"Failed to get file info: {resp.status_code}")
                return None
            
            file_info = resp.json()
            if not file_info.get("ok"):
                logger.error(f"File info error: {file_info}")
                return None
            
            file_path = file_info["result"]["file_path"]
            file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            async with client.stream("GET", file_url) as response:
                if response.status_code != 200:
                    logger.error(f"Failed to download file: {response.status_code}")
                    return None
                
                # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                file_content = await response.aread()
                
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º tempfile
                text_content = await recognize_voice_content(file_content)
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–∏–ø—Å–∏–∫
                if text_content and not any(err in text_content for err in ["–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å", "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"]):
                    ai_answer = await ask_deepseek(text_content)
                    return ai_answer
                else:
                    return text_content
                
    except Exception as e:
        logger.error(f"Voice processing error: {e}\n{traceback.format_exc()}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

# --- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ aifc) ---
async def process_voice_message_alternative(voice, chat_id):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ aifc"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_id = voice["file_id"]
        file_unique_id = voice["file_unique_id"]
        duration = voice.get("duration", 0)
        
        # –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
        if duration < 1:
            return "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file_url = f"https://api.telegram.org/bot{TOKEN}/getFile?file_id={file_id}"
        async with httpx.AsyncClient() as client:
            resp = await client.get(file_url)
            if resp.status_code != 200:
                logger.error(f"Failed to get file info: {resp.status_code}")
                return None
            
            file_info = resp.json()
            if not file_info.get("ok"):
                logger.error(f"File info error: {file_info}")
                return None
            
            file_path = file_info["result"]["file_path"]
            file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            async with client.stream("GET", file_url) as response:
                if response.status_code != 200:
                    logger.error(f"Failed to download file: {response.status_code}")
                    return None
                
                # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                file_content = await response.aread()
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –±–µ–∑ aifc
                text_content = await recognize_voice_content(file_content)
                if text_content and not any(err in text_content for err in ["–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å", "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"]):
                    ai_answer = await ask_deepseek(text_content)
                    return ai_answer
                else:
                    return text_content
                
    except Exception as e:
        logger.error(f"Alternative voice processing error: {e}\n{traceback.format_exc()}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

# --- –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è) ---
async def process_voice_message_simple(voice, chat_id):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_id = voice["file_id"]
        duration = voice.get("duration", 0)
        
        # –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
        if duration < 1:
            return "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file_url = f"https://api.telegram.org/bot{TOKEN}/getFile?file_id={file_id}"
        async with httpx.AsyncClient() as client:
            resp = await client.get(file_url)
            if resp.status_code != 200:
                logger.error(f"Failed to get file info: {resp.status_code}")
                return None
            
            file_info = resp.json()
            if not file_info.get("ok"):
                logger.error(f"File info error: {file_info}")
                return None
            
            # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            return f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {duration} —Å–µ–∫—É–Ω–¥. –î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."
                
    except Exception as e:
        logger.error(f"Simple voice processing error: {e}\n{traceback.format_exc()}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

# --- –§—É–Ω–∫—Ü–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç" ---
async def send_typing_action(chat_id):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendChatAction"
        payload = {
            "chat_id": chat_id,
            "action": "typing"
        }
        timeout = httpx.Timeout(5.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Failed to send typing action: {resp.status_code} - {resp.text}")
    except Exception as e:
        logger.error(f"Failed to send typing action: {e}")

# --- –£–º–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–æ—Ç ---
def is_likely_note(text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ—Ç—ã"""
    if not text:
        return False
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–æ—Ç
    common_notes = [
        '–≤–∞–Ω–∏–ª—å', '–ª–∞–≤–∞–Ω–¥–∞', '—Ä–æ–∑–∞', '–∂–∞—Å–º–∏–Ω', '—Å–∞–Ω–¥–∞–ª', '–º—É—Å–∫—É—Å', '–∞–º–±—Ä–∞', '–ø–∞—á—É–ª–∏',
        '–±–µ—Ä–≥–∞–º–æ—Ç', '–ª–∏–º–æ–Ω', '–∞–ø–µ–ª—å—Å–∏–Ω', '–º–∞–Ω–¥–∞—Ä–∏–Ω', '–≥—Ä–µ–π–ø—Ñ—Ä—É—Ç', '–ª–∞–π–º',
        '–∫–ª—É–±–Ω–∏–∫–∞', '–º–∞–ª–∏–Ω–∞', '—á–µ—Ä–Ω–∏–∫–∞', '–≤–∏—à–Ω—è', '–ø–µ—Ä—Å–∏–∫', '–∞–±—Ä–∏–∫–æ—Å', '—è–±–ª–æ–∫–æ',
        '–≥—Ä—É—à–∞', '–∞–Ω–∞–Ω–∞—Å', '–º–∞–Ω–≥–æ', '–±–∞–Ω–∞–Ω', '–∫–æ–∫–æ—Å', '–∫–∞—Ä–∞–º–µ–ª—å', '—à–æ–∫–æ–ª–∞–¥',
        '–∫–æ—Ñ–µ', '—á–∞–π', '–º—è—Ç–∞', '–±–∞–∑–∏–ª–∏–∫', '—Ä–æ–∑–º–∞—Ä–∏–Ω', '—Ç–∏–º—å—è–Ω', '–æ—Ä–µ–≥–∞–Ω–æ',
        '–∫–æ—Ä–∏—Ü–∞', '–∫–∞—Ä–¥–∞–º–æ–Ω', '–∏–º–±–∏—Ä—å', '–∫—É—Ä–∫—É–º–∞', '–ø–µ—Ä–µ—Ü', '–≥–≤–æ–∑–¥–∏–∫–∞',
        '–∫–µ–¥—Ä', '—Å–æ—Å–Ω–∞', '–µ–ª—å', '–¥—É–±', '–±–µ—Ä–µ–∑–∞', '–∏–ª–∞–Ω–≥-–∏–ª–∞–Ω–≥', '–Ω–µ—Ä–æ–ª–∏',
        '–∏—Ä–∏—Å', '—Ñ–∏–∞–ª–∫–∞', '–ª–∞–Ω–¥—ã—à', '—Å–∏—Ä–µ–Ω—å', '–∂–∞—Å–º–∏–Ω', '–≥–∞—Ä–¥–µ–Ω–∏—è',
        '–º–æ—Ä—Å–∫–∞—è —Å–æ–ª—å', '–º–æ—Ä—Å–∫–æ–π –±—Ä–∏–∑', '–¥–æ–∂–¥—å', '—Å–Ω–µ–≥', '–∑–µ–º–ª—è', '–º–æ—Ö',
        '–¥—ã–º', '–∫–æ–∂–∞', '—Ç–∞–±–∞–∫', '–≤–∏—Å–∫–∏', '–∫–æ–Ω—å—è–∫', '—Ä–æ–º', '–≤–∏–Ω–æ',
        '–º–µ–¥', '—Å–ª–∏–≤–∫–∏', '–º–æ–ª–æ–∫–æ', '–π–æ–≥—É—Ä—Ç', '—Å—ã—Ä', '–º–∞—Å–ª–æ'
    ]
    
    text_lower = text.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if text_lower in common_notes:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for note in common_notes:
        if note in text_lower or text_lower in note:
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –¥–ª–∏–Ω–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É (–∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ —á–∞—Å—Ç–æ –±—ã–≤–∞—é—Ç –Ω–æ—Ç–∞–º–∏)
    if len(text_lower) <= 15 and not any(char.isdigit() for char in text_lower):
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –Ω–æ—Ç–∞
        return True
    
    return False

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ ---
import re

def convert_to_nominative_case(text):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∫ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –ø–∞–¥–µ–∂—É (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤)"""
    text = text.strip().lower()
    
    # –°–ª–æ–≤–∞—Ä—å –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
    nominative_dict = {
        # –í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ -> –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π
        '–ø—Ä–∞–π—Å': '–ø—Ä–∞–π—Å',
        '–∫–∞—Ç–∞–ª–æ–≥': '–∫–∞—Ç–∞–ª–æ–≥', 
        '–º–∞–≥–∞–∑–∏–Ω': '–º–∞–≥–∞–∑–∏–Ω',
        '—Å–∞–π—Ç': '—Å–∞–π—Ç',
        '—Å—Ç—Ä–∞–Ω–∏—Ü—É': '—Å—Ç—Ä–∞–Ω–∏—Ü–∞',
        '—Å—Ç—Ä–∞–Ω–∏—á–∫—É': '—Å—Ç—Ä–∞–Ω–∏—á–∫–∞',
        '—Ç–æ–≤–∞—Ä': '—Ç–æ–≤–∞—Ä',
        '—Ç–æ–≤–∞—Ä—ã': '—Ç–æ–≤–∞—Ä—ã',
        '–¥—É—Ö–∏': '–¥—É—Ö–∏',
        '–∞—Ä–æ–º–∞—Ç': '–∞—Ä–æ–º–∞—Ç',
        '–∞—Ä–æ–º–∞—Ç—ã': '–∞—Ä–æ–º–∞—Ç—ã',
        '–ø–∞—Ä—Ñ—é–º': '–ø–∞—Ä—Ñ—é–º',
        '–º–∞—Å–ª–æ': '–º–∞—Å–ª–æ',
        '–º–∞—Å–ª–∞': '–º–∞—Å–ª–∞',
        '—Ñ–ª–∞–∫–æ–Ω': '—Ñ–ª–∞–∫–æ–Ω',
        '—Ñ–ª–∞–∫–æ–Ω—ã': '—Ñ–ª–∞–∫–æ–Ω—ã',
        '–±—Ä–µ–Ω–¥': '–±—Ä–µ–Ω–¥',
        '–±—Ä–µ–Ω–¥—ã': '–±—Ä–µ–Ω–¥—ã',
        '–∫–æ–ª–ª–µ–∫—Ü–∏—é': '–∫–æ–ª–ª–µ–∫—Ü–∏—è',
        '–∫–æ–ª–ª–µ–∫—Ü–∏—è': '–∫–æ–ª–ª–µ–∫—Ü–∏—è',
        '–Ω–æ–≤–∏–Ω–∫–∏': '–Ω–æ–≤–∏–Ω–∫–∏',
        '–Ω–æ–≤–∏–Ω–∫—É': '–Ω–æ–≤–∏–Ω–∫–∞',
        '—Å–∫–∏–¥–∫–∏': '—Å–∫–∏–¥–∫–∏',
        '—Å–∫–∏–¥–∫—É': '—Å–∫–∏–¥–∫–∞',
        '–∞–∫—Ü–∏–∏': '–∞–∫—Ü–∏–∏',
        '–∞–∫—Ü–∏—é': '–∞–∫—Ü–∏—è',
        '–æ—Ç–∑—ã–≤—ã': '–æ—Ç–∑—ã–≤—ã',
        '–æ—Ç–∑—ã–≤': '–æ—Ç–∑—ã–≤',
        '—Å—Ç–∞—Ç—å–∏': '—Å—Ç–∞—Ç—å–∏',
        '—Å—Ç–∞—Ç—å—é': '—Å—Ç–∞—Ç—å—è',
        '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é': '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        '–æ–ø–∏—Å–∞–Ω–∏–µ': '–æ–ø–∏—Å–∞–Ω–∏–µ',
        '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏': '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
        '–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏': '–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏',
        '–¥–µ—Ç–∞–ª–∏': '–¥–µ—Ç–∞–ª–∏',
        '–¥–æ—Å—Ç–∞–≤–∫—É': '–¥–æ—Å—Ç–∞–≤–∫–∞',
        '–æ–ø–ª–∞—Ç—É': '–æ–ø–ª–∞—Ç–∞',
        '–∑–∞–∫–∞–∑': '–∑–∞–∫–∞–∑',
        '–∫–æ—Ä–∑–∏–Ω—É': '–∫–æ—Ä–∑–∏–Ω–∞',
        '–ø–æ–∫—É–ø–∫–∏': '–ø–æ–∫—É–ø–∫–∏',
        '–ø–æ–∫—É–ø–∫—É': '–ø–æ–∫—É–ø–∫–∞',
        
        # –†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ -> –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π  
        '–ø—Ä–∞–π—Å–∞': '–ø—Ä–∞–π—Å',
        '–∫–∞—Ç–∞–ª–æ–≥–∞': '–∫–∞—Ç–∞–ª–æ–≥',
        '–º–∞–≥–∞–∑–∏–Ω–∞': '–º–∞–≥–∞–∑–∏–Ω',
        '—Å–∞–π—Ç–∞': '—Å–∞–π—Ç',
        '—Ç–æ–≤–∞—Ä–∞': '—Ç–æ–≤–∞—Ä',
        '–∞—Ä–æ–º–∞—Ç–∞': '–∞—Ä–æ–º–∞—Ç',
        '–ø–∞—Ä—Ñ—é–º–∞': '–ø–∞—Ä—Ñ—é–º',
        '–º–∞—Å–ª–∞': '–º–∞—Å–ª–æ',
        '—Ñ–ª–∞–∫–æ–Ω–∞': '—Ñ–ª–∞–∫–æ–Ω',
        '–±—Ä–µ–Ω–¥–∞': '–±—Ä–µ–Ω–¥',
        
        # –î–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ -> –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π
        '–ø—Ä–∞–π—Å—É': '–ø—Ä–∞–π—Å',
        '–∫–∞—Ç–∞–ª–æ–≥—É': '–∫–∞—Ç–∞–ª–æ–≥',
        '–º–∞–≥–∞–∑–∏–Ω—É': '–º–∞–≥–∞–∑–∏–Ω',
        '—Å–∞–π—Ç—É': '—Å–∞–π—Ç',
        '—Ç–æ–≤–∞—Ä—É': '—Ç–æ–≤–∞—Ä',
        '–∞—Ä–æ–º–∞—Ç—É': '–∞—Ä–æ–º–∞—Ç',
        
        # –¢–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ -> –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π
        '–ø—Ä–∞–π—Å–æ–º': '–ø—Ä–∞–π—Å',
        '–∫–∞—Ç–∞–ª–æ–≥–æ–º': '–∫–∞—Ç–∞–ª–æ–≥',
        '–º–∞–≥–∞–∑–∏–Ω–æ–º': '–º–∞–≥–∞–∑–∏–Ω',
        '—Å–∞–π—Ç–æ–º': '—Å–∞–π—Ç',
        '—Ç–æ–≤–∞—Ä–æ–º': '—Ç–æ–≤–∞—Ä',
        '–∞—Ä–æ–º–∞—Ç–æ–º': '–∞—Ä–æ–º–∞—Ç',
        
        # –ü—Ä–µ–¥–ª–æ–∂–Ω—ã–π –ø–∞–¥–µ–∂ -> –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π
        '–ø—Ä–∞–π—Å–µ': '–ø—Ä–∞–π—Å',
        '–∫–∞—Ç–∞–ª–æ–≥–µ': '–∫–∞—Ç–∞–ª–æ–≥', 
        '–º–∞–≥–∞–∑–∏–Ω–µ': '–º–∞–≥–∞–∑–∏–Ω',
        '—Å–∞–π—Ç–µ': '—Å–∞–π—Ç',
        '—Ç–æ–≤–∞—Ä–µ': '—Ç–æ–≤–∞—Ä',
        '–∞—Ä–æ–º–∞—Ç–µ': '–∞—Ä–æ–º–∞—Ç',
        
        # –ß–∞—Å—Ç—ã–µ –≥–æ—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
        '–ø–æ–¥—Ä–æ–±–Ω–µ–µ': '–ø–æ–¥—Ä–æ–±–Ω–µ–µ',
        '–±–æ–ª—å—à–µ': '–±–æ–ª—å—à–µ',
        '–¥–∞–ª–µ–µ': '–¥–∞–ª–µ–µ',
        '—á–∏—Ç–∞—Ç—å': '—á–∏—Ç–∞—Ç—å',
        '—Å–º–æ—Ç—Ä–µ—Ç—å': '—Å–º–æ—Ç—Ä–µ—Ç—å',
        '–ø–µ—Ä–µ–π—Ç–∏': '–ø–µ—Ä–µ–π—Ç–∏',
        '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å': '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
        '—É–∑–Ω–∞—Ç—å': '—É–∑–Ω–∞—Ç—å',
        '–≤—ã–±—Ä–∞—Ç—å': '–≤—ã–±—Ä–∞—Ç—å',
        '–∫—É–ø–∏—Ç—å': '–∫—É–ø–∏—Ç—å',
        '–∑–∞–∫–∞–∑–∞—Ç—å': '–∑–∞–∫–∞–∑–∞—Ç—å',
        '–æ—Ñ–æ—Ä–º–∏—Ç—å': '–æ—Ñ–æ—Ä–º–∏—Ç—å'
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
    if text in nominative_dict:
        result = nominative_dict[text]
    else:
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏–π
        if text.endswith('—É—é'):
            result = text[:-2] + '–∞—è'
        elif text.endswith('–∏—é'):
            result = text[:-2] + '–∏—è'  
        elif text.endswith('—É—é'):
            result = text[:-2] + '–∞—è'
        elif text.endswith('–æ–π'):
            result = text[:-2] + '—ã–π'
        elif text.endswith('–µ–π'):
            result = text[:-2] + '–∏–π'
        elif text.endswith('–æ–º'):
            result = text[:-2]
        elif text.endswith('–µ–º'):
            result = text[:-2]
        elif text.endswith('–∞–º–∏'):
            result = text[:-3] + '—ã'
        elif text.endswith('—è–º–∏'):
            result = text[:-3] + '–∏'
        else:
            result = text
    
    # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
    return result.capitalize()

def extract_links_from_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –∏–∑ HTML-—Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏"""
    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <a href='URL'>–¢–ï–ö–°–¢</a>
    link_pattern = r"<a\s+href=['\"]([^'\"]+)['\"][^>]*>([^<]+)</a>"
    links = re.findall(link_pattern, text)
    
    if not links:
        return None
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
    buttons = []
    for url, button_text in links:
        # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∫ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –ø–∞–¥–µ–∂—É
        button_text_nominative = convert_to_nominative_case(button_text)
        buttons.append([{"text": button_text_nominative, "url": url}])
    
    return {"inline_keyboard": buttons}

def remove_html_links(text):
    """–£–¥–∞–ª—è–µ—Ç HTML-—Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"""
    # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <a href='URL'>–¢–ï–ö–°–¢</a>, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –¢–ï–ö–°–¢
    link_pattern = r"<a\s+href=['\"][^'\"]+['\"][^>]*>([^<]+)</a>"
    return re.sub(link_pattern, r"\1", text)

# --- Telegram webhook endpoint ---
print('=== [LOG] –û–±—ä—è–≤–ª—è—é —ç–Ω–¥–ø–æ–∏–Ω—Ç webhook... ===')
@app.post("/webhook/ai-bear-123456")
async def telegram_webhook(update: dict, request: Request):
    logger.info(f"=== WEBHOOK CALLED ===")
    logger.info(f"Request from: {request.client.host}")
    logger.info(f"Update type: {list(update.keys()) if update else 'None'}")
    
    try:
        result = await telegram_webhook_impl(update, request)
        logger.info(f"=== WEBHOOK COMPLETED SUCCESSFULLY ===")
        return result
    except Exception as e:
        logger.error(f"=== WEBHOOK FAILED: {e} ===")
        logger.error(traceback.format_exc())
        return {"ok": False, "error": str(e)}

# --- –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–∞—à—É –ª–æ–≥–∏–∫—É webhook —Å—é–¥–∞ ---
async def telegram_webhook_impl(update: dict, request: Request):
    print(f'[WEBHOOK] Called: {request.url} from {request.client.host}')
    print(f'[WEBHOOK] Body: {update}')
    logger.info(f"[WEBHOOK] Called: {request.url} from {request.client.host}")
    logger.info(f"[WEBHOOK] Body: {update}")
    try:
        if "message" in update:
            print('[WEBHOOK] message detected')
            message = update["message"]
            chat_id = message["chat"]["id"]
            user_id = message["from"]["id"]
            text = message.get("text", "").strip()
            voice = message.get("voice")
            state = get_user_state(user_id)
            logger.info(f"[TG] user_id: {user_id}, text: {text}, state: {state}")
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                first_name = message["from"].get("first_name")
                username = message["from"].get("username")
                add_user_to_db(user_id, chat_id, first_name, username)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if voice:
                    logger.info(f"[TG] Voice message received from {user_id}")
                    await send_typing_action(chat_id)
                    file_id = voice["file_id"]
                    file_unique_id = voice["file_unique_id"]
                    duration = voice.get("duration", 0)
                    file_url = f"https://api.telegram.org/bot{TOKEN}/getFile?file_id={file_id}"
                    async with httpx.AsyncClient() as client:
                        resp = await client.get(file_url)
                        if resp.status_code != 200:
                            logger.error(f"Failed to get file info: {resp.status_code}")
                            await telegram_send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.")
                            return {"ok": True}
                        file_info = resp.json()
                        if not file_info.get("ok"):
                            logger.error(f"File info error: {file_info}")
                            await telegram_send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.")
                            return {"ok": True}
                        file_path = file_info["result"]["file_path"]
                        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
                        async with client.stream("GET", file_url) as response:
                            if response.status_code != 200:
                                logger.error(f"Failed to download file: {response.status_code}")
                                await telegram_send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.")
                                return {"ok": True}
                            file_content = await response.aread()
                            text_content = await recognize_voice_content(file_content)
                            logger.info(f"[TG] Voice recognized text: {text_content}")
                            if text_content and not any(err in text_content for err in ["–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å", "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"]):
                                ai_answer = await ask_deepseek(text_content)
                                ai_answer = ai_answer.replace('*', '')
                                buttons = extract_links_from_text(ai_answer)
                                ai_answer_clean = remove_html_links(ai_answer)
                                success = await telegram_send_message(chat_id, ai_answer_clean, buttons if buttons else None)
                                if success:
                                    logger.info(f"[TG] Sent AI answer to voice message for {chat_id}")
                                else:
                                    logger.error(f"[TG] Failed to send AI answer to voice message for {chat_id}")
                            else:
                                await telegram_send_message(chat_id, text_content)
                    return {"ok": True}
                
                if text == "/start":
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    first_name = message["from"].get("first_name")
                    username = message["from"].get("username")
                    add_user_to_db(user_id, chat_id, first_name, username)
                    
                    welcome = (
                        '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n'
                        '–Ø ‚Äî –≤–∞—à –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç BAHUR.\n'
                        'üçì –ò—â—É –Ω–æ—Ç—ã –∏ üß∏ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≤—å—é. ‚ù§\n\n'
                        'üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i></b>'
                    )
                    main_menu = {
                        "inline_keyboard": [
                            [{"text": "üß∏ Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫", "callback_data": "ai"}],
                            [
                                {"text": "üç¶ –ü—Ä–∞–π—Å", "url": "https://drive.google.com/file/d/1J70LlZwh6g7JOryDG2br-weQrYfv6zTc/view?usp=sharing"},
                                {"text": "üçø –ú–∞–≥–∞–∑–∏–Ω", "url": "https://www.bahur.store/m/"},
                                {"text": "‚ôæÔ∏è –í–æ–ø—Ä–æ—Å—ã", "url": "https://vk.com/@bahur_store-optovye-praisy-ot-bahur"}
                            ],
                            [
                                {"text": "üéÆ –ß–∞—Ç", "url": "https://t.me/+VYDZEvbp1pce4KeT"},
                                {"text": "üíé –°—Ç–∞—Ç—å–∏", "url": "https://vk.com/bahur_store?w=app6326142_-133936126%2523w%253Dapp6326142_-133936126"},
                                {"text": "üèÜ –û—Ç–∑—ã–≤—ã", "url": "https://vk.com/@bahur_store"}
                            ],
                            [{"text": "üçì –ù–æ—Ç—ã", "callback_data": "instruction"}]
                        ]
                    }
                    success = await telegram_send_message(chat_id, welcome, main_menu)
                    if success:
                        logger.info(f"[TG] Sent welcome to {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send welcome to {chat_id}")
                    set_user_state(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ /start
                    return {"ok": True}
                elif text == "/menu":
                    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ AI –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    welcome = (
                        '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n'
                        '–Ø ‚Äî –≤–∞—à –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç BAHUR.\n'
                        'üçì –ò—â—É –Ω–æ—Ç—ã –∏ üß∏ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≤—å—é. ‚ù§\n\n'
                        'üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i></b>'
                    )
                    main_menu = {
                        "inline_keyboard": [
                            [{"text": "üß∏ Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫", "callback_data": "ai"}],
                            [
                                {"text": "üç¶ –ü—Ä–∞–π—Å", "url": "https://drive.google.com/file/d/1J70LlZwh6g7JOryDG2br-weQrYfv6zTc/view?usp=sharing"},
                                {"text": "üçø –ú–∞–≥–∞–∑–∏–Ω", "url": "https://www.bahur.store/m/"},
                                {"text": "‚ôæÔ∏è –í–æ–ø—Ä–æ—Å—ã", "url": "https://vk.com/@bahur_store-optovye-praisy-ot-bahur"}
                            ],
                            [
                                {"text": "üéÆ –ß–∞—Ç", "url": "https://t.me/+VYDZEvbp1pce4KeT"},
                                {"text": "üíé –°—Ç–∞—Ç—å–∏", "url": "https://vk.com/bahur_store?w=app6326142_-133936126%2523w%253Dapp6326142_-133936126"},
                                {"text": "üèÜ –û—Ç–∑—ã–≤—ã", "url": "https://vk.com/@bahur_store"}
                            ],
                            [{"text": "üçì –ù–æ—Ç—ã", "callback_data": "instruction"}]
                        ]
                    }
                    success = await telegram_send_message(chat_id, welcome, main_menu)
                    if success:
                        logger.info(f"[TG] Sent menu to {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send menu to {chat_id}")
                    set_user_state(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    return {"ok": True}
                if state == 'awaiting_ai_question':
                    logger.info(f"[TG] Processing AI question for user {user_id}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
                    await send_typing_action(chat_id)
                    ai_answer = await ask_deepseek(text)
                    ai_answer = ai_answer.replace('*', '')
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
                    buttons = extract_links_from_text(ai_answer)
                    ai_answer_clean = remove_html_links(ai_answer)
                    
                    success = await telegram_send_message(chat_id, ai_answer_clean, buttons if buttons else None)
                    if success:
                        logger.info(f"[TG] Sent ai_answer to {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send ai_answer to {chat_id}")
                    # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ AI
                    return {"ok": True}
                if state == 'awaiting_note_search':
                    logger.info(f"[TG] Processing note search for user {user_id}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
                    await send_typing_action(chat_id)
                    result = await search_note_api(text)
                    if result.get("status") == "success":
                        msg = f'‚ú® {result.get("brand")} {result.get("aroma")}\n\n{result.get("description")}'
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
                        reply_markup = {
                            "inline_keyboard": [
                                [
                                    {"text": "üöÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "url": result.get("url", "")},
                                    {"text": "‚ôæÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "callback_data": f"repeatapi_{result.get('ID', '')}"}
                                ]
                            ]
                        }
                        success = await telegram_send_message(chat_id, msg, reply_markup)
                        if success:
                            logger.info(f"[TG] Sent note result to {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to send note result to {chat_id}")
                    else:
                        success = await telegram_send_message(chat_id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢")
                        if success:
                            logger.info(f"[TG] Sent not found to {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to send not found to {chat_id}")
                    set_user_state(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    return {"ok": True}
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ—Ç—É
                if is_likely_note(text):
                    logger.info(f"[TG] Text '{text}' looks like a note, searching...")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
                    await send_typing_action(chat_id)
                    result = await search_note_api(text)
                    if result.get("status") == "success":
                        msg = f'‚ú® {result.get("brand")} {result.get("aroma")}\n\n{result.get("description")}'
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
                        reply_markup = {
                            "inline_keyboard": [
                                [
                                    {"text": "üöÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "url": result.get("url", "")},
                                    {"text": "‚ôæÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "callback_data": f"repeatapi_{result.get('ID', '')}"}
                                ]
                            ]
                        }
                        success = await telegram_send_message(chat_id, msg, reply_markup)
                        if success:
                            logger.info(f"[TG] Auto-found note result for {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to send auto-found note result to {chat_id}")
                    else:
                        success = await telegram_send_message(chat_id, f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–æ—Ç—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞.")
                        if success:
                            logger.info(f"[TG] Sent auto-search not found to {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to send auto-search not found to {chat_id}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ—Ç—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º
                    menu = {
                        "inline_keyboard": [
                            [{"text": "üß∏ Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫", "callback_data": "ai"}],
                            [{"text": "üçì –ù–æ—Ç—ã", "callback_data": "instruction"}]
                        ]
                    }
                    success = await telegram_send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: üß∏ Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫ –∏–ª–∏ üçì –ù–æ—Ç—ã", reply_markup=menu)
                    if success:
                        logger.info(f"[TG] Sent menu to {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send menu to {chat_id}")
                set_user_state(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                return {"ok": True}
            except Exception as e:
                logger.error(f"[TG] Exception in message processing: {e}\n{traceback.format_exc()}")
                try:
                    await telegram_send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except:
                    logger.error("Failed to send error message to user")
                return {"ok": False, "error": str(e)}
                
        elif "callback_query" in update:
            print('[WEBHOOK] callback_query detected')
            callback = update["callback_query"]
            data = callback["data"]
            chat_id = callback["message"]["chat"]["id"]
            user_id = callback["from"]["id"]
            message_id = callback["message"]["message_id"]
            callback_id = callback["id"]
            logger.info(f"[TG] Callback: {data} from {user_id}")
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è callback'–æ–≤
                first_name = callback["from"].get("first_name")
                username = callback["from"].get("username")
                add_user_to_db(user_id, chat_id, first_name, username)
                
                if data == "instruction":
                    set_user_state(user_id, 'awaiting_note_search')
                    success = await telegram_edit_message(chat_id, message_id, 'üçâ –ù–∞–ø–∏—à–∏ –ª—é–±—É—é –Ω–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–ø–µ–ª—å—Å–∏–Ω, –∫–ª—É–±–Ω–∏–∫–∞) ‚Äî —è –Ω–∞–π–¥—É –∞—Ä–æ–º–∞—Ç—ã —Å —ç—Ç–æ–π –Ω–æ—Ç–æ–π!')
                    if success:
                        logger.info(f"[TG] Set state awaiting_note_search for {user_id}")
                    else:
                        logger.error(f"[TG] Failed to edit instruction message for {chat_id}")
                    await telegram_answer_callback_query(callback_id)
                    return {"ok": True}
                elif data == "ai":
                    set_user_state(user_id, 'awaiting_ai_question')
                    ai_greeting = greet()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
                    buttons = extract_links_from_text(ai_greeting)
                    ai_greeting_clean = remove_html_links(ai_greeting)
                    
                    success = await telegram_edit_message(chat_id, message_id, ai_greeting_clean, buttons if buttons else None)
                    if success:
                        logger.info(f"[TG] Set state awaiting_ai_question for {user_id}")
                    else:
                        logger.error(f"[TG] Failed to edit ai greeting for {chat_id}")
                    await telegram_answer_callback_query(callback_id)
                    return {"ok": True}
                elif data.startswith("repeatapi_"):
                    aroma_id = data.split('_', 1)[1]
                    result = await search_by_id_api(aroma_id)
                    if result.get("status") == "success":
                        msg = f'‚ú® {result.get("brand")} {result.get("aroma")}\n\n{result.get("description")}'
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–∫–∞–∑–µ
                        reply_markup = {
                            "inline_keyboard": [
                                [
                                    {"text": "üöÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "url": result.get("url", "")},
                                    {"text": "‚ôæÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "callback_data": f"repeatapi_{result.get('ID', '')}"}
                                ]
                            ]
                        }
                        success = await telegram_edit_message(chat_id, message_id, msg, reply_markup)
                        if success:
                            logger.info(f"[TG] Edited repeatapi result for {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to edit repeatapi result for {chat_id}")
                    else:
                        success = await telegram_edit_message(chat_id, message_id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢")
                        if success:
                            logger.info(f"[TG] Edited repeatapi not found for {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to edit repeatapi not found for {chat_id}")
                    await telegram_answer_callback_query(callback_id)
                    return {"ok": True}
                else:
                    success = await telegram_send_message(chat_id, "Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
                    if success:
                        logger.info(f"[TG] Sent generic callback to {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send generic callback to {chat_id}")
                    return {"ok": True}
            except Exception as e:
                logger.error(f"[TG] Exception in callback processing: {e}\n{traceback.format_exc()}")
                try:
                    await telegram_send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except:
                    logger.error("Failed to send error message to user")
                return {"ok": False, "error": str(e)}
        else:
            print('[WEBHOOK] unknown update type')
            logger.warning("[TG] Unknown update type")
            return {"ok": False}
    except Exception as e:
        print(f'[WEBHOOK] Exception: {e}')
        logger.error(f"[TG] Exception in webhook: {e}\n{traceback.format_exc()}")
        # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç chat_id
        return {"ok": False, "error": str(e)}
print('=== [LOG] –≠–Ω–¥–ø–æ–∏–Ω—Ç webhook –æ–±—ä—è–≤–ª–µ–Ω ===')

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram webhook ---
async def set_telegram_webhook(base_url: str):
    url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
    webhook_url = f"{base_url}{WEBHOOK_PATH}"
    async with httpx.AsyncClient() as client:
        resp = await client.post(url, data={"url": webhook_url})
        logger.info(f"Set webhook response: {resp.text}")
        return resp.json()

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã FastAPI ---
@app.on_event("startup")
async def startup_event():
    logger.info("=== STARTUP EVENT ===")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    start_weekly_scheduler()
    
    base_url = os.getenv("WEBHOOK_BASE_URL")
    if not base_url:
        logger.warning("WEBHOOK_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω, webhook –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    try:
        result = await set_telegram_webhook(base_url)
        logger.info(f"Webhook set result: {result}")
    except Exception as e:
        logger.error(f"Failed to set webhook: {e}\n{traceback.format_exc()}")
    logger.info("=== STARTUP EVENT COMPLETE ===")

@app.on_event("shutdown")
async def shutdown_event():
    logger.info("=== SHUTDOWN EVENT ===")
    logger.info("Application is shutting down gracefully...")
    logger.info("=== SHUTDOWN EVENT COMPLETE ===")

@app.get("/")
async def healthcheck():
    logger.info("Healthcheck requested")
    return PlainTextResponse("OK")

@app.post("/message")
async def handle_message(msg: MessageModel):
    user_id = msg.user_id
    text = msg.text.strip()
    state = get_user_state(user_id)
    logger.info(f"[SUPERLOG] user_id: {user_id}, text: {text}, state: {state}")
    try:
        if state == 'awaiting_ai_question':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç" (–Ω–æ –∑–¥–µ—Å—å –Ω–µ—Ç chat_id, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
            ai_answer = await ask_deepseek(text)
            ai_answer = ai_answer.replace('*', '')
            return JSONResponse({"answer": ai_answer, "parse_mode": "HTML"})
        elif state == 'awaiting_note_search':
            result = await search_note_api(text)
            if result.get("status") == "success":
                return JSONResponse({
                    "brand": result.get("brand"),
                    "aroma": result.get("aroma"),
                    "description": result.get("description"),
                    "url": result.get("url"),
                    "aroma_id": result.get("ID")
                })
            else:
                return JSONResponse({"error": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢"})
        else:
            return JSONResponse({"info": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ callback."})
    except Exception as e:
        logger.error(f"[SUPERLOG] Exception in handle_message: {e}\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/callback")
async def handle_callback(cb: CallbackModel):
    user_id = cb.user_id
    data = cb.data
    logger.info(f"[SUPERLOG] Callback data: {data}, user_id: {user_id}")
    try:
        if data != 'ai' and user_id in user_states:
            user_states.pop(user_id, None)
        if data == 'instruction':
            set_user_state(user_id, 'awaiting_note_search')
            return JSONResponse({"text": 'üçâ –ù–∞–ø–∏—à–∏ –ª—é–±—É—é –Ω–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–ø–µ–ª—å—Å–∏–Ω, –∫–ª—É–±–Ω–∏–∫–∞) ‚Äî —è –Ω–∞–π–¥—É –∞—Ä–æ–º–∞—Ç—ã —Å —ç—Ç–æ–π –Ω–æ—Ç–æ–π!'} )
        elif data == 'ai':
            set_user_state(user_id, 'awaiting_ai_question')
            result = greet()
            return JSONResponse({"text": result})
        elif data.startswith('repeatapi_'):
            aroma_id = data.split('_', 1)[1]
            result = await search_by_id_api(aroma_id)
            if result.get("status") == "success":
                return JSONResponse({
                    "brand": result.get("brand"),
                    "aroma": result.get("aroma"),
                    "description": result.get("description"),
                    "url": result.get("url"),
                    "aroma_id": result.get("ID")
                })
            else:
                return JSONResponse({"error": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢"})
        else:
            return JSONResponse({"info": "Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω."})
    except Exception as e:
        logger.error(f"[SUPERLOG] Exception in handle_callback: {e}\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/start")
async def cmd_start(msg: MessageModel):
    logger.info(f"/start command from user {msg.user_id}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (chat_id = user_id –¥–ª—è API endpoint)
    add_user_to_db(msg.user_id, msg.user_id)
    
    text = (
        '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n'
        '–Ø ‚Äî –≤–∞—à –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç BAHUR.\n'
        'üçì –ò—â—É –Ω–æ—Ç—ã –∏ üß∏ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≤—å—é. ‚ù§</b>'
    )
    return JSONResponse({"text": text, "parse_mode": "HTML"})

@app.post("/send-weekly-messages")
async def manual_weekly_send():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    try:
        await send_weekly_messages()
        return JSONResponse({"status": "success", "message": "Weekly messages sent"})
    except Exception as e:
        logger.error(f"Manual weekly send failed: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/users-stats")
async def get_users_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        cursor.execute('SELECT COUNT(*) FROM users WHERE is_active = 1')
        active_users = cursor.fetchone()[0]
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        week_ago = datetime.now() - timedelta(days=7)
        cursor.execute('SELECT COUNT(*) FROM users WHERE first_start_date > ?', (week_ago,))
        new_users_week = cursor.fetchone()[0]
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        cursor.execute('''
            SELECT COUNT(*) FROM users 
            WHERE is_active = 1 AND (
                last_weekly_message IS NULL OR 
                last_weekly_message < ?
            )
        ''', (week_ago,))
        pending_weekly = cursor.fetchone()[0]
        
        conn.close()
        
        return JSONResponse({
            "total_users": total_users,
            "active_users": active_users,
            "new_users_this_week": new_users_week,
            "pending_weekly_messages": pending_weekly
        })
        
    except Exception as e:
        logger.error(f"Failed to get users stats: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/users-list")
async def get_users_list():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT user_id, chat_id, first_name, username, first_start_date, 
                   last_activity, last_weekly_message, is_active 
            FROM users 
            ORDER BY first_start_date DESC 
            LIMIT 100
        ''')
        
        users = []
        for row in cursor.fetchall():
            users.append({
                "user_id": row[0],
                "chat_id": row[1],
                "first_name": row[2],
                "username": row[3],
                "first_start_date": row[4],
                "last_activity": row[5],
                "last_weekly_message": row[6],
                "is_active": bool(row[7])
            })
        
        conn.close()
        return JSONResponse({"users": users})
        
    except Exception as e:
        logger.error(f"Failed to get users list: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# --- –î–ª—è –∑–∞–ø—É—Å–∫–∞: uvicorn 1:app --reload ---
if __name__ == "__main__":
    import signal
    
    def signal_handler(signum, frame):
        logger.info("Received shutdown signal, gracefully shutting down...")
        sys.exit(0)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    port = int(os.environ.get("PORT", 8000))
    print(f"[INFO] Starting uvicorn on 0.0.0.0:{port}")
    uvicorn.run("1:app", host="0.0.0.0", port=port)