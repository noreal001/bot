import logging
import sqlite3
import re
import requests
import nest_asyncio
import random
import os
import traceback
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import PlainTextResponse, JSONResponse
from pydantic import BaseModel
import aiohttp
import asyncio
import httpx

nest_asyncio.apply()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv('TOKEN')
DB_PATH = "aromas.db"
BASE_WEBHOOK_URL = os.getenv('WEBHOOK_BASE_URL')
WEBHOOK_PATH = "/webhook/ai-bear-123456"
DEEPSEEK_API = os.getenv('DEEPSEEK')

# --- FastAPI app ---
app = FastAPI()

# --- DeepSeek –∏ –¥–∞–Ω–Ω—ã–µ Bahur ---
def load_bahur_data():
    with open("bahur_data.txt", "r", encoding="utf-8") as f:
        return f.read()

BAHUR_DATA = load_bahur_data()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è AI (in-memory, not persistent) ---
user_states = {}

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è FastAPI ---
class MessageModel(BaseModel):
    user_id: int
    text: str

class CallbackModel(BaseModel):
    user_id: int
    data: str

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def greet():
    return random.choice([
    "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üêæ –ì–æ—Ç–æ–≤ —Ä–∞—Å–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –ø—Ä–æ–¥–∞–∂ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π —Å–º–µ–ª–æ!",
    "–≠–π, –¥—Ä—É–≥! üåü Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫ –Ω–∞ —Å–≤—è–∑–∏ ‚Äî –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –º—ë–¥–æ–º!",
    "–ú—è–≥–∫–∏–π –ø—Ä–∏–≤–µ—Ç! üß∏‚ú® –•–æ—á–µ—à—å, —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –ª—É—á—à–µ, —á–µ–º –º–µ–¥–≤–µ–¥—å –≤ –ª–µ—Å—É –º–∞–ª–∏–Ω—É?",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —á–µ–ª–æ–≤–µ–∫! üåü –ì–æ—Ç–æ–≤ —É—Å—Ç—Ä–æ–∏—Ç—å –º–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º? –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å ‚Äî —è –≤ –¥–µ–ª–µ!",
    "–ü—Ä–∏–≤–µ—Ç–∏–∫ –∏–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–π –±–µ—Ä–ª–æ–≥–∏! üêª‚Äç‚ùÑÔ∏èüíª –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? (–°–æ–≤–µ—Ç: —Å–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∫–ª–∞—Å—Å–Ω–æ–µ!)",
    "–ê–ª–ª–æ-–∞–ª–ª–æ! üìû –¢—ã –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è –¥–æ —Å–∞–º–æ–≥–æ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –º–µ–¥–≤–µ–¥—è –≤ —Å–µ—Ç–∏. –í–æ–ø—Ä–æ—Å—ã ‚Äî –≤ —Å—Ç—É–¥–∏—é!",
    "–•–µ–π-—Ö–µ–π! üéØ –ì–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É, –∫–∞–∫ –ø—á–µ–ª–∞ –∫ –º—ë–¥—É. –ó–∞–ø—É—Å–∫–∞–π —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å!",
    "–¢—ã–¥—ã—â—å! üé©‚ú® Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫-–≤–æ–ª—à–µ–±–Ω–∏–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è. –ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Å–ø—Ä—è—Ç–∞–Ω —É —Ç–µ–±—è –≤ —Ä—É–∫–∞–≤–µ?",
    "–ü—Ä–∏–≤–µ—Ç, –∑–µ–º–ª—è–Ω–∏–Ω! üëΩüêª (–®—É—á—É, —è –ø—Ä–æ—Å—Ç–æ AI). –î–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ!"
    ])

async def ask_deepseek(question):
    url = "https://api.deepseek.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "deepseek-chat",
        "messages": [
            {
                "role": "system",
                "content": (
                    "–¢—ã - Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫ (–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º), –∑–¥–æ—Ä–æ–≤–∞–π—Å—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ, –∑–Ω–∞—è —ç—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É:\n"
                    f"{BAHUR_DATA}\n"
                    "–ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Å—ã–ª–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ –µ—ë –≤ –æ—Ç–≤–µ—Ç. "
                    "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –≤–æ–ø—Ä–æ—Å–∞, –±–µ–∑ –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ markdown, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –∫—Ä—É—Ç—ã–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏."
                    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–∏ –≤ —à—É—Ç–∫—É, –Ω–∏–∫–∞–∫–∏—Ö '–Ω–µ –∑–Ω–∞—é' –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫—É–ø–∏—Ç—å –¥—É—Ö–∏"
                    "–ö–æ–≥–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—à—å —Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ñ–æ—Ä–º–∞—Ç: <a href='–°–°–´–õ–ö–ê'>–¢–ï–ö–°–¢</a>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown."
                    "–ù–æ –µ—Å–ª–∏ –æ–Ω –ø–∏—à–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –Ω–æ—Ç—ã, –ø—Ä–µ–¥–ª–æ–∂–∏ –µ–º—É –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É üçì –ù–æ—Ç—ã –≤ –º–µ–Ω—é"
                    "–ù–µ –ø–∏—à–∏ –ø—Ä–æ –Ω–æ–º–µ—Ä–∞ –∞—Ä–æ–º–∞—Ç–æ–≤ –≤ –ø—Ä–∞–π—Å–µ"
                )
            },
            {
                "role": "user",
                "content": f"{question}"
            }
        ],
        "temperature": 0.9
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=data, timeout=30) as resp:
            resp.raise_for_status()
            result = await resp.json()
            return result["choices"][0]["message"]["content"].strip()

async def search_note_api(note):
    url = f"https://api.alexander-dev.ru/bahur/search/?text={note}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url, timeout=10) as resp:
            resp.raise_for_status()
            return await resp.json()

# --- Telegram sendMessage ---
async def telegram_send_message(chat_id, text, reply_markup=None, parse_mode="HTML"):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    async with httpx.AsyncClient() as client:
        await client.post(url, json=payload)

# --- Telegram webhook endpoint ---
@app.post(WEBHOOK_PATH)
async def telegram_webhook(update: dict):
    try:
        if "message" in update:
            message = update["message"]
            chat_id = message["chat"]["id"]
            user_id = message["from"]["id"]
            text = message.get("text", "").strip()
            state = user_states.get(user_id)
            logger.info(f"[TG] user_id: {user_id}, text: {text}, state: {state}")
            if text == "/start":
                welcome = (
                    '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n'
                    '–Ø ‚Äî –≤–∞—à –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç BAHUR.\n'
                    'üçì –ò—â—É –Ω–æ—Ç—ã –∏ üß∏ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≤—å—é. ‚ù§</b>'
                )
                await telegram_send_message(chat_id, welcome)
                return {"ok": True}
            if state == 'awaiting_ai_question':
                ai_answer = await ask_deepseek(text)
                ai_answer = ai_answer.replace('*', '')
                await telegram_send_message(chat_id, ai_answer)
                return {"ok": True}
            if state == 'awaiting_note_search':
                result = await search_note_api(text)
                if result.get("status") == "success":
                    msg = f'‚ú® {result.get("brand")} {result.get("aroma")}\n\n{result.get("description")}'
                    await telegram_send_message(chat_id, msg)
                else:
                    await telegram_send_message(chat_id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢")
                return {"ok": True}
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º
            menu = {
                "inline_keyboard": [
                    [{"text": "üß∏ Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫", "callback_data": "ai"}],
                    [{"text": "üçì –ù–æ—Ç—ã", "callback_data": "instruction"}]
                ]
            }
            await telegram_send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: üß∏ Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫ –∏–ª–∏ üçì –ù–æ—Ç—ã", reply_markup=menu)
            return {"ok": True}
        elif "callback_query" in update:
            callback = update["callback_query"]
            data = callback["data"]
            chat_id = callback["message"]["chat"]["id"]
            user_id = callback["from"]["id"]
            message_id = callback["message"]["message_id"]
            if data == "instruction":
                user_states[user_id] = 'awaiting_note_search'
                await telegram_send_message(chat_id, 'üçâ –ù–∞–ø–∏—à–∏ –ª—é–±—É—é –Ω–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–ø–µ–ª—å—Å–∏–Ω, –∫–ª—É–±–Ω–∏–∫–∞) ‚Äî —è –Ω–∞–π–¥—É –∞—Ä–æ–º–∞—Ç—ã —Å —ç—Ç–æ–π –Ω–æ—Ç–æ–π!')
                return {"ok": True}
            elif data == "ai":
                user_states[user_id] = 'awaiting_ai_question'
                await telegram_send_message(chat_id, greet())
                return {"ok": True}
            elif data.startswith("repeatapi_"):
                aroma_id = data.split('_', 1)[1]
                url = f"https://api.alexander-dev.ru/bahur/search/?id={aroma_id}"
                async with aiohttp.ClientSession() as session:
                    async with session.get(url, timeout=10) as response:
                        response.raise_for_status()
                        result = await response.json()
                if result.get("status") == "success":
                    msg = f'‚ú® {result.get("brand")} {result.get("aroma")}\n\n{result.get("description")}'
                    await telegram_send_message(chat_id, msg)
                else:
                    await telegram_send_message(chat_id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢")
                return {"ok": True}
            else:
                await telegram_send_message(chat_id, "Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
                return {"ok": True}
        else:
            logger.warning("[TG] Unknown update type")
            return {"ok": False}
    except Exception as e:
        logger.error(f"[TG] Exception in webhook: {e}\n{traceback.format_exc()}")
        return {"ok": False, "error": str(e)}

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram webhook ---
async def set_telegram_webhook(base_url: str):
    url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
    webhook_url = f"{base_url}{WEBHOOK_PATH}"
    async with httpx.AsyncClient() as client:
        resp = await client.post(url, data={"url": webhook_url})
        logger.info(f"Set webhook response: {resp.text}")
        return resp.json()

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã FastAPI ---
@app.on_event("startup")
async def startup_event():
    base_url = os.getenv("WEBHOOK_BASE_URL")
    if not base_url:
        logger.warning("WEBHOOK_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω, webhook –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    result = await set_telegram_webhook(base_url)
    logger.info(f"Webhook set result: {result}")

@app.get("/")
async def healthcheck():
    logger.info("Healthcheck requested")
    return PlainTextResponse("OK")

@app.post("/message")
async def handle_message(msg: MessageModel):
    user_id = msg.user_id
    text = msg.text.strip()
    state = user_states.get(user_id)
    logger.info(f"[SUPERLOG] user_id: {user_id}, text: {text}, state: {state}")
    try:
        if state == 'awaiting_ai_question':
            ai_answer = await ask_deepseek(text)
            ai_answer = ai_answer.replace('*', '')
            return JSONResponse({"answer": ai_answer, "parse_mode": "HTML"})
        elif state == 'awaiting_note_search':
            result = await search_note_api(text)
            if result.get("status") == "success":
                return JSONResponse({
                    "brand": result.get("brand"),
                    "aroma": result.get("aroma"),
                    "description": result.get("description"),
                    "url": result.get("url"),
                    "aroma_id": result.get("ID")
                })
            else:
                return JSONResponse({"error": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢"})
        else:
            return JSONResponse({"info": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ callback."})
    except Exception as e:
        logger.error(f"[SUPERLOG] Exception in handle_message: {e}\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/callback")
async def handle_callback(cb: CallbackModel):
    user_id = cb.user_id
    data = cb.data
    logger.info(f"[SUPERLOG] Callback data: {data}, user_id: {user_id}")
    try:
        if data != 'ai' and user_id in user_states:
            user_states.pop(user_id, None)
        if data == 'instruction':
            user_states[user_id] = 'awaiting_note_search'
            return JSONResponse({"text": 'üçâ –ù–∞–ø–∏—à–∏ –ª—é–±—É—é –Ω–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–ø–µ–ª—å—Å–∏–Ω, –∫–ª—É–±–Ω–∏–∫–∞) ‚Äî —è –Ω–∞–π–¥—É –∞—Ä–æ–º–∞—Ç—ã —Å —ç—Ç–æ–π –Ω–æ—Ç–æ–π!'} )
        elif data == 'ai':
            user_states[user_id] = 'awaiting_ai_question'
            result = greet()
            return JSONResponse({"text": result})
        elif data.startswith('repeatapi_'):
            aroma_id = data.split('_', 1)[1]
            url = f"https://api.alexander-dev.ru/bahur/search/?id={aroma_id}"
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=10) as response:
                    response.raise_for_status()
                    result = await response.json()
            if result.get("status") == "success":
                return JSONResponse({
                    "brand": result.get("brand"),
                    "aroma": result.get("aroma"),
                    "description": result.get("description"),
                    "url": result.get("url"),
                    "aroma_id": result.get("ID")
                })
            else:
                return JSONResponse({"error": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢"})
        else:
            return JSONResponse({"info": "Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω."})
    except Exception as e:
        logger.error(f"[SUPERLOG] Exception in handle_callback: {e}\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/start")
async def cmd_start(msg: MessageModel):
    logger.info(f"/start command from user {msg.user_id}")
    text = (
        '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n'
        '–Ø ‚Äî –≤–∞—à –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç BAHUR.\n'
        'üçì –ò—â—É –Ω–æ—Ç—ã –∏ üß∏ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≤—å—é. ‚ù§</b>'
    )
    return JSONResponse({"text": text, "parse_mode": "HTML"})

# --- –î–ª—è –∑–∞–ø—É—Å–∫–∞: uvicorn 1:app --reload ---