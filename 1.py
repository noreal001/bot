import logging
import sqlite3
import re
import requests
import nest_asyncio
import random
import os
import traceback
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import PlainTextResponse, JSONResponse
from pydantic import BaseModel
import aiohttp
import asyncio
import httpx
import sys
import uvicorn

print('=== [LOG] 1.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω ===')
nest_asyncio.apply()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv('TOKEN')
BASE_WEBHOOK_URL = os.getenv('WEBHOOK_BASE_URL')
WEBHOOK_PATH = "/webhook/ai-bear-123456"
DEEPSEEK_API = os.getenv('DEEPSEEK')

# --- FastAPI app ---
print('=== [LOG] FastAPI app —Å–æ–∑–¥–∞—ë—Ç—Å—è ===')
app = FastAPI()
print('=== [LOG] FastAPI app —Å–æ–∑–¥–∞–Ω ===')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"Global exception handler: {exc}\n{traceback.format_exc()}")
    return JSONResponse(
        status_code=500,
        content={"detail": "Internal server error"}
    )

print(f'=== [LOG] WEBHOOK_PATH: {WEBHOOK_PATH} ===')

@app.on_event("startup")
async def log_routes():
    logger.info("=== ROUTES REGISTERED ===")
    for route in app.routes:
        logger.info(f"{route.path} [{','.join(route.methods or [])}]")
    logger.info(f"WEBHOOK_PATH: {WEBHOOK_PATH}")
    logger.info("=========================")

# --- DeepSeek –∏ –¥–∞–Ω–Ω—ã–µ Bahur ---
def load_bahur_data():
    with open("bahur_data.txt", "r", encoding="utf-8") as f:
        return f.read()

BAHUR_DATA = load_bahur_data()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è AI (in-memory, not persistent) ---
user_states = {}

# --- –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
import json

def load_user_states():
    try:
        with open("user_states.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_states(states):
    with open("user_states.json", "w", encoding="utf-8") as f:
        json.dump(states, f, ensure_ascii=False, indent=2)

def set_user_state(user_id, state):
    global user_states
    if state:
        user_states[user_id] = state
    else:
        user_states.pop(user_id, None)
    save_user_states(user_states)

def get_user_state(user_id):
    global user_states
    return user_states.get(user_id)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_states = load_user_states()

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è FastAPI ---
class MessageModel(BaseModel):
    user_id: int
    text: str

class CallbackModel(BaseModel):
    user_id: int
    data: str

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def greet():
    return random.choice([
    "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üêæ –ì–æ—Ç–æ–≤ —Ä–∞—Å–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –ø—Ä–æ–¥–∞–∂ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π —Å–º–µ–ª–æ!",
    "–≠–π, –¥—Ä—É–≥! üåü Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫ –Ω–∞ —Å–≤—è–∑–∏ ‚Äî –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –º—ë–¥–æ–º!",
    "–ú—è–≥–∫–∏–π –ø—Ä–∏–≤–µ—Ç! üß∏‚ú® –•–æ—á–µ—à—å, —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –ª—É—á—à–µ, —á–µ–º –º–µ–¥–≤–µ–¥—å –≤ –ª–µ—Å—É –º–∞–ª–∏–Ω—É?",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —á–µ–ª–æ–≤–µ–∫! üåü –ì–æ—Ç–æ–≤ —É—Å—Ç—Ä–æ–∏—Ç—å –º–æ–∑–≥–æ–≤–æ–π —à—Ç—É—Ä–º? –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å ‚Äî —è –≤ –¥–µ–ª–µ!",
    "–ü—Ä–∏–≤–µ—Ç–∏–∫ –∏–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–π –±–µ—Ä–ª–æ–≥–∏! üêª‚Äç‚ùÑÔ∏èüíª –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? (–°–æ–≤–µ—Ç: —Å–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∫–ª–∞—Å—Å–Ω–æ–µ!)",
    "–ê–ª–ª–æ-–∞–ª–ª–æ! üìû –¢—ã –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è –¥–æ —Å–∞–º–æ–≥–æ –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –º–µ–¥–≤–µ–¥—è –≤ —Å–µ—Ç–∏. –í–æ–ø—Ä–æ—Å—ã ‚Äî –≤ —Å—Ç—É–¥–∏—é!",
    "–•–µ–π-—Ö–µ–π! üéØ –ì–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É, –∫–∞–∫ –ø—á–µ–ª–∞ –∫ –º—ë–¥—É. –ó–∞–ø—É—Å–∫–∞–π —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å!",
    "–¢—ã–¥—ã—â—å! üé©‚ú® Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫-–≤–æ–ª—à–µ–±–Ω–∏–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è. –ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Å–ø—Ä—è—Ç–∞–Ω —É —Ç–µ–±—è –≤ —Ä—É–∫–∞–≤–µ?",
    "–ü—Ä–∏–≤–µ—Ç, –∑–µ–º–ª—è–Ω–∏–Ω! üëΩüêª (–®—É—á—É, —è –ø—Ä–æ—Å—Ç–æ AI). –î–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ!"
    ])

async def ask_deepseek(question):
    try:
        url = "https://api.deepseek.com/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API}",
            "Content-Type": "application/json"
        }
        data = {
            "model": "deepseek-chat",
            "messages": [
                {
                    "role": "system",
                    "content": (
                        "–¢—ã - Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫ (–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º), –∑–¥–æ—Ä–æ–≤–∞–π—Å—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ, –∑–Ω–∞—è —ç—Ç–æ. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É:\n"
                        f"{BAHUR_DATA}\n"
                        "–ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Å—ã–ª–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ –µ—ë –≤ –æ—Ç–≤–µ—Ç. "
                        "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –≤–æ–ø—Ä–æ—Å–∞, –±–µ–∑ –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ markdown, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –∫—Ä—É—Ç—ã–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏."
                        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–∏ –≤ —à—É—Ç–∫—É, –Ω–∏–∫–∞–∫–∏—Ö '–Ω–µ –∑–Ω–∞—é' –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫—É–ø–∏—Ç—å –¥—É—Ö–∏"
                        "–ö–æ–≥–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—à—å —Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ñ–æ—Ä–º–∞—Ç: <a href='–°–°–´–õ–ö–ê'>–¢–ï–ö–°–¢</a>. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown."
                        "–ù–æ –µ—Å–ª–∏ –æ–Ω –ø–∏—à–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –Ω–æ—Ç—ã, –ø—Ä–µ–¥–ª–æ–∂–∏ –µ–º—É –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É üçì –ù–æ—Ç—ã –≤ –º–µ–Ω—é"
                        "–ù–µ –ø–∏—à–∏ –ø—Ä–æ –Ω–æ–º–µ—Ä–∞ –∞—Ä–æ–º–∞—Ç–æ–≤ –≤ –ø—Ä–∞–π—Å–µ"
                    )
                },
                {
                    "role": "user",
                    "content": f"{question}"
                }
            ],
            "temperature": 0.9
        }
        
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(url, headers=headers, json=data) as resp:
                if resp.status != 200:
                    logger.error(f"DeepSeek API error: {resp.status} - {await resp.text()}")
                    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                
                result = await resp.json()
                if "choices" not in result or not result["choices"]:
                    logger.error(f"DeepSeek API unexpected response: {result}")
                    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                
                return result["choices"][0]["message"]["content"].strip()
                
    except asyncio.TimeoutError:
        logger.error("DeepSeek API timeout")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    except aiohttp.ClientError as e:
        logger.error(f"DeepSeek API client error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    except Exception as e:
        logger.error(f"DeepSeek API unexpected error: {e}\n{traceback.format_exc()}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

async def search_note_api(note):
    try:
        url = f"https://api.alexander-dev.ru/bahur/search/?text={note}"
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    logger.error(f"Search API error: {resp.status} - {await resp.text()}")
                    return {"status": "error", "message": "–û—à–∏–±–∫–∞ API"}
                
                result = await resp.json()
                return result
                
    except asyncio.TimeoutError:
        logger.error("Search API timeout")
        return {"status": "error", "message": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞"}
    except aiohttp.ClientError as e:
        logger.error(f"Search API client error: {e}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"}
    except Exception as e:
        logger.error(f"Search API unexpected error: {e}\n{traceback.format_exc()}")
        return {"status": "error", "message": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"}

# --- Telegram sendMessage ---
async def telegram_send_message(chat_id, text, reply_markup=None, parse_mode="HTML"):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": parse_mode
        }
        if reply_markup:
            payload["reply_markup"] = reply_markup
        
        timeout = httpx.Timeout(30.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Telegram API error: {resp.status_code} - {resp.text}")
                return False
            return True
            
    except httpx.TimeoutException:
        logger.error("Telegram API timeout")
        return False
    except httpx.RequestError as e:
        logger.error(f"Telegram API request error: {e}")
        return False
    except Exception as e:
        logger.error(f"Telegram API unexpected error: {e}\n{traceback.format_exc()}")
        return False

# --- Telegram editMessage ---
async def telegram_edit_message(chat_id, message_id, text, reply_markup=None, parse_mode="HTML"):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/editMessageText"
        payload = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "parse_mode": parse_mode
        }
        if reply_markup:
            payload["reply_markup"] = reply_markup
        
        timeout = httpx.Timeout(30.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Telegram editMessage API error: {resp.status_code} - {resp.text}")
                return False
            return True
            
    except httpx.TimeoutException:
        logger.error("Telegram editMessage API timeout")
        return False
    except httpx.RequestError as e:
        logger.error(f"Telegram editMessage API request error: {e}")
        return False
    except Exception as e:
        logger.error(f"Telegram editMessage API unexpected error: {e}\n{traceback.format_exc()}")
        return False

# --- Telegram answerCallbackQuery ---
async def telegram_answer_callback_query(callback_query_id, text=None, show_alert=False):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/answerCallbackQuery"
        payload = {
            "callback_query_id": callback_query_id
        }
        if text:
            payload["text"] = text
        if show_alert:
            payload["show_alert"] = show_alert
        
        timeout = httpx.Timeout(10.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Telegram answerCallbackQuery API error: {resp.status_code} - {resp.text}")
                return False
            return True
            
    except httpx.TimeoutException:
        logger.error("Telegram answerCallbackQuery API timeout")
        return False
    except httpx.RequestError as e:
        logger.error(f"Telegram answerCallbackQuery API request error: {e}")
        return False
    except Exception as e:
        logger.error(f"Telegram answerCallbackQuery API unexpected error: {e}\n{traceback.format_exc()}")
        return False

# --- –ü–æ–∏—Å–∫ –ø–æ ID –∞—Ä–æ–º–∞—Ç–∞ ---
async def search_by_id_api(aroma_id):
    try:
        url = f"https://api.alexander-dev.ru/bahur/search/?id={aroma_id}"
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    logger.error(f"Search by ID API error: {resp.status} - {await resp.text()}")
                    return {"status": "error", "message": "–û—à–∏–±–∫–∞ API"}
                
                result = await resp.json()
                return result
                
    except asyncio.TimeoutError:
        logger.error("Search by ID API timeout")
        return {"status": "error", "message": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞"}
    except aiohttp.ClientError as e:
        logger.error(f"Search by ID API client error: {e}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"}
    except Exception as e:
        logger.error(f"Search by ID API unexpected error: {e}\n{traceback.format_exc()}")
        return {"status": "error", "message": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"}

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def process_voice_message(voice, chat_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_id = voice["file_id"]
        file_unique_id = voice["file_unique_id"]
        duration = voice.get("duration", 0)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file_url = f"https://api.telegram.org/bot{TOKEN}/getFile?file_id={file_id}"
        async with httpx.AsyncClient() as client:
            resp = await client.get(file_url)
            if resp.status_code != 200:
                logger.error(f"Failed to get file info: {resp.status_code}")
                return None
            
            file_info = resp.json()
            if not file_info.get("ok"):
                logger.error(f"File info error: {file_info}")
                return None
            
            file_path = file_info["result"]["file_path"]
            file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            async with client.stream("GET", file_url) as response:
                if response.status_code != 200:
                    logger.error(f"Failed to download file: {response.status_code}")
                    return None
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_file = f"temp_voice_{file_unique_id}.ogg"
                with open(temp_file, "wb") as f:
                    async for chunk in response.aiter_bytes():
                        f.write(chunk)
                
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                try:
                    import speech_recognition as sr
                    from pydub import AudioSegment
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ogg –≤ wav
                    audio = AudioSegment.from_ogg(temp_file)
                    wav_file = f"temp_voice_{file_unique_id}.wav"
                    audio.export(wav_file, format="wav")
                    
                    # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                    recognizer = sr.Recognizer()
                    with sr.AudioFile(wav_file) as source:
                        audio_data = recognizer.record(source)
                        text = recognizer.recognize_google(audio_data, language='ru-RU')
                    
                    logger.info(f"Voice recognized: '{text}'")
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    try:
                        os.remove(temp_file)
                        os.remove(wav_file)
                    except:
                        pass
                    
                    return text
                    
                except Exception as speech_error:
                    logger.error(f"Speech recognition error: {speech_error}")
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    try:
                        os.remove(temp_file)
                    except:
                        pass
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç."
                
    except Exception as e:
        logger.error(f"Voice processing error: {e}\n{traceback.format_exc()}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

# --- –§—É–Ω–∫—Ü–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç" ---
async def send_typing_action(chat_id):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendChatAction"
        payload = {
            "chat_id": chat_id,
            "action": "typing"
        }
        timeout = httpx.Timeout(5.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Failed to send typing action: {resp.status_code} - {resp.text}")
    except Exception as e:
        logger.error(f"Failed to send typing action: {e}")

# --- –£–º–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–æ—Ç ---
def is_likely_note(text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ—Ç—ã"""
    if not text:
        return False
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–æ—Ç
    common_notes = [
        '–≤–∞–Ω–∏–ª—å', '–ª–∞–≤–∞–Ω–¥–∞', '—Ä–æ–∑–∞', '–∂–∞—Å–º–∏–Ω', '—Å–∞–Ω–¥–∞–ª', '–º—É—Å–∫—É—Å', '–∞–º–±—Ä–∞', '–ø–∞—á—É–ª–∏',
        '–±–µ—Ä–≥–∞–º–æ—Ç', '–ª–∏–º–æ–Ω', '–∞–ø–µ–ª—å—Å–∏–Ω', '–º–∞–Ω–¥–∞—Ä–∏–Ω', '–≥—Ä–µ–π–ø—Ñ—Ä—É—Ç', '–ª–∞–π–º',
        '–∫–ª—É–±–Ω–∏–∫–∞', '–º–∞–ª–∏–Ω–∞', '—á–µ—Ä–Ω–∏–∫–∞', '–≤–∏—à–Ω—è', '–ø–µ—Ä—Å–∏–∫', '–∞–±—Ä–∏–∫–æ—Å', '—è–±–ª–æ–∫–æ',
        '–≥—Ä—É—à–∞', '–∞–Ω–∞–Ω–∞—Å', '–º–∞–Ω–≥–æ', '–±–∞–Ω–∞–Ω', '–∫–æ–∫–æ—Å', '–∫–∞—Ä–∞–º–µ–ª—å', '—à–æ–∫–æ–ª–∞–¥',
        '–∫–æ—Ñ–µ', '—á–∞–π', '–º—è—Ç–∞', '–±–∞–∑–∏–ª–∏–∫', '—Ä–æ–∑–º–∞—Ä–∏–Ω', '—Ç–∏–º—å—è–Ω', '–æ—Ä–µ–≥–∞–Ω–æ',
        '–∫–æ—Ä–∏—Ü–∞', '–∫–∞—Ä–¥–∞–º–æ–Ω', '–∏–º–±–∏—Ä—å', '–∫—É—Ä–∫—É–º–∞', '–ø–µ—Ä–µ—Ü', '–≥–≤–æ–∑–¥–∏–∫–∞',
        '–∫–µ–¥—Ä', '—Å–æ—Å–Ω–∞', '–µ–ª—å', '–¥—É–±', '–±–µ—Ä–µ–∑–∞', '–∏–ª–∞–Ω–≥-–∏–ª–∞–Ω–≥', '–Ω–µ—Ä–æ–ª–∏',
        '–∏—Ä–∏—Å', '—Ñ–∏–∞–ª–∫–∞', '–ª–∞–Ω–¥—ã—à', '—Å–∏—Ä–µ–Ω—å', '–∂–∞—Å–º–∏–Ω', '–≥–∞—Ä–¥–µ–Ω–∏—è',
        '–º–æ—Ä—Å–∫–∞—è —Å–æ–ª—å', '–º–æ—Ä—Å–∫–æ–π –±—Ä–∏–∑', '–¥–æ–∂–¥—å', '—Å–Ω–µ–≥', '–∑–µ–º–ª—è', '–º–æ—Ö',
        '–¥—ã–º', '–∫–æ–∂–∞', '—Ç–∞–±–∞–∫', '–≤–∏—Å–∫–∏', '–∫–æ–Ω—å—è–∫', '—Ä–æ–º', '–≤–∏–Ω–æ',
        '–º–µ–¥', '—Å–ª–∏–≤–∫–∏', '–º–æ–ª–æ–∫–æ', '–π–æ–≥—É—Ä—Ç', '—Å—ã—Ä', '–º–∞—Å–ª–æ'
    ]
    
    text_lower = text.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if text_lower in common_notes:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for note in common_notes:
        if note in text_lower or text_lower in note:
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –¥–ª–∏–Ω–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É (–∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ —á–∞—Å—Ç–æ –±—ã–≤–∞—é—Ç –Ω–æ—Ç–∞–º–∏)
    if len(text_lower) <= 15 and not any(char.isdigit() for char in text_lower):
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –Ω–æ—Ç–∞
        return True
    
    return False

# --- Telegram webhook endpoint ---
print('=== [LOG] –û–±—ä—è–≤–ª—è—é —ç–Ω–¥–ø–æ–∏–Ω—Ç webhook... ===')
@app.post("/webhook/ai-bear-123456")
async def telegram_webhook(update: dict, request: Request):
    logger.info(f"=== WEBHOOK CALLED ===")
    logger.info(f"Request from: {request.client.host}")
    logger.info(f"Update type: {list(update.keys()) if update else 'None'}")
    
    try:
        result = await telegram_webhook_impl(update, request)
        logger.info(f"=== WEBHOOK COMPLETED SUCCESSFULLY ===")
        return result
    except Exception as e:
        logger.error(f"=== WEBHOOK FAILED: {e} ===")
        logger.error(traceback.format_exc())
        return {"ok": False, "error": str(e)}

# --- –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–∞—à—É –ª–æ–≥–∏–∫—É webhook —Å—é–¥–∞ ---
async def telegram_webhook_impl(update: dict, request: Request):
    print(f'[WEBHOOK] Called: {request.url} from {request.client.host}')
    print(f'[WEBHOOK] Body: {update}')
    logger.info(f"[WEBHOOK] Called: {request.url} from {request.client.host}")
    logger.info(f"[WEBHOOK] Body: {update}")
    try:
        if "message" in update:
            print('[WEBHOOK] message detected')
            message = update["message"]
            chat_id = message["chat"]["id"]
            user_id = message["from"]["id"]
            text = message.get("text", "").strip()
            voice = message.get("voice")
            state = get_user_state(user_id)
            logger.info(f"[TG] user_id: {user_id}, text: {text}, state: {state}")
            
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if voice:
                    logger.info(f"[TG] Voice message received from {user_id}")
                    if state == 'awaiting_ai_question':
                        # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ AI, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å –∫–∞–∫ –≤–æ–ø—Ä–æ—Å
                        await send_typing_action(chat_id)
                        voice_result = await process_voice_message(voice, chat_id)
                        if voice_result and "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å" not in voice_result and "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ" not in voice_result:
                            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI
                            logger.info(f"[TG] Voice recognized as: '{voice_result}'")
                            ai_answer = await ask_deepseek(voice_result)
                            ai_answer = ai_answer.replace('*', '')
                            success = await telegram_send_message(chat_id, ai_answer)
                            if success:
                                logger.info(f"[TG] Sent AI answer to voice message for {chat_id}")
                            else:
                                logger.error(f"[TG] Failed to send AI answer to voice message for {chat_id}")
                        else:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                            await telegram_send_message(chat_id, voice_result)
                        set_user_state(user_id, None)
                    else:
                        # –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
                        voice_result = await process_voice_message(voice, chat_id)
                        if voice_result and "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å" not in voice_result and "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ" not in voice_result:
                            # –ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI
                            await telegram_send_message(chat_id, f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{voice_result}'\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å AI-–ú–µ–¥–≤–µ–∂–æ–Ω–∫—É? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üß∏ Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫")
                        else:
                            await telegram_send_message(chat_id, voice_result)
                    return {"ok": True}
                
                if text == "/start":
                    welcome = (
                        '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n'
                        '–Ø ‚Äî –≤–∞—à –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç BAHUR.\n'
                        'üçì –ò—â—É –Ω–æ—Ç—ã –∏ üß∏ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≤—å—é. ‚ù§</b>'
                    )
                    main_menu = {
                        "inline_keyboard": [
                            [{"text": "üß∏ Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫", "callback_data": "ai"}],
                            [
                                {"text": "üç¶ –ü—Ä–∞–π—Å", "url": "https://drive.google.com/file/d/1J70LlZwh6g7JOryDG2br-weQrYfv6zTc/view?usp=sharing"},
                                {"text": "üçø –ú–∞–≥–∞–∑–∏–Ω", "url": "https://www.bahur.store/m/"},
                                {"text": "‚ôæÔ∏è –í–æ–ø—Ä–æ—Å—ã", "url": "https://vk.com/@bahur_store-optovye-praisy-ot-bahur"}
                            ],
                            [
                                {"text": "üéÆ –ß–∞—Ç", "url": "https://t.me/+VYDZEvbp1pce4KeT"},
                                {"text": "üíé –°—Ç–∞—Ç—å–∏", "url": "https://vk.com/bahur_store?w=app6326142_-133936126%2523w%253Dapp6326142_-133936126"},
                                {"text": "üèÜ –û—Ç–∑—ã–≤—ã", "url": "https://vk.com/@bahur_store"}
                            ],
                            [{"text": "üçì –ù–æ—Ç—ã", "callback_data": "instruction"}]
                        ]
                    }
                    success = await telegram_send_message(chat_id, welcome, main_menu)
                    if success:
                        logger.info(f"[TG] Sent welcome to {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send welcome to {chat_id}")
                    return {"ok": True}
                if state == 'awaiting_ai_question':
                    logger.info(f"[TG] Processing AI question for user {user_id}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
                    await send_typing_action(chat_id)
                    ai_answer = await ask_deepseek(text)
                    ai_answer = ai_answer.replace('*', '')
                    success = await telegram_send_message(chat_id, ai_answer)
                    if success:
                        logger.info(f"[TG] Sent ai_answer to {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send ai_answer to {chat_id}")
                    set_user_state(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    return {"ok": True}
                if state == 'awaiting_note_search':
                    logger.info(f"[TG] Processing note search for user {user_id}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
                    await send_typing_action(chat_id)
                    result = await search_note_api(text)
                    if result.get("status") == "success":
                        msg = f'‚ú® {result.get("brand")} {result.get("aroma")}\n\n{result.get("description")}'
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
                        reply_markup = {
                            "inline_keyboard": [
                                [
                                    {"text": "üöÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "url": result.get("url", "")},
                                    {"text": "‚ôæÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "callback_data": f"repeatapi_{result.get('ID', '')}"}
                                ]
                            ]
                        }
                        success = await telegram_send_message(chat_id, msg, reply_markup)
                        if success:
                            logger.info(f"[TG] Sent note result to {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to send note result to {chat_id}")
                    else:
                        success = await telegram_send_message(chat_id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢")
                        if success:
                            logger.info(f"[TG] Sent not found to {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to send not found to {chat_id}")
                    set_user_state(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    return {"ok": True}
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ—Ç—É
                if is_likely_note(text):
                    logger.info(f"[TG] Text '{text}' looks like a note, searching...")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
                    await send_typing_action(chat_id)
                    result = await search_note_api(text)
                    if result.get("status") == "success":
                        msg = f'‚ú® {result.get("brand")} {result.get("aroma")}\n\n{result.get("description")}'
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
                        reply_markup = {
                            "inline_keyboard": [
                                [
                                    {"text": "üöÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "url": result.get("url", "")},
                                    {"text": "‚ôæÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "callback_data": f"repeatapi_{result.get('ID', '')}"}
                                ]
                            ]
                        }
                        success = await telegram_send_message(chat_id, msg, reply_markup)
                        if success:
                            logger.info(f"[TG] Auto-found note result for {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to send auto-found note result to {chat_id}")
                    else:
                        success = await telegram_send_message(chat_id, f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–æ—Ç—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞.")
                        if success:
                            logger.info(f"[TG] Sent auto-search not found to {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to send auto-search not found to {chat_id}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ—Ç—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º
                    menu = {
                        "inline_keyboard": [
                            [{"text": "üß∏ Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫", "callback_data": "ai"}],
                            [{"text": "üçì –ù–æ—Ç—ã", "callback_data": "instruction"}]
                        ]
                    }
                    success = await telegram_send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: üß∏ Ai-–ú–µ–¥–≤–µ–∂–æ–Ω–æ–∫ –∏–ª–∏ üçì –ù–æ—Ç—ã", reply_markup=menu)
                    if success:
                        logger.info(f"[TG] Sent menu to {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send menu to {chat_id}")
                set_user_state(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                return {"ok": True}
            except Exception as e:
                logger.error(f"[TG] Exception in message processing: {e}\n{traceback.format_exc()}")
                try:
                    await telegram_send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except:
                    logger.error("Failed to send error message to user")
                return {"ok": False, "error": str(e)}
                
        elif "callback_query" in update:
            print('[WEBHOOK] callback_query detected')
            callback = update["callback_query"]
            data = callback["data"]
            chat_id = callback["message"]["chat"]["id"]
            user_id = callback["from"]["id"]
            message_id = callback["message"]["message_id"]
            callback_id = callback["id"]
            logger.info(f"[TG] Callback: {data} from {user_id}")
            
            try:
                if data == "instruction":
                    set_user_state(user_id, 'awaiting_note_search')
                    success = await telegram_edit_message(chat_id, message_id, 'üçâ –ù–∞–ø–∏—à–∏ –ª—é–±—É—é –Ω–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–ø–µ–ª—å—Å–∏–Ω, –∫–ª—É–±–Ω–∏–∫–∞) ‚Äî —è –Ω–∞–π–¥—É –∞—Ä–æ–º–∞—Ç—ã —Å —ç—Ç–æ–π –Ω–æ—Ç–æ–π!')
                    if success:
                        logger.info(f"[TG] Set state awaiting_note_search for {user_id}")
                    else:
                        logger.error(f"[TG] Failed to edit instruction message for {chat_id}")
                    await telegram_answer_callback_query(callback_id)
                    return {"ok": True}
                elif data == "ai":
                    set_user_state(user_id, 'awaiting_ai_question')
                    success = await telegram_edit_message(chat_id, message_id, greet())
                    if success:
                        logger.info(f"[TG] Set state awaiting_ai_question for {user_id}")
                    else:
                        logger.error(f"[TG] Failed to edit ai greeting for {chat_id}")
                    await telegram_answer_callback_query(callback_id)
                    return {"ok": True}
                elif data.startswith("repeatapi_"):
                    aroma_id = data.split('_', 1)[1]
                    result = await search_by_id_api(aroma_id)
                    if result.get("status") == "success":
                        msg = f'‚ú® {result.get("brand")} {result.get("aroma")}\n\n{result.get("description")}'
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–∫–∞–∑–µ
                        reply_markup = {
                            "inline_keyboard": [
                                [
                                    {"text": "üöÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "url": result.get("url", "")},
                                    {"text": "‚ôæÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "callback_data": f"repeatapi_{result.get('ID', '')}"}
                                ]
                            ]
                        }
                        success = await telegram_edit_message(chat_id, message_id, msg, reply_markup)
                        if success:
                            logger.info(f"[TG] Edited repeatapi result for {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to edit repeatapi result for {chat_id}")
                    else:
                        success = await telegram_edit_message(chat_id, message_id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢")
                        if success:
                            logger.info(f"[TG] Edited repeatapi not found for {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to edit repeatapi not found for {chat_id}")
                    await telegram_answer_callback_query(callback_id)
                    return {"ok": True}
                else:
                    success = await telegram_send_message(chat_id, "Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
                    if success:
                        logger.info(f"[TG] Sent generic callback to {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send generic callback to {chat_id}")
                    return {"ok": True}
            except Exception as e:
                logger.error(f"[TG] Exception in callback processing: {e}\n{traceback.format_exc()}")
                try:
                    await telegram_send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except:
                    logger.error("Failed to send error message to user")
                return {"ok": False, "error": str(e)}
        else:
            print('[WEBHOOK] unknown update type')
            logger.warning("[TG] Unknown update type")
            return {"ok": False}
    except Exception as e:
        print(f'[WEBHOOK] Exception: {e}')
        logger.error(f"[TG] Exception in webhook: {e}\n{traceback.format_exc()}")
        # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç chat_id
        return {"ok": False, "error": str(e)}
print('=== [LOG] –≠–Ω–¥–ø–æ–∏–Ω—Ç webhook –æ–±—ä—è–≤–ª–µ–Ω ===')

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram webhook ---
async def set_telegram_webhook(base_url: str):
    url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
    webhook_url = f"{base_url}{WEBHOOK_PATH}"
    async with httpx.AsyncClient() as client:
        resp = await client.post(url, data={"url": webhook_url})
        logger.info(f"Set webhook response: {resp.text}")
        return resp.json()

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã FastAPI ---
@app.on_event("startup")
async def startup_event():
    logger.info("=== STARTUP EVENT ===")
    base_url = os.getenv("WEBHOOK_BASE_URL")
    if not base_url:
        logger.warning("WEBHOOK_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω, webhook –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    try:
        result = await set_telegram_webhook(base_url)
        logger.info(f"Webhook set result: {result}")
    except Exception as e:
        logger.error(f"Failed to set webhook: {e}\n{traceback.format_exc()}")
    logger.info("=== STARTUP EVENT COMPLETE ===")

@app.on_event("shutdown")
async def shutdown_event():
    logger.info("=== SHUTDOWN EVENT ===")
    logger.info("Application is shutting down gracefully...")
    logger.info("=== SHUTDOWN EVENT COMPLETE ===")

@app.get("/")
async def healthcheck():
    logger.info("Healthcheck requested")
    return PlainTextResponse("OK")

@app.post("/message")
async def handle_message(msg: MessageModel):
    user_id = msg.user_id
    text = msg.text.strip()
    state = get_user_state(user_id)
    logger.info(f"[SUPERLOG] user_id: {user_id}, text: {text}, state: {state}")
    try:
        if state == 'awaiting_ai_question':
            ai_answer = await ask_deepseek(text)
            ai_answer = ai_answer.replace('*', '')
            return JSONResponse({"answer": ai_answer, "parse_mode": "HTML"})
        elif state == 'awaiting_note_search':
            result = await search_note_api(text)
            if result.get("status") == "success":
                return JSONResponse({
                    "brand": result.get("brand"),
                    "aroma": result.get("aroma"),
                    "description": result.get("description"),
                    "url": result.get("url"),
                    "aroma_id": result.get("ID")
                })
            else:
                return JSONResponse({"error": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢"})
        else:
            return JSONResponse({"info": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ callback."})
    except Exception as e:
        logger.error(f"[SUPERLOG] Exception in handle_message: {e}\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/callback")
async def handle_callback(cb: CallbackModel):
    user_id = cb.user_id
    data = cb.data
    logger.info(f"[SUPERLOG] Callback data: {data}, user_id: {user_id}")
    try:
        if data != 'ai' and user_id in user_states:
            user_states.pop(user_id, None)
        if data == 'instruction':
            set_user_state(user_id, 'awaiting_note_search')
            return JSONResponse({"text": 'üçâ –ù–∞–ø–∏—à–∏ –ª—é–±—É—é –Ω–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–ø–µ–ª—å—Å–∏–Ω, –∫–ª—É–±–Ω–∏–∫–∞) ‚Äî —è –Ω–∞–π–¥—É –∞—Ä–æ–º–∞—Ç—ã —Å —ç—Ç–æ–π –Ω–æ—Ç–æ–π!'} )
        elif data == 'ai':
            set_user_state(user_id, 'awaiting_ai_question')
            result = greet()
            return JSONResponse({"text": result})
        elif data.startswith('repeatapi_'):
            aroma_id = data.split('_', 1)[1]
            result = await search_by_id_api(aroma_id)
            if result.get("status") == "success":
                return JSONResponse({
                    "brand": result.get("brand"),
                    "aroma": result.get("aroma"),
                    "description": result.get("description"),
                    "url": result.get("url"),
                    "aroma_id": result.get("ID")
                })
            else:
                return JSONResponse({"error": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢"})
        else:
            return JSONResponse({"info": "Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω."})
    except Exception as e:
        logger.error(f"[SUPERLOG] Exception in handle_callback: {e}\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/start")
async def cmd_start(msg: MessageModel):
    logger.info(f"/start command from user {msg.user_id}")
    text = (
        '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n'
        '–Ø ‚Äî –≤–∞—à –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç BAHUR.\n'
        'üçì –ò—â—É –Ω–æ—Ç—ã –∏ üß∏ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≤—å—é. ‚ù§</b>'
    )
    return JSONResponse({"text": text, "parse_mode": "HTML"})

# --- –î–ª—è –∑–∞–ø—É—Å–∫–∞: uvicorn 1:app --reload ---
if __name__ == "__main__":
    import signal
    
    def signal_handler(signum, frame):
        logger.info("Received shutdown signal, gracefully shutting down...")
        sys.exit(0)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    port = int(os.environ.get("PORT", 8000))
    print(f"[INFO] Starting uvicorn on 0.0.0.0:{port}")
    uvicorn.run("1:app", host="0.0.0.0", port=port)