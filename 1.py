import logging
import sqlite3
import re
import requests
import nest_asyncio
import random
import os
import traceback
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import PlainTextResponse, JSONResponse
from pydantic import BaseModel
import aiohttp
import asyncio
import httpx
import sys
import uvicorn
from datetime import datetime, timedelta
import schedule
import threading
import time
import openai
from contextlib import contextmanager

print('=== [LOG] 1.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω ===')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
try:
    from context import add_user_message, add_assistant_message, get_user_context, clear_user_context
    CONTEXT_ENABLED = True
    print('=== [LOG] –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ===')
except ImportError:
    CONTEXT_ENABLED = False
    print('=== [LOG] –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ===')

nest_asyncio.apply()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv('TOKEN')
BASE_WEBHOOK_URL = os.getenv('WEBHOOK_BASE_URL')
WEBHOOK_PATH = "/webhook/ai-bear-123456"
OPENAI_API = os.getenv('OPENAI_API_KEY')
OPENAI_MODEL = os.getenv('OPENAI_MODEL', 'gpt-5')
OPENAI_FALLBACK_MODEL = os.getenv('OPENAI_FALLBACK_MODEL', 'gpt-4o-mini')

# --- FastAPI app ---
print('=== [LOG] FastAPI app —Å–æ–∑–¥–∞—ë—Ç—Å—è ===')
app = FastAPI()
print('=== [LOG] FastAPI app —Å–æ–∑–¥–∞–Ω ===')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"Global exception handler: {exc}\n{traceback.format_exc()}")
    return JSONResponse(
        status_code=500,
        content={"detail": "Internal server error"}
    )

print(f'=== [LOG] WEBHOOK_PATH: {WEBHOOK_PATH} ===')

@app.on_event("startup")
async def log_routes():
    logger.info("=== ROUTES REGISTERED ===")
    for route in app.routes:
        logger.info(f"{route.path} [{','.join(route.methods or [])}]")
    logger.info(f"WEBHOOK_PATH: {WEBHOOK_PATH}")
    logger.info("=========================")

# --- DeepSeek –∏ –¥–∞–Ω–Ω—ã–µ Bahur ---
def load_bahur_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ bahur_data/ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç"""
    import os
    combined_data = ""
    
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏
    data_dir = "bahur_data"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞
        if not os.path.exists(data_dir):
            print(f"–ü–∞–ø–∫–∞ {data_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ .txt —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏
        for filename in os.listdir(data_dir):
            if filename.endswith('.txt'):
                file_path = os.path.join(data_dir, filename)
                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        file_content = f.read()
                        combined_data += f"\n\n=== {filename} ===\n{file_content}\n"
                        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        
        if not combined_data:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ .txt —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ bahur_data/")
            return "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(combined_data)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
        return combined_data
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- DeepSeek –∏ –¥–∞–Ω–Ω—ã–µ Bahur ---
BAHUR_DATA = load_bahur_data()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è AI (in-memory, not persistent) ---
user_states = {}

# --- –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
import json

def load_user_states():
    try:
        with open("user_states.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_user_states(states):
    with open("user_states.json", "w", encoding="utf-8") as f:
        json.dump(states, f, ensure_ascii=False, indent=2)

def set_user_state(user_id, state):
    global user_states
    if state:
        user_states[user_id] = state
    else:
        user_states.pop(user_id, None)
    save_user_states(user_states)

def get_user_state(user_id):
    global user_states
    return user_states.get(user_id)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_states = load_user_states()

# --- –ú–æ–¥–µ–ª–∏ –¥–ª—è FastAPI ---
class MessageModel(BaseModel):
    user_id: int
    text: str

class CallbackModel(BaseModel):
    user_id: int
    data: str

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def greet():
    return random.choice([
    "–ü—Ä–∏–≤–µ—Ç! üêÜ‚ú® –Ø AI-–ü–∞–Ω—Ç–µ—Ä–∞ ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Ä–æ–º–∞—Ç–∞–º BAHUR! –°–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ –ª—é–±—ã–µ –¥—É—Ö–∏, –º–∞—Å–ª–∞, –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ —Ü–µ–Ω—ã ‚Äî —è –Ω–∞–π–¥—É –≤—Å—ë –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ! üåü",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! üêÜüí´ –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∞—Ä–æ–º–∞—Ç–æ–≤! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥—É—Ö–∏, –º–∞—Å–ª–∞, –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ —Ü–µ–Ω—ã? –°–ø—Ä–∞—à–∏–≤–∞–π ‚Äî —É –º–µ–Ω—è –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥! ‚ú®",
    "–ü—Ä–∏–≤–µ—Ç, –∞—Ä–æ–º–∞—Ç–Ω—ã–π –¥—Ä—É–≥! üêÜ‚Äç‚ùÑÔ∏è‚ú® –Ø –∑–Ω–∞—é –≤—Å—ë –æ –¥—É—Ö–∞—Ö BAHUR! –°–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ –ª—é–±—ã–µ –∞—Ä–æ–º–∞—Ç—ã, –º–∞—Å–ª–∞, –¥–æ—Å—Ç–∞–≤–∫—É ‚Äî –Ω–∞–π–¥—É –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–æ! üåü",
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéØüêÜ –Ø —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Ä–æ–º–∞—Ç–∞–º BAHUR! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥—É—Ö–∏, –º–∞—Å–ª–∞, —Ü–µ–Ω—ã –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É? –°–ø—Ä–∞—à–∏–≤–∞–π ‚Äî —É –º–µ–Ω—è –µ—Å—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ! ‚ú®",
    "–ü—Ä–∏–≤–µ—Ç! üåüüêÜ –Ø AI-–ü–∞–Ω—Ç–µ—Ä–∞ ‚Äî –∑–Ω–∞—é –≤—Å—ë –æ –¥—É—Ö–∞—Ö BAHUR! –°–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ –ª—é–±—ã–µ –∞—Ä–æ–º–∞—Ç—ã, –º–∞—Å–ª–∞, –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ —Ü–µ–Ω—ã ‚Äî –Ω–∞–π–¥—É –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –ø–æ–º–æ–≥—É —Å –≤—ã–±–æ—Ä–æ–º! üí´"
    ])

async def ask_chatgpt(question, user_id=None):
    try:
        # –í—ã–±–æ—Ä API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
        model_lower = (OPENAI_MODEL or "").lower()
        use_responses_api = model_lower.startswith("gpt-5") or model_lower.startswith("gpt-4.1") or model_lower.startswith("gpt-4o")

        url = "https://api.openai.com/v1/responses" if use_responses_api else "https://api.openai.com/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {OPENAI_API}",
            "Content-Type": "application/json"
        }
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä bahur_data –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        bahur_data_limited = BAHUR_DATA[:3000]
        
        system_content = (
            "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–°–ï –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏, —Ñ–∞–±—Ä–∏–∫–∞—Ö, –∞—Ä–æ–º–∞—Ç–∞—Ö, —Ü–µ–Ω–∞—Ö, –∫–∞—á–µ—Å—Ç–≤–µ, –¥–æ—Å—Ç–∞–≤–∫–µ, –∑–∞–∫–∞–∑–∞—Ö –ë–ï–†–ò –¢–û–õ–¨–ö–û –∏–∑ –¥–∞–Ω–Ω—ã—Ö BAHUR! –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π –ù–ò–ß–ï–ì–û! –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç - –≥–æ–≤–æ—Ä–∏ '–Ω–µ –∑–Ω–∞—é'! üö®\n"
            "–¢—ã - AI-–ü–∞–Ω—Ç–µ—Ä–∞ (–º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º), —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Ä–æ–º–∞—Ç–∞–º BAHUR.\n"
            "–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í:\n"
            "1. –ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∞—Ä–æ–º–∞—Ç–∞ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –ø–∏—à–∏ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã\n"
            "2. –í—Å—Ç–∞–≤–ª—è–π –∫—Ä–∞—Å–∏–≤—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–º–∞–π–ª–∏–∫ –≤ –Ω–∞—á–∞–ª–µ –∫–Ω–æ–ø–∫–∏, –∫–æ–≥–¥–∞ –¥–µ–ª–∞–µ—à—å –∫–Ω–æ–ø–∫–∏.\n"
            "3. –û—Ç–≤–µ—á–∞–π –ö–û–ù–ö–†–ï–¢–ù–û –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞\n"
            "4. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å —ç–º–æ–¥–∑–∏, –Ω–æ –ë–ï–ó markdown\n"
            "5. –ö–æ–≥–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ—à—å —Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ñ–æ—Ä–º–∞—Ç: <a href='–°–°–´–õ–ö–ê'>–¢–ï–ö–°–¢</a>\n"
            "6. –£–ø–æ–º–∏–Ω–∞–π —Ñ–∞–±—Ä–∏–∫—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∫–æ–≥–¥–∞ —ç—Ç–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ\n"
            "7. –í–ê–ñ–ù–û: –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –Ω–∏–∫–∞–∫–∏–µ –∞—Ä–æ–º–∞—Ç—ã, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ—Ç–æ—Ä—ã—Ö —É –Ω–∞—Å –Ω–µ—Ç. –¢—ã –Ω–µ –ø—Ä–æ–¥–∞–≤–µ—Ü, —Ç—ã –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–µ—à—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –±–∏–∑–Ω–µ—Å, –∞ –Ω–µ –∑–∞ –∞—Ä–æ–º–∞—Ç—ã.\n"
            "8. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, –∫—Ä–∞—Å–∏–≤–æ, —è—Å–Ω–æ, –≤ —á—ë—Ä–Ω–æ–º —Å—Ç–∏–ª–µ –ø–∞–Ω—Ç–µ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª—ã –∏ –æ—Ç—Å—Ç—É–ø—ã\n"
            "9. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–º. –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ –ø—Ä–æ –∞—Ä–æ–º–∞—Ç—ã - –æ—Ç–≤–µ—á–∞–π –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–æ —Å—Ç–∞—Ä–∞–π—Å—è –¥–µ—Ä–∂–∞—Ç—å—Å—è —Ç–µ–º—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –æ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω–æ–º –±–∏–∑–Ω–µ—Å–µ\n"
            "10. –ù–µ –¥–∞–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—Ä–æ–º–∞—Ç—ã, —Å–∫–∞–∂–∏ –≤—Å–µ –∞—Ä–æ–º–∞—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–æ—Ç—ã –≤ —ç—Ç–æ–º –∂–µ –±–æ—Ç–µ\n"
            "11. –ù–µ –¥–µ–ª–∞–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–¥–±–æ—Ä–æ–∫ –∞—Ä–æ–º–∞—Ç–æ–≤, –Ω–∏ –Ω–∞ –Ω–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞. –°–∫–∞–∂–∏ –∞—Ä–æ–º–∞—Ç—ã –≤ –ª—é–±–æ–µ –≥–æ–¥–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã –∏ —Ç—ã –Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∞, –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª –Ω–æ—Ç—ã –≤ —ç—Ç–æ–º –∂–µ –±–æ—Ç–µ.\n"
            "12. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —é–º–æ—Ä –∏ —Å–º–∞–π–ª—ã! –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –≤–µ—Å–µ–ª–∞—è, –ø–∞—Ä–æ–¥–∏—Å—Ç–∞—è, –æ–ø–∞—Å–Ω–∞—è, –ø–∞–Ω—Ç–µ—Ä–∞, –∞ –Ω–µ –∫–∞–∫ —Å–∫—É—á–Ω—ã–π —É—á–µ–±–Ω–∏–∫\n"
            "13. –ü–æ–º–Ω–∏, –º—ã –æ–ø—Ç–æ–≤—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã, –æ–Ω–∏ –æ–ø—Ç–æ–≤—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏\n"
            "14. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö BAHUR - –≥–æ–≤–æ—Ä–∏ —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å, –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π!\n"
            "15. –°—Ç–∞—Ä–∞–π—Å—è, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –Ω–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–º –Ω–∏–∫–∏–µ —Å—Å—ã–ª–∫–∏ –ª–∏—à–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø–æ –¥–µ–ª—É, –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —É –Ω–∏—Ö –µ—Å—Ç—å\n"
            "16. –ü—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∞—Ä–æ–º–∞—Ç–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª –Ω–æ—Ç—ã –≤ —ç—Ç–æ–º –∂–µ –±–æ—Ç–µ\n"
            f"\n\n–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ):\n{bahur_data_limited}"
        )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
        messages = [{"role": "system", "content": system_content}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if CONTEXT_ENABLED and user_id:
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                add_user_message(user_id, question)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_context = get_user_context(user_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                if user_context:
                    # –ë–µ—Ä–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (–∫–æ—Ç–æ—Ä–æ–µ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏)
                    context_messages = user_context[:-1]
                    messages.extend(context_messages)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
                messages.append({"role": "user", "content": question})
                
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(context_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: {e}")
                # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
                messages.append({"role": "user", "content": question})
        else:
            # –ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            messages.append({"role": "user", "content": question})
        
        if use_responses_api:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º messages –≤ —Ñ–æ—Ä–º–∞—Ç Responses API
            responses_input = []
            for m in messages:
                role = m.get("role", "user")
                content = m.get("content", "")
                responses_input.append({
                    "role": role,
                    "content": [{"type": "text", "text": content}]
                })
            data = {
                "model": OPENAI_MODEL,
                "input": responses_input,
                "temperature": 0.8,
                "max_completion_tokens": 1000
            }
        else:
            data = {
                "model": OPENAI_MODEL,
                "messages": messages,
                "temperature": 0.8,
                "max_tokens": 4000
            }
        
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(url, headers=headers, json=data) as resp:
                if resp.status != 200:
                    # –§–æ–ª–±—ç–∫, –µ—Å–ª–∏ —É –∫–ª—é—á–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è Responses API
                    try:
                        error_text = await resp.text()
                    except Exception:
                        error_text = ""
                    if use_responses_api and resp.status == 401 and "api.responses.write" in (error_text or ""):
                        logger.warning("No permissions for Responses API (missing api.responses.write). Falling back to chat/completions with fallback model.")
                        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å
                        fb_url = "https://api.openai.com/v1/chat/completions"
                        fb_data = {
                            "model": OPENAI_FALLBACK_MODEL,
                            "messages": messages,
                            "temperature": 0.8,
                            "max_tokens": 1000
                        }
                        async with session.post(fb_url, headers=headers, json=fb_data) as fb_resp:
                            if fb_resp.status != 200:
                                logger.error(f"OpenAI API fallback error: {fb_resp.status} - {await fb_resp.text()}")
                                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                            fb_result = await fb_resp.json()
                            if "choices" not in fb_result or not fb_result["choices"]:
                                logger.error(f"OpenAI API fallback unexpected response: {fb_result}")
                                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                            assistant_response = fb_result["choices"][0]["message"]["content"].strip()
                    else:
                        logger.error(f"OpenAI API error: {resp.status} - {error_text}")
                        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                else:
                    result = await resp.json()
                    if use_responses_api:
                        assistant_response = None
                        if isinstance(result, dict):
                            assistant_response = (result.get("output_text") or "").strip()
                            if not assistant_response:
                                output = result.get("output") or []
                                if output and isinstance(output, list):
                                    for item in output:
                                        if item and isinstance(item, dict):
                                            contents = item.get("content") or []
                                            for c in contents:
                                                if isinstance(c, dict):
                                                    text_val = c.get("text") or c.get("output_text")
                                                    if text_val:
                                                        assistant_response = str(text_val).strip()
                                                        break
                                            if assistant_response:
                                                break
                        if not assistant_response:
                            logger.error(f"OpenAI Responses API unexpected response: {result}")
                            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    else:
                        if "choices" not in result or not result["choices"]:
                            logger.error(f"OpenAI API unexpected response: {result}")
                            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                        assistant_response = result["choices"][0]["message"]["content"].strip()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                if CONTEXT_ENABLED and user_id:
                    try:
                        add_assistant_message(user_id, assistant_response)
                        logger.info(f"–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {e}")
                
                return assistant_response
                
    except asyncio.TimeoutError:
        logger.error("OpenAI API timeout")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    except aiohttp.ClientError as e:
        logger.error(f"OpenAI API client error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    except Exception as e:
        logger.error(f"OpenAI API unexpected error: {e}\n{traceback.format_exc()}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

async def search_note_api(note):
    try:
        url = f"https://api.alexander-dev.ru/bahur/search/?text={note}"
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    logger.error(f"Search API error: {resp.status} - {await resp.text()}")
                    return {"status": "error", "message": "–û—à–∏–±–∫–∞ API"}
                
                result = await resp.json()
                return result
                
    except asyncio.TimeoutError:
        logger.error("Search API timeout")
        return {"status": "error", "message": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞"}
    except aiohttp.ClientError as e:
        logger.error(f"Search API client error: {e}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"}
    except Exception as e:
        logger.error(f"Search API unexpected error: {e}\n{traceback.format_exc()}")
        return {"status": "error", "message": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"}

# --- Telegram sendMessage ---
async def telegram_send_message(chat_id, text, reply_markup=None, parse_mode="HTML"):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": parse_mode
        }
        if reply_markup:
            payload["reply_markup"] = reply_markup
        
        timeout = httpx.Timeout(30.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Telegram API error: {resp.status_code} - {resp.text}")
                return False
            return True
            
    except httpx.TimeoutException:
        logger.error("Telegram API timeout")
        return False
    except httpx.RequestError as e:
        logger.error(f"Telegram API request error: {e}")
        return False
    except Exception as e:
        logger.error(f"Telegram API unexpected error: {e}\n{traceback.format_exc()}")
        return False

# --- Telegram editMessage ---
async def telegram_edit_message(chat_id, message_id, text, reply_markup=None, parse_mode="HTML"):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/editMessageText"
        payload = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "parse_mode": parse_mode
        }
        if reply_markup:
            payload["reply_markup"] = reply_markup
        
        timeout = httpx.Timeout(30.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Telegram editMessage API error: {resp.status_code} - {resp.text}")
                return False
            return True
            
    except httpx.TimeoutException:
        logger.error("Telegram editMessage API timeout")
        return False
    except httpx.RequestError as e:
        logger.error(f"Telegram editMessage API request error: {e}")
        return False
    except Exception as e:
        logger.error(f"Telegram editMessage API unexpected error: {e}\n{traceback.format_exc()}")
        return False

# --- Telegram answerCallbackQuery ---
async def telegram_answer_callback_query(callback_query_id, text=None, show_alert=False):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/answerCallbackQuery"
        payload = {
            "callback_query_id": callback_query_id
        }
        if text:
            payload["text"] = text
        if show_alert:
            payload["show_alert"] = show_alert
        
        timeout = httpx.Timeout(10.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Telegram answerCallbackQuery API error: {resp.status_code} - {resp.text}")
                return False
            return True
            
    except httpx.TimeoutException:
        logger.error("Telegram answerCallbackQuery API timeout")
        return False
    except httpx.RequestError as e:
        logger.error(f"Telegram answerCallbackQuery API request error: {e}")
        return False
    except Exception as e:
        logger.error(f"Telegram answerCallbackQuery API unexpected error: {e}\n{traceback.format_exc()}")
        return False

# --- –ü–æ–∏—Å–∫ –ø–æ ID –∞—Ä–æ–º–∞—Ç–∞ ---
async def search_by_id_api(aroma_id):
    try:
        url = f"https://api.alexander-dev.ru/bahur/search/?id={aroma_id}"
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    logger.error(f"Search by ID API error: {resp.status} - {await resp.text()}")
                    return {"status": "error", "message": "–û—à–∏–±–∫–∞ API"}
                
                result = await resp.json()
                return result
                
    except asyncio.TimeoutError:
        logger.error("Search by ID API timeout")
        return {"status": "error", "message": "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞"}
    except aiohttp.ClientError as e:
        logger.error(f"Search by ID API client error: {e}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"}
    except Exception as e:
        logger.error(f"Search by ID API unexpected error: {e}\n{traceback.format_exc()}")
        return {"status": "error", "message": "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"}

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def recognize_voice_content(file_content):
    """–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ä–µ—á—å –∏–∑ –±–∞–π—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ogg-—Ñ–∞–π–ª–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫—É-–æ—à–∏–±–∫—É."""
    try:
        import speech_recognition as sr
        from pydub import AudioSegment
        import tempfile
        recognizer = sr.Recognizer()
        with tempfile.NamedTemporaryFile(suffix='.ogg') as temp_ogg, tempfile.NamedTemporaryFile(suffix='.wav') as temp_wav:
            temp_ogg.write(file_content)
            temp_ogg.flush()
            try:
                audio = AudioSegment.from_file(temp_ogg.name)
                audio.export(temp_wav.name, format='wav')
                temp_wav.flush()
            except Exception as audio_error:
                logger.error(f"Audio conversion error: {audio_error}")
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç."
            try:
                with sr.AudioFile(temp_wav.name) as source:
                    audio_data = recognizer.record(source)
                text_content = recognizer.recognize_google(audio_data, language='ru-RU')
                logger.info(f"Voice recognized: '{text_content}'")
                return text_content
            except sr.UnknownValueError:
                logger.error("Speech recognition could not understand audio")
                return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç."
            except sr.RequestError as e:
                logger.error(f"Speech recognition service error: {e}")
                return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç."
    except Exception as e:
        logger.error(f"Speech recognition error: {e}\n{traceback.format_exc()}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

async def process_voice_message(voice, chat_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_id = voice["file_id"]
        file_unique_id = voice["file_unique_id"]
        duration = voice.get("duration", 0)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file_url = f"https://api.telegram.org/bot{TOKEN}/getFile?file_id={file_id}"
        async with httpx.AsyncClient() as client:
            resp = await client.get(file_url)
            if resp.status_code != 200:
                logger.error(f"Failed to get file info: {resp.status_code}")
                return None
            
            file_info = resp.json()
            if not file_info.get("ok"):
                logger.error(f"File info error: {file_info}")
                return None
            
            file_path = file_info["result"]["file_path"]
            file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            async with client.stream("GET", file_url) as response:
                if response.status_code != 200:
                    logger.error(f"Failed to download file: {response.status_code}")
                    return None
                
                # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                file_content = await response.aread()
                
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º tempfile
                text_content = await recognize_voice_content(file_content)
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–∏–ø—Å–∏–∫
                if text_content and not any(err in text_content for err in ["–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å", "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"]):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (3600 —Å–µ–∫—É–Ω–¥ = 1 —á–∞—Å)
                    if duration > 3600:
                        await telegram_send_message(chat_id, "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 —á–∞—Å.")
                        return {"ok": True}
                    
                    ai_answer = await ask_chatgpt(text_content)
                    ai_answer = ai_answer.replace('*', '')
                    buttons = extract_links_from_text(ai_answer)
                    ai_answer_clean = remove_html_links(ai_answer)
                    success = await telegram_send_message(chat_id, ai_answer_clean, buttons if buttons else None)
                    if success:
                        logger.info(f"[TG] Sent AI answer to voice message for {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send AI answer to voice message for {chat_id}")
                else:
                    await telegram_send_message(chat_id, text_content)
                return {"ok": True}
                
    except Exception as e:
        logger.error(f"Voice processing error: {e}\n{traceback.format_exc()}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

# --- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ aifc) ---
async def process_voice_message_alternative(voice, chat_id):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ aifc"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_id = voice["file_id"]
        file_unique_id = voice["file_unique_id"]
        duration = voice.get("duration", 0)
        
        # –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
        if duration < 1:
            return "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file_url = f"https://api.telegram.org/bot{TOKEN}/getFile?file_id={file_id}"
        async with httpx.AsyncClient() as client:
            resp = await client.get(file_url)
            if resp.status_code != 200:
                logger.error(f"Failed to get file info: {resp.status_code}")
                return None
            
            file_info = resp.json()
            if not file_info.get("ok"):
                logger.error(f"File info error: {file_info}")
                return None
            
            file_path = file_info["result"]["file_path"]
            file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            async with client.stream("GET", file_url) as response:
                if response.status_code != 200:
                    logger.error(f"Failed to download file: {response.status_code}")
                    return None
                
                # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                file_content = await response.aread()
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –±–µ–∑ aifc
                text_content = await recognize_voice_content(file_content)
                if text_content and not any(err in text_content for err in ["–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å", "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"]):
                    ai_answer = await ask_chatgpt(text_content)
                    return ai_answer
                else:
                    return text_content
                
    except Exception as e:
        logger.error(f"Alternative voice processing error: {e}\n{traceback.format_exc()}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

# --- –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è) ---
async def process_voice_message_simple(voice, chat_id):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_id = voice["file_id"]
        duration = voice.get("duration", 0)
        
        # –ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
        if duration < 1:
            return "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        file_url = f"https://api.telegram.org/bot{TOKEN}/getFile?file_id={file_id}"
        async with httpx.AsyncClient() as client:
            resp = await client.get(file_url)
            if resp.status_code != 200:
                logger.error(f"Failed to get file info: {resp.status_code}")
                return None
            
            file_info = resp.json()
            if not file_info.get("ok"):
                logger.error(f"File info error: {file_info}")
                return None
            
            # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            return f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {duration} —Å–µ–∫—É–Ω–¥. –î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."
                
    except Exception as e:
        logger.error(f"Simple voice processing error: {e}\n{traceback.format_exc()}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."

# --- –§—É–Ω–∫—Ü–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç" ---
async def send_typing_action(chat_id):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendChatAction"
        payload = {
            "chat_id": chat_id,
            "action": "typing"
        }
        timeout = httpx.Timeout(5.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            if resp.status_code != 200:
                logger.error(f"Failed to send typing action: {resp.status_code} - {resp.text}")
    except Exception as e:
        logger.error(f"Failed to send typing action: {e}")

# --- –£–º–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–æ—Ç ---
def is_likely_note(text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ—Ç—ã"""
    if not text:
        return False
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–æ—Ç
    common_notes = [
        '–≤–∞–Ω–∏–ª—å', '–ª–∞–≤–∞–Ω–¥–∞', '—Ä–æ–∑–∞', '–∂–∞—Å–º–∏–Ω', '—Å–∞–Ω–¥–∞–ª', '–º—É—Å–∫—É—Å', '–∞–º–±—Ä–∞', '–ø–∞—á—É–ª–∏',
        '–±–µ—Ä–≥–∞–º–æ—Ç', '–ª–∏–º–æ–Ω', '–∞–ø–µ–ª—å—Å–∏–Ω', '–º–∞–Ω–¥–∞—Ä–∏–Ω', '–≥—Ä–µ–π–ø—Ñ—Ä—É—Ç', '–ª–∞–π–º',
        '–∫–ª—É–±–Ω–∏–∫–∞', '–º–∞–ª–∏–Ω–∞', '—á–µ—Ä–Ω–∏–∫–∞', '–≤–∏—à–Ω—è', '–ø–µ—Ä—Å–∏–∫', '–∞–±—Ä–∏–∫–æ—Å', '—è–±–ª–æ–∫–æ',
        '–≥—Ä—É—à–∞', '–∞–Ω–∞–Ω–∞—Å', '–º–∞–Ω–≥–æ', '–±–∞–Ω–∞–Ω', '–∫–æ–∫–æ—Å', '–∫–∞—Ä–∞–º–µ–ª—å', '—à–æ–∫–æ–ª–∞–¥',
        '–∫–æ—Ñ–µ', '—á–∞–π', '–º—è—Ç–∞', '–±–∞–∑–∏–ª–∏–∫', '—Ä–æ–∑–º–∞—Ä–∏–Ω', '—Ç–∏–º—å—è–Ω', '–æ—Ä–µ–≥–∞–Ω–æ',
        '–∫–æ—Ä–∏—Ü–∞', '–∫–∞—Ä–¥–∞–º–æ–Ω', '–∏–º–±–∏—Ä—å', '–∫—É—Ä–∫—É–º–∞', '–ø–µ—Ä–µ—Ü', '–≥–≤–æ–∑–¥–∏–∫–∞',
        '–∫–µ–¥—Ä', '—Å–æ—Å–Ω–∞', '–µ–ª—å', '–¥—É–±', '–±–µ—Ä–µ–∑–∞', '–∏–ª–∞–Ω–≥-–∏–ª–∞–Ω–≥', '–Ω–µ—Ä–æ–ª–∏',
        '–∏—Ä–∏—Å', '—Ñ–∏–∞–ª–∫–∞', '–ª–∞–Ω–¥—ã—à', '—Å–∏—Ä–µ–Ω—å', '–∂–∞—Å–º–∏–Ω', '–≥–∞—Ä–¥–µ–Ω–∏—è',
        '–º–æ—Ä—Å–∫–∞—è —Å–æ–ª—å', '–º–æ—Ä—Å–∫–æ–π –±—Ä–∏–∑', '–¥–æ–∂–¥—å', '—Å–Ω–µ–≥', '–∑–µ–º–ª—è', '–º–æ—Ö',
        '–¥—ã–º', '–∫–æ–∂–∞', '—Ç–∞–±–∞–∫', '–≤–∏—Å–∫–∏', '–∫–æ–Ω—å—è–∫', '—Ä–æ–º', '–≤–∏–Ω–æ',
        '–º–µ–¥', '—Å–ª–∏–≤–∫–∏', '–º–æ–ª–æ–∫–æ', '–π–æ–≥—É—Ä—Ç', '—Å—ã—Ä', '–º–∞—Å–ª–æ'
    ]
    
    text_lower = text.lower().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if text_lower in common_notes:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for note in common_notes:
        if note in text_lower or text_lower in note:
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –¥–ª–∏–Ω–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É (–∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ —á–∞—Å—Ç–æ –±—ã–≤–∞—é—Ç –Ω–æ—Ç–∞–º–∏)
    if len(text_lower) <= 15 and not any(char.isdigit() for char in text_lower):
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –Ω–æ—Ç–∞
        return True
    
    return False

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ ---
import re

def extract_links_from_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –∏–∑ HTML-—Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏"""
    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <a href='URL'>–¢–ï–ö–°–¢</a>
    link_pattern = r"<a\s+href=['\"]([^'\"]+)['\"][^>]*>([^<]+)</a>"
    links = re.findall(link_pattern, text)
    
    if not links:
        return None
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
    buttons = []
    for url, button_text in links:
        # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
        button_text_capitalized = button_text.strip().capitalize()
        buttons.append([{"text": button_text_capitalized, "url": url}])
    
    return {"inline_keyboard": buttons}

def remove_html_links(text):
    """–£–¥–∞–ª—è–µ—Ç HTML-—Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"""
    # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <a href='URL'>–¢–ï–ö–°–¢</a>, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –¢–ï–ö–°–¢
    link_pattern = r"<a\s+href=['\"][^'\"]+['\"][^>]*>([^<]+)</a>"
    return re.sub(link_pattern, r"\1", text)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            chat_id INTEGER,
            first_name TEXT,
            last_name TEXT,
            username TEXT,
            is_active INTEGER DEFAULT 1,
            last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            weekly_message_sent TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()

def add_user_to_db(user_id, chat_id, first_name=None, last_name=None, username=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR REPLACE INTO users 
        (user_id, chat_id, first_name, last_name, username, last_activity)
        VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
    ''', (user_id, chat_id, first_name, last_name, username))
    
    conn.commit()
    conn.close()

def get_all_active_users():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT user_id, chat_id FROM users 
        WHERE is_active = 1
    ''')
    
    users = cursor.fetchall()
    conn.close()
    return users

def update_weekly_message_sent(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    conn = sqlite3.connect('bot_users.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        UPDATE users 
        SET weekly_message_sent = CURRENT_TIMESTAMP
        WHERE user_id = ?
    ''', (user_id,))
    
    conn.commit()
    conn.close()

async def send_weekly_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info("Starting weekly message broadcast...")
    
    weekly_messages = [
        "üêÜ –ü—Ä–∏–≤–µ—Ç! –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –Ω–æ–≤—ã–µ –∞—Ä–æ–º–∞—Ç—ã! –ß—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? ‚ú®",
        "üåü –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! AI-–ü–∞–Ω—Ç–µ—Ä–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –∞—Ä–æ–º–∞—Ç–æ–≤ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é! üêÜ",
        "üí´ –ü—Ä–∏–≤–µ—Ç, –∞—Ä–æ–º–∞—Ç–Ω—ã–π –¥—Ä—É–≥! –ù–∞—á–∏–Ω–∞–µ–º –Ω–µ–¥–µ–ª—é —Å –ø–æ–∏—Å–∫–∞ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Ñ—é–º–∞! üêÜ‚ú®",
        "üéØ –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! –ö–∞–∫–∏–µ –∞—Ä–æ–º–∞—Ç—ã –±—É–¥–µ–º –∏–∑—É—á–∞—Ç—å? üêÜüíé",
        "üåà –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –¥–µ–Ω—å –Ω–æ–≤—ã—Ö –∞—Ä–æ–º–∞—Ç–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π! –Ø –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å! üêÜüåü"
    ]
    
    message = random.choice(weekly_messages)
    users = get_all_active_users()
    
    successful_sends = 0
    failed_sends = 0
    
    for user_id, chat_id in users:
        try:
            success = await telegram_send_message(chat_id, message)
            if success:
                update_weekly_message_sent(user_id)
                successful_sends += 1
                logger.info(f"Weekly message sent to user {user_id}")
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.1)
            else:
                failed_sends += 1
                logger.error(f"Failed to send weekly message to user {user_id}")
        except Exception as e:
            failed_sends += 1
            logger.error(f"Error sending weekly message to user {user_id}: {e}")
    
    logger.info(f"Weekly message broadcast completed. Success: {successful_sends}, Failed: {failed_sends}")

def schedule_weekly_messages():
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 7:00"""
    schedule.every().monday.at("07:00").do(lambda: asyncio.create_task(send_weekly_message()))
    
    def run_scheduler():
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    logger.info("Weekly message scheduler started - messages will be sent every Monday at 7:00 AM")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_database()

# --- Telegram webhook endpoint ---
print('=== [LOG] –û–±—ä—è–≤–ª—è—é —ç–Ω–¥–ø–æ–∏–Ω—Ç webhook... ===')
@app.post("/webhook/ai-bear-123456")
async def telegram_webhook(update: dict, request: Request):
    logger.info(f"=== WEBHOOK CALLED ===")
    logger.info(f"Request from: {request.client.host}")
    logger.info(f"Update type: {list(update.keys()) if update else 'None'}")
    
    try:
        result = await telegram_webhook_impl(update, request)
        logger.info(f"=== WEBHOOK COMPLETED SUCCESSFULLY ===")
        return result
    except Exception as e:
        logger.error(f"=== WEBHOOK FAILED: {e} ===")
        logger.error(traceback.format_exc())
        return {"ok": False, "error": str(e)}

# --- –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–∞—à—É –ª–æ–≥–∏–∫—É webhook —Å—é–¥–∞ ---
async def telegram_webhook_impl(update: dict, request: Request):
    print(f'[WEBHOOK] Called: {request.url} from {request.client.host}')
    print(f'[WEBHOOK] Body: {update}')
    logger.info(f"[WEBHOOK] Called: {request.url} from {request.client.host}")
    logger.info(f"[WEBHOOK] Body: {update}")
    try:
        if "message" in update:
            print('[WEBHOOK] message detected')
            message = update["message"]
            chat_id = message["chat"]["id"]
            user_id = message["from"]["id"]
            text = message.get("text", "").strip()
            voice = message.get("voice")
            state = get_user_state(user_id)
            logger.info(f"[TG] user_id: {user_id}, text: {text}, state: {state}")
            
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if voice:
                    logger.info(f"[TG] Voice message received from {user_id}")
                    await send_typing_action(chat_id)
                    file_id = voice["file_id"]
                    file_unique_id = voice["file_unique_id"]
                    duration = voice.get("duration", 0)
                    file_url = f"https://api.telegram.org/bot{TOKEN}/getFile?file_id={file_id}"
                    async with httpx.AsyncClient() as client:
                        resp = await client.get(file_url)
                        if resp.status_code != 200:
                            logger.error(f"Failed to get file info: {resp.status_code}")
                            await telegram_send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.")
                            return {"ok": True}
                        file_info = resp.json()
                        if not file_info.get("ok"):
                            logger.error(f"File info error: {file_info}")
                            await telegram_send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.")
                            return {"ok": True}
                        file_path = file_info["result"]["file_path"]
                        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
                        async with client.stream("GET", file_url) as response:
                            if response.status_code != 200:
                                logger.error(f"Failed to download file: {response.status_code}")
                                await telegram_send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.")
                                return {"ok": True}
                            file_content = await response.aread()
                            text_content = await recognize_voice_content(file_content)
                            logger.info(f"[TG] Voice recognized text: {text_content}")
                            if text_content and not any(err in text_content for err in ["–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å", "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"]):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (3600 —Å–µ–∫—É–Ω–¥ = 1 —á–∞—Å)
                                if duration > 3600:
                                    await telegram_send_message(chat_id, "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1 —á–∞—Å.")
                                    return {"ok": True}
                                
                                ai_answer = await ask_chatgpt(text_content)
                                ai_answer = ai_answer.replace('*', '')
                                buttons = extract_links_from_text(ai_answer)
                                ai_answer_clean = remove_html_links(ai_answer)
                                success = await telegram_send_message(chat_id, ai_answer_clean, buttons if buttons else None)
                                if success:
                                    logger.info(f"[TG] Sent AI answer to voice message for {chat_id}")
                                else:
                                    logger.error(f"[TG] Failed to send AI answer to voice message for {chat_id}")
                            else:
                                await telegram_send_message(chat_id, text_content)
                    return {"ok": True}
                
                if text == "/start":
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    user_info = message.get("from", {})
                    add_user_to_db(
                        user_id, 
                        chat_id, 
                        user_info.get("first_name"), 
                        user_info.get("last_name"), 
                        user_info.get("username")
                    )
                    
                    welcome = (
                        '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n'
                        '–Ø ‚Äî –≤–∞—à –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç BAHUR.\n'
                        'üçì –ò—â—É –Ω–æ—Ç—ã –∏ üêÜ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≤—å—é. ‚ù§\n\n'
                        'üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i></b>'
                    )
                    main_menu = {
                        "inline_keyboard": [
                            [{"text": "üêÜ AI-–ü–∞–Ω—Ç–µ—Ä–∞", "callback_data": "ai"}],
                            [
                                {"text": "üç¶ –ü—Ä–∞–π—Å", "url": "https://drive.google.com/file/d/1J70LlZwh6g7JOryDG2br-weQrYfv6zTc/view?usp=sharing"},
                                {"text": "üçø –ú–∞–≥–∞–∑–∏–Ω", "url": "https://www.bahur.store/m/"},
                                {"text": "‚ôæÔ∏è –í–æ–ø—Ä–æ—Å—ã", "url": "https://vk.com/@bahur_store-optovye-praisy-ot-bahur"}
                            ],
                            [
                                {"text": "üéÆ –ß–∞—Ç", "url": "https://t.me/+VYDZEvbp1pce4KeT"},
                                {"text": "üíé –°—Ç–∞—Ç—å–∏", "url": "https://vk.com/bahur_store?w=app6326142_-133936126%2523w%253Dapp6326142_-133936126"},
                                {"text": "üèÜ –û—Ç–∑—ã–≤—ã", "url": "https://vk.com/@bahur_store"}
                            ],
                            [{"text": "üçì –ù–æ—Ç—ã", "callback_data": "instruction"}]
                        ]
                    }
                    success = await telegram_send_message(chat_id, welcome, main_menu)
                    if success:
                        logger.info(f"[TG] Sent welcome to {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send welcome to {chat_id}")
                    set_user_state(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ /start
                    return {"ok": True}
                elif text == "/menu":
                    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ AI –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    welcome = (
                        '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n'
                        '–Ø ‚Äî –≤–∞—à –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç BAHUR.\n'
                        'üçì –ò—â—É –Ω–æ—Ç—ã –∏ üêÜ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≤—å—é. ‚ù§\n\n'
                        'üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</i></b>'
                    )
                    main_menu = {
                        "inline_keyboard": [
                            [{"text": "üêÜ AI-–ü–∞–Ω—Ç–µ—Ä–∞", "callback_data": "ai"}],
                            [
                                {"text": "üç¶ –ü—Ä–∞–π—Å", "url": "https://drive.google.com/file/d/1J70LlZwh6g7JOryDG2br-weQrYfv6zTc/view?usp=sharing"},
                                {"text": "üçø –ú–∞–≥–∞–∑–∏–Ω", "url": "https://www.bahur.store/m/"},
                                {"text": "‚ôæÔ∏è –í–æ–ø—Ä–æ—Å—ã", "url": "https://vk.com/@bahur_store-optovye-praisy-ot-bahur"}
                            ],
                            [
                                {"text": "üéÆ –ß–∞—Ç", "url": "https://t.me/+VYDZEvbp1pce4KeT"},
                                {"text": "üíé –°—Ç–∞—Ç—å–∏", "url": "https://vk.com/bahur_store?w=app6326142_-133936126%2523w%253Dapp6326142_-133936126"},
                                {"text": "üèÜ –û—Ç–∑—ã–≤—ã", "url": "https://vk.com/@bahur_store"}
                            ],
                            [{"text": "üçì –ù–æ—Ç—ã", "callback_data": "instruction"}]
                        ]
                    }
                    success = await telegram_send_message(chat_id, welcome, main_menu)
                    if success:
                        logger.info(f"[TG] Sent menu to {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send menu to {chat_id}")
                    set_user_state(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    return {"ok": True}
                if state == 'awaiting_ai_question':
                    logger.info(f"[TG] Processing AI question for user {user_id}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
                    await send_typing_action(chat_id)
                    ai_answer = await ask_chatgpt(text, user_id)
                    ai_answer = ai_answer.replace('*', '')
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
                    buttons = extract_links_from_text(ai_answer)
                    ai_answer_clean = remove_html_links(ai_answer)
                    
                    success = await telegram_send_message(chat_id, ai_answer_clean, buttons if buttons else None)
                    if success:
                        logger.info(f"[TG] Sent ai_answer to {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send ai_answer to {chat_id}")
                    # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º–µ AI
                    return {"ok": True}
                if state == 'awaiting_note_search':
                    logger.info(f"[TG] Processing note search for user {user_id}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
                    await send_typing_action(chat_id)
                    result = await search_note_api(text)
                    if result.get("status") == "success":
                        msg = f'‚ú® {result.get("brand")} {result.get("aroma")}\n\n{result.get("description")}'
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
                        reply_markup = {
                            "inline_keyboard": [
                                [
                                    {"text": "üöÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "url": result.get("url", "")},
                                    {"text": "‚ôæÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "callback_data": f"repeatapi_{result.get('ID', '')}"}
                                ]
                            ]
                        }
                        success = await telegram_send_message(chat_id, msg, reply_markup)
                        if success:
                            logger.info(f"[TG] Sent note result to {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to send note result to {chat_id}")
                    else:
                        success = await telegram_send_message(chat_id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢")
                        if success:
                            logger.info(f"[TG] Sent not found to {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to send not found to {chat_id}")
                    set_user_state(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    return {"ok": True}
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ—Ç—É
                if is_likely_note(text):
                    logger.info(f"[TG] Text '{text}' looks like a note, searching...")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
                    await send_typing_action(chat_id)
                    result = await search_note_api(text)
                    if result.get("status") == "success":
                        msg = f'‚ú® {result.get("brand")} {result.get("aroma")}\n\n{result.get("description")}'
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
                        reply_markup = {
                            "inline_keyboard": [
                                [
                                    {"text": "üöÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "url": result.get("url", "")},
                                    {"text": "‚ôæÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "callback_data": f"repeatapi_{result.get('ID', '')}"}
                                ]
                            ]
                        }
                        success = await telegram_send_message(chat_id, msg, reply_markup)
                        if success:
                            logger.info(f"[TG] Auto-found note result for {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to send auto-found note result to {chat_id}")
                    else:
                        success = await telegram_send_message(chat_id, f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–æ—Ç—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞.")
                        if success:
                            logger.info(f"[TG] Sent auto-search not found to {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to send auto-search not found to {chat_id}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ—Ç—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º
                    menu = {
                        "inline_keyboard": [
                            [{"text": "üêÜ AI-–ü–∞–Ω—Ç–µ—Ä–∞", "callback_data": "ai"}],
                            [{"text": "üçì –ù–æ—Ç—ã", "callback_data": "instruction"}]
                        ]
                    }
                    success = await telegram_send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: üêÜ AI-–ü–∞–Ω—Ç–µ—Ä–∞ –∏–ª–∏ üçì –ù–æ—Ç—ã", reply_markup=menu)
                    if success:
                        logger.info(f"[TG] Sent menu to {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send menu to {chat_id}")
                set_user_state(user_id, None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                return {"ok": True}
            except Exception as e:
                logger.error(f"[TG] Exception in message processing: {e}\n{traceback.format_exc()}")
                try:
                    await telegram_send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except:
                    logger.error("Failed to send error message to user")
                return {"ok": False, "error": str(e)}
                
        elif "callback_query" in update:
            print('[WEBHOOK] callback_query detected')
            callback = update["callback_query"]
            data = callback["data"]
            chat_id = callback["message"]["chat"]["id"]
            user_id = callback["from"]["id"]
            message_id = callback["message"]["message_id"]
            callback_id = callback["id"]
            logger.info(f"[TG] Callback: {data} from {user_id}")
            
            try:
                if data == "instruction":
                    set_user_state(user_id, 'awaiting_note_search')
                    success = await telegram_edit_message(chat_id, message_id, 'üçâ –ù–∞–ø–∏—à–∏ –ª—é–±—É—é –Ω–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–ø–µ–ª—å—Å–∏–Ω, –∫–ª—É–±–Ω–∏–∫–∞) ‚Äî —è –Ω–∞–π–¥—É –∞—Ä–æ–º–∞—Ç—ã —Å —ç—Ç–æ–π –Ω–æ—Ç–æ–π!')
                    if success:
                        logger.info(f"[TG] Set state awaiting_note_search for {user_id}")
                    else:
                        logger.error(f"[TG] Failed to edit instruction message for {chat_id}")
                    await telegram_answer_callback_query(callback_id)
                    return {"ok": True}
                elif data == "ai":
                    set_user_state(user_id, 'awaiting_ai_question')
                    ai_greeting = greet()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
                    buttons = extract_links_from_text(ai_greeting)
                    ai_greeting_clean = remove_html_links(ai_greeting)
                    
                    success = await telegram_edit_message(chat_id, message_id, ai_greeting_clean, buttons if buttons else None)
                    if success:
                        logger.info(f"[TG] Set state awaiting_ai_question for {user_id}")
                    else:
                        logger.error(f"[TG] Failed to edit ai greeting for {chat_id}")
                    await telegram_answer_callback_query(callback_id)
                    return {"ok": True}
                elif data.startswith("repeatapi_"):
                    aroma_id = data.split('_', 1)[1]
                    result = await search_by_id_api(aroma_id)
                    if result.get("status") == "success":
                        msg = f'‚ú® {result.get("brand")} {result.get("aroma")}\n\n{result.get("description")}'
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–∫–∞–∑–µ
                        reply_markup = {
                            "inline_keyboard": [
                                [
                                    {"text": "üöÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "url": result.get("url", "")},
                                    {"text": "‚ôæÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "callback_data": f"repeatapi_{result.get('ID', '')}"}
                                ]
                            ]
                        }
                        success = await telegram_edit_message(chat_id, message_id, msg, reply_markup)
                        if success:
                            logger.info(f"[TG] Edited repeatapi result for {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to edit repeatapi result for {chat_id}")
                    else:
                        success = await telegram_edit_message(chat_id, message_id, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢")
                        if success:
                            logger.info(f"[TG] Edited repeatapi not found for {chat_id}")
                        else:
                            logger.error(f"[TG] Failed to edit repeatapi not found for {chat_id}")
                    await telegram_answer_callback_query(callback_id)
                    return {"ok": True}
                else:
                    success = await telegram_send_message(chat_id, "Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
                    if success:
                        logger.info(f"[TG] Sent generic callback to {chat_id}")
                    else:
                        logger.error(f"[TG] Failed to send generic callback to {chat_id}")
                    return {"ok": True}
            except Exception as e:
                logger.error(f"[TG] Exception in callback processing: {e}\n{traceback.format_exc()}")
                try:
                    await telegram_send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                except:
                    logger.error("Failed to send error message to user")
                return {"ok": False, "error": str(e)}
        else:
            print('[WEBHOOK] unknown update type')
            logger.warning("[TG] Unknown update type")
            return {"ok": False}
    except Exception as e:
        print(f'[WEBHOOK] Exception: {e}')
        logger.error(f"[TG] Exception in webhook: {e}\n{traceback.format_exc()}")
        # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç chat_id
        return {"ok": False, "error": str(e)}
print('=== [LOG] –≠–Ω–¥–ø–æ–∏–Ω—Ç webhook –æ–±—ä—è–≤–ª–µ–Ω ===')

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram webhook ---
async def set_telegram_webhook(base_url: str):
    url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
    webhook_url = f"{base_url}{WEBHOOK_PATH}"
    async with httpx.AsyncClient() as client:
        resp = await client.post(url, data={"url": webhook_url})
        logger.info(f"Set webhook response: {resp.text}")
        return resp.json()

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã FastAPI ---
@app.on_event("startup")
async def startup_event():
    logger.info("=== STARTUP EVENT ===")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    schedule_weekly_messages()
    
    base_url = os.getenv("WEBHOOK_BASE_URL")
    if not base_url:
        logger.warning("WEBHOOK_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω, webhook –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    try:
        result = await set_telegram_webhook(base_url)
        logger.info(f"Webhook set result: {result}")
    except Exception as e:
        logger.error(f"Failed to set webhook: {e}\n{traceback.format_exc()}")
    logger.info("=== STARTUP EVENT COMPLETE ===")

@app.on_event("shutdown")
async def shutdown_event():
    logger.info("=== SHUTDOWN EVENT ===")
    logger.info("Application is shutting down gracefully...")
    logger.info("=== SHUTDOWN EVENT COMPLETE ===")

@app.get("/")
async def healthcheck():
    logger.info("Healthcheck requested")
    return PlainTextResponse("OK")

@app.post("/message")
async def handle_message(msg: MessageModel):
    user_id = msg.user_id
    text = msg.text.strip()
    state = get_user_state(user_id)
    logger.info(f"[SUPERLOG] user_id: {user_id}, text: {text}, state: {state}")
    try:
        if state == 'awaiting_ai_question':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç" (–Ω–æ –∑–¥–µ—Å—å –Ω–µ—Ç chat_id, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
            ai_answer = await ask_chatgpt(text, user_id)
            ai_answer = ai_answer.replace('*', '')
            return JSONResponse({"answer": ai_answer, "parse_mode": "HTML"})
        elif state == 'awaiting_note_search':
            result = await search_note_api(text)
            if result.get("status") == "success":
                return JSONResponse({
                    "brand": result.get("brand"),
                    "aroma": result.get("aroma"),
                    "description": result.get("description"),
                    "url": result.get("url"),
                    "aroma_id": result.get("ID")
                })
            else:
                return JSONResponse({"error": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢"})
        else:
            return JSONResponse({"info": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ callback."})
    except Exception as e:
        logger.error(f"[SUPERLOG] Exception in handle_message: {e}\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/callback")
async def handle_callback(cb: CallbackModel):
    user_id = cb.user_id
    data = cb.data
    logger.info(f"[SUPERLOG] Callback data: {data}, user_id: {user_id}")
    try:
        if data != 'ai' and user_id in user_states:
            user_states.pop(user_id, None)
        if data == 'instruction':
            set_user_state(user_id, 'awaiting_note_search')
            return JSONResponse({"text": 'üçâ –ù–∞–ø–∏—à–∏ –ª—é–±—É—é –Ω–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–ø–µ–ª—å—Å–∏–Ω, –∫–ª—É–±–Ω–∏–∫–∞) ‚Äî —è –Ω–∞–π–¥—É –∞—Ä–æ–º–∞—Ç—ã —Å —ç—Ç–æ–π –Ω–æ—Ç–æ–π!'} )
        elif data == 'ai':
            set_user_state(user_id, 'awaiting_ai_question')
            result = greet()
            return JSONResponse({"text": result})
        elif data.startswith('repeatapi_'):
            aroma_id = data.split('_', 1)[1]
            result = await search_by_id_api(aroma_id)
            if result.get("status") == "success":
                return JSONResponse({
                    "brand": result.get("brand"),
                    "aroma": result.get("aroma"),
                    "description": result.get("description"),
                    "url": result.get("url"),
                    "aroma_id": result.get("ID")
                })
            else:
                return JSONResponse({"error": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–π –Ω–æ—Ç–µ üò¢"})
        else:
            return JSONResponse({"info": "Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω."})
    except Exception as e:
        logger.error(f"[SUPERLOG] Exception in handle_callback: {e}\n{traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/start")
async def cmd_start(msg: MessageModel):
    logger.info(f"/start command from user {msg.user_id}")
    text = (
        '<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n'
        '–Ø ‚Äî –≤–∞—à –∞—Ä–æ–º–∞—Ç–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç BAHUR.\n'
        'üçì –ò—â—É –Ω–æ—Ç—ã –∏ üêÜ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≤—å—é. ‚ù§</b>'
    )
    return JSONResponse({"text": text, "parse_mode": "HTML"})

# --- –î–ª—è –∑–∞–ø—É—Å–∫–∞: uvicorn 1:app --reload ---
if __name__ == "__main__":
    import signal
    
    def signal_handler(signum, frame):
        logger.info("Received shutdown signal, gracefully shutting down...")
        sys.exit(0)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    port = int(os.environ.get("PORT", 8000))
    print(f"[INFO] Starting uvicorn on 0.0.0.0:{port}")
    uvicorn.run("1:app", host="0.0.0.0", port=port)