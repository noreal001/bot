import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional

class ConversationContext:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, max_messages: int = 10, context_file: str = "conversation_context.json"):
        self.max_messages = max_messages
        self.context_file = context_file
        self.conversations: Dict[int, List[dict]] = {}
        self.load_context()
    
    def load_context(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.context_file):
                with open(self.context_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int
                    self.conversations = {int(k): v for k, v in data.items()}
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è {len(self.conversations)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            else:
                print("–§–∞–π–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            self.conversations = {}
    
    def save_context(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.context_file, 'w', encoding='utf-8') as f:
                json.dump(self.conversations, f, ensure_ascii=False, indent=2)
            print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {len(self.conversations)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
    
    def add_message(self, user_id: int, role: str, content: str, timestamp: Optional[datetime] = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if timestamp is None:
            timestamp = datetime.now()
        
        message = {
            "role": role,
            "content": content,
            "timestamp": timestamp.isoformat()
        }
        
        if user_id not in self.conversations:
            self.conversations[user_id] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.conversations[user_id].append(message)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(self.conversations[user_id]) > self.max_messages:
            self.conversations[user_id] = self.conversations[user_id][-self.max_messages:]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.save_context()
        
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.conversations[user_id])}")
    
    def get_context(self, user_id: int) -> List[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.conversations.get(user_id, [])
    
    def get_context_for_ai(self, user_id: int) -> List[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è OpenAI API"""
        context = self.get_context(user_id)
        # –£–±–∏—Ä–∞–µ–º timestamp –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
        ai_context = []
        for msg in context:
            ai_context.append({
                "role": msg["role"],
                "content": msg["content"]
            })
        return ai_context
    
    def clear_context(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.conversations:
            del self.conversations[user_id]
            self.save_context()
            print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω")
    
    def get_user_stats(self, user_id: int) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        context = self.get_context(user_id)
        if not context:
            return {"message_count": 0, "last_message": None}
        
        return {
            "message_count": len(context),
            "last_message": context[-1]["timestamp"] if context else None,
            "user_messages": len([msg for msg in context if msg["role"] == "user"]),
            "assistant_messages": len([msg for msg in context if msg["role"] == "assistant"])
        }
    
    def cleanup_old_contexts(self, days: int = 30):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)"""
        cutoff_date = datetime.now() - timedelta(days=days)
        users_to_remove = []
        
        for user_id, messages in self.conversations.items():
            if messages:
                last_message_time = datetime.fromisoformat(messages[-1]["timestamp"])
                if last_message_time < cutoff_date:
                    users_to_remove.append(user_id)
        
        for user_id in users_to_remove:
            del self.conversations[user_id]
        
        if users_to_remove:
            self.save_context()
            print(f"–£–¥–∞–ª–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã {len(users_to_remove)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    def get_all_users(self) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        return list(self.conversations.keys())
    
    def get_total_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_users = len(self.conversations)
        total_messages = sum(len(messages) for messages in self.conversations.values())
        
        return {
            "total_users": total_users,
            "total_messages": total_messages,
            "average_messages_per_user": total_messages / total_users if total_users > 0 else 0
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
conversation_context = ConversationContext(max_messages=10)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
def add_user_message(user_id: int, content: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
    conversation_context.add_message(user_id, "user", content)

def add_assistant_message(user_id: int, content: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
    conversation_context.add_message(user_id, "assistant", content)

def get_user_context(user_id: int) -> List[dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è OpenAI API"""
    return conversation_context.get_context_for_ai(user_id)

def clear_user_context(user_id: int):
    """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conversation_context.clear_context(user_id)

def get_user_conversation_stats(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return conversation_context.get_user_stats(user_id)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    test_user_id = 12345
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    add_user_message(test_user_id, "–ü—Ä–∏–≤–µ—Ç!")
    add_assistant_message(test_user_id, "–ü—Ä–∏–≤–µ—Ç! üêÜ –ö–∞–∫ –¥–µ–ª–∞?")
    add_user_message(test_user_id, "–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!")
    add_assistant_message(test_user_id, "–û—Ç–ª–∏—á–Ω–æ! ‚ú® –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = get_user_context(test_user_id)
    print(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}:")
    for msg in context:
        print(f"  {msg['role']}: {msg['content']}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_user_conversation_stats(test_user_id)
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    clear_user_context(test_user_id)
    print("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω")
