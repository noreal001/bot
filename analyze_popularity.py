#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞—Ä–æ–º–∞—Ç–æ–≤ –∏–∑ –ø—Ä–∞–π—Å–∞
"""

import pandas as pd
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from importlib import import_module
import importlib.util

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –∏–∑ 1.py
spec = importlib.util.spec_from_file_location("bot_module", "1.py")
bot_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(bot_module)

def analyze_popularity():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞—Ä–æ–º–∞—Ç—ã"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–π—Å–∞...")
        df = bot_module.load_excel_data()
        
        if df is None or df.empty:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∞—Ä–æ–º–∞—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        if 'TOP LAST' not in df.columns or 'TOP ALL' not in df.columns:
            print("‚ùå –°—Ç–æ–ª–±—Ü—ã –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 6 –º–µ—Å—è—Ü–∞–º
        print("\nüî• –¢–û–ü-10 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞—Ä–æ–º–∞—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤):")
        print("=" * 80)
        
        top_last = df.sort_values('TOP LAST', ascending=False).head(10)
        for i, (_, row) in enumerate(top_last.iterrows(), 1):
            brand = row.get('–ë—Ä–µ–Ω–¥', 'N/A')
            aroma = row.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
            factory = row.get('–§–∞–±—Ä–∏–∫–∞', 'N/A')
            quality = row.get('–ö–∞—á–µ—Å—Ç–≤–æ', 'N/A')
            popularity = row.get('TOP LAST', 0)
            
            print(f"{i:2d}. {brand} - {aroma}")
            print(f"    üè≠ {factory} | ‚≠ê {quality} | üìà {popularity:.2f}%")
            print()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
        print("\nüåü –¢–û–ü-10 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞—Ä–æ–º–∞—Ç–æ–≤ (–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è):")
        print("=" * 80)
        
        top_all = df.sort_values('TOP ALL', ascending=False).head(10)
        for i, (_, row) in enumerate(top_all.iterrows(), 1):
            brand = row.get('–ë—Ä–µ–Ω–¥', 'N/A')
            aroma = row.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
            factory = row.get('–§–∞–±—Ä–∏–∫–∞', 'N/A')
            quality = row.get('–ö–∞—á–µ—Å—Ç–≤–æ', 'N/A')
            popularity = row.get('TOP ALL', 0)
            
            print(f"{i:2d}. {brand} - {aroma}")
            print(f"    üè≠ {factory} | ‚≠ê {quality} | üìà {popularity:.2f}%")
            print()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–∞–±—Ä–∏–∫–∞–º
        print("\nüè≠ –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø–æ —Ñ–∞–±—Ä–∏–∫–∞–º (TOP LAST):")
        print("=" * 50)
        factory_stats = df.groupby('–§–∞–±—Ä–∏–∫–∞')['TOP LAST'].agg(['mean', 'sum', 'count']).sort_values('sum', ascending=False)
        for factory, stats in factory_stats.iterrows():
            print(f"{factory}: {stats['sum']:.2f}% (—Å—Ä–µ–¥–Ω–µ–µ: {stats['mean']:.2f}%, —Ç–æ–≤–∞—Ä–æ–≤: {stats['count']})")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        print("\n‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (TOP LAST):")
        print("=" * 50)
        quality_stats = df.groupby('–ö–∞—á–µ—Å—Ç–≤–æ')['TOP LAST'].agg(['mean', 'sum', 'count']).sort_values('sum', ascending=False)
        for quality, stats in quality_stats.iterrows():
            print(f"{quality}: {stats['sum']:.2f}% (—Å—Ä–µ–¥–Ω–µ–µ: {stats['mean']:.2f}%, —Ç–æ–≤–∞—Ä–æ–≤: {stats['count']})")
        
        # –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∞—Ä–æ–º–∞—Ç
        most_popular_last = df.loc[df['TOP LAST'].idxmax()]
        most_popular_all = df.loc[df['TOP ALL'].idxmax()]
        
        print("\nüèÜ –°–ê–ú–´–ô –ü–û–ü–£–õ–Ø–†–ù–´–ô –ê–†–û–ú–ê–¢:")
        print("=" * 50)
        print(f"üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤:")
        print(f"   {most_popular_last['–ë—Ä–µ–Ω–¥']} - {most_popular_last['–ê—Ä–æ–º–∞—Ç']}")
        print(f"   üè≠ {most_popular_last['–§–∞–±—Ä–∏–∫–∞']} | ‚≠ê {most_popular_last['–ö–∞—á–µ—Å—Ç–≤–æ']}")
        print(f"   üìä –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {most_popular_last['TOP LAST']:.2f}%")
        
        print(f"\nüìà –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:")
        print(f"   {most_popular_all['–ë—Ä–µ–Ω–¥']} - {most_popular_all['–ê—Ä–æ–º–∞—Ç']}")
        print(f"   üè≠ {most_popular_all['–§–∞–±—Ä–∏–∫–∞']} | ‚≠ê {most_popular_all['–ö–∞—á–µ—Å—Ç–≤–æ']}")
        print(f"   üìä –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {most_popular_all['TOP ALL']:.2f}%")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    analyze_popularity() 