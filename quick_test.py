#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
"""

import pandas as pd
import requests
import io
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def quick_test():
    print('üîç –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ü–†–û–ë–õ–ï–ú')
    print('=' * 50)
    
    try:
        # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é
        print('1Ô∏è‚É£ –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò GOOGLE SHEETS')
        
        GOOGLE_SHEETS_URL = 'https://docs.google.com/spreadsheets/d/1rvb3QdanuukCyXnoQZZxz7HF6aJXm2de/export?format=xlsx&gid=1870986273'
        session = requests.Session()
        session.verify = False
        
        response = session.get(GOOGLE_SHEETS_URL, timeout=30)
        df = pd.read_excel(io.BytesIO(response.content), header=2, skiprows=[3])
        
        print(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}')
        print(f'üìä –°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        df = df.dropna(how='all')
        df = df[df.iloc[:, 5].notna() & df.iloc[:, 6].notna()]
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–æ–ª–±—Ü–æ–≤
        column_mapping = {
            df.columns[5]: '–ë—Ä–µ–Ω–¥',
            df.columns[6]: '–ê—Ä–æ–º–∞—Ç',
            df.columns[7]: '–ü–æ–ª',
            df.columns[8]: '–§–∞–±—Ä–∏–∫–∞',
            df.columns[9]: '–ö–∞—á–µ—Å—Ç–≤–æ',
            df.columns[10]: '30 GR',
            df.columns[11]: '50 GR',
            df.columns[12]: '500 GR',
            df.columns[13]: '1 KG',
        }
        
        if len(df.columns) > 15:
            column_mapping[df.columns[15]] = 'TOP LAST'
        if len(df.columns) > 16:
            column_mapping[df.columns[16]] = 'TOP ALL'
        
        df = df.rename(columns=column_mapping)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–µ–Ω
        price_columns = ['30 GR', '50 GR', '500 GR', '1 KG']
        for col in price_columns:
            if col in df.columns:
                df[col] = df[col].astype(str).str.replace('‚ÇΩ', '').str.replace(' ', '').str.replace('nan', '')
                df[col] = pd.to_numeric(df[col], errors='coerce')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        if 'TOP LAST' in df.columns:
            df['TOP LAST'] = pd.to_numeric(df['TOP LAST'], errors='coerce') / 100
        
        df = df[df['–ë—Ä–µ–Ω–¥'].notna() & df['–ê—Ä–æ–º–∞—Ç'].notna()]
        
        print(f'‚úÖ –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(df)} —Ç–æ–≤–∞—Ä–æ–≤')
        print(f'üìã –ò—Ç–æ–≥–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {list(df.columns)}')
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        print('\n2Ô∏è‚É£ –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê –¢–û–í–ê–†–û–í')
        quality_values = df['–ö–∞—á–µ—Å—Ç–≤–æ'].unique()[:10]
        print(f'‚≠ê –ü—Ä–∏–º–µ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞: {list(quality_values)}')
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¢–û–ü —Ç–æ–≤–∞—Ä–æ–≤
        print('\n3Ô∏è‚É£ –¢–ï–°–¢ –¢–û–ü –¢–û–í–ê–†–û–í')
        if 'TOP LAST' in df.columns:
            top_df = df.nlargest(3, 'TOP LAST')
            print('üî• –¢–û–ü-3 —Ç–æ–≤–∞—Ä–∞:')
            for i, (idx, row) in enumerate(top_df.iterrows(), 1):
                brand = row.get('–ë—Ä–µ–Ω–¥', 'N/A')
                aroma = row.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
                quality = row.get('–ö–∞—á–µ—Å—Ç–≤–æ', 'N/A')
                popularity = row.get('TOP LAST', 0)
                print(f'  {i}. {brand} - {aroma} (–∫–∞—á–µ—Å—Ç–≤–æ: {quality}, –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {popularity*100:.2f}%)')
        else:
            print('‚ùå –°—Ç–æ–ª–±–µ—Ü TOP LAST –Ω–µ –Ω–∞–π–¥–µ–Ω')
            top_df = df.head(3)
            print('üìã –ü–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞:')
            for i, (idx, row) in enumerate(top_df.iterrows(), 1):
                brand = row.get('–ë—Ä–µ–Ω–¥', 'N/A')
                aroma = row.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
                quality = row.get('–ö–∞—á–µ—Å—Ç–≤–æ', 'N/A')
                print(f'  {i}. {brand} - {aroma} (–∫–∞—á–µ—Å—Ç–≤–æ: {quality})')
        
        # –¢–µ—Å—Ç 4: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô - –†–∞—Å—á–µ—Ç —Ü–µ–Ω –¥–ª—è 300 –º–ª
        print('\n4Ô∏è‚É£ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –†–ê–°–ß–ï–¢ –¶–ï–ù –î–õ–Ø 300 –ú–õ')
        if len(top_df) > 0:
            test_product = top_df.iloc[0]
            brand = test_product.get('–ë—Ä–µ–Ω–¥', 'N/A')
            aroma = test_product.get('–ê—Ä–æ–º–∞—Ç', 'N/A')
            
            print(f'üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {brand} - {aroma}')
            print('üìä –¶–µ–Ω—ã:')
            prices = {}
            for col in ['30 GR', '50 GR', '500 GR', '1 KG']:
                price = test_product.get(col, 'N/A')
                prices[col] = price
                print(f'    {col}: {price}‚ÇΩ/–º–ª')
            
            # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è 300 –º–ª
            volume_ml = 300
            if volume_ml <= 49:
                should_use = '30 GR'
            elif volume_ml <= 499:
                should_use = '50 GR'
            elif volume_ml <= 999:
                should_use = '500 GR'
            else:
                should_use = '1 KG'
            
            print(f'\nüí° –î–ª—è {volume_ml} –º–ª –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–æ–ª–±–µ—Ü: {should_use}')
            
            price_per_ml = prices[should_use]
            if pd.notna(price_per_ml) and price_per_ml != 'N/A':
                total_price = float(price_per_ml) * volume_ml
                print(f'üí∞ –†–∞—Å—á–µ—Ç: {price_per_ml}‚ÇΩ/–º–ª √ó {volume_ml}–º–ª = {total_price}‚ÇΩ')
                print('‚úÖ –†–ê–°–ß–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–´–ô')
            else:
                print(f'‚ùå –û–®–ò–ë–ö–ê: –¶–µ–Ω–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ {should_use} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {price_per_ml}')
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è DeepSeek
        print('\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –§–û–†–ú–ê–¢–ê –ö–ê–ß–ï–°–¢–í–ê –î–õ–Ø DEEPSEEK')
        quality_formats = df['–ö–∞—á–µ—Å—Ç–≤–æ'].unique()
        correct_formats = ['TOP', 'Q1', 'Q2']
        
        print(f'üìã –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {list(quality_formats)}')
        
        all_correct = all(q in correct_formats for q in quality_formats if pd.notna(q))
        if all_correct:
            print('‚úÖ –í–°–ï –ö–ê–ß–ï–°–¢–í–ê –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –§–û–†–ú–ê–¢–ï (TOP/Q1/Q2)')
        else:
            wrong_formats = [q for q in quality_formats if pd.notna(q) and q not in correct_formats]
            print(f'‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ï –§–û–†–ú–ê–¢–´ –ö–ê–ß–ï–°–¢–í–ê: {wrong_formats}')
        
        print('\n' + '=' * 50)
        print('üìä –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:')
        print(f'‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è: {len(df)} —Ç–æ–≤–∞—Ä–æ–≤')
        print(f'‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {list(quality_formats)}')
        print(f'‚úÖ –†–∞—Å—á–µ—Ç —Ü–µ–Ω –¥–ª—è 300 –º–ª: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü "50 GR"')
        print(f'‚úÖ –¢–û–ü —Ç–æ–≤–∞—Ä—ã: {"–µ—Å—Ç—å" if "TOP LAST" in df.columns else "–Ω–µ—Ç"}')
        
        return True
        
    except Exception as e:
        print(f'‚ùå –û–®–ò–ë–ö–ê: {e}')
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    quick_test() 